
Sterowanie_i_pomiar_nat_swiatla.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08006884  08006884  00016884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800691c  0800691c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800691c  0800691c  0001691c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006924  08006924  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006924  08006924  00016924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006928  08006928  00016928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800692c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000604  20000070  0800699c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000674  0800699c  00020674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018afe  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce9  00000000  00000000  00038b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  0003b888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001270  00000000  00000000  0003cc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002755b  00000000  00000000  0003de90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001803d  00000000  00000000  000653eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3db1  00000000  00000000  0007d428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001711d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005830  00000000  00000000  0017122c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800686c 	.word	0x0800686c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800686c 	.word	0x0800686c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_uldivmod>:
 8000628:	b953      	cbnz	r3, 8000640 <__aeabi_uldivmod+0x18>
 800062a:	b94a      	cbnz	r2, 8000640 <__aeabi_uldivmod+0x18>
 800062c:	2900      	cmp	r1, #0
 800062e:	bf08      	it	eq
 8000630:	2800      	cmpeq	r0, #0
 8000632:	bf1c      	itt	ne
 8000634:	f04f 31ff 	movne.w	r1, #4294967295
 8000638:	f04f 30ff 	movne.w	r0, #4294967295
 800063c:	f000 b96e 	b.w	800091c <__aeabi_idiv0>
 8000640:	f1ad 0c08 	sub.w	ip, sp, #8
 8000644:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000648:	f000 f806 	bl	8000658 <__udivmoddi4>
 800064c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000654:	b004      	add	sp, #16
 8000656:	4770      	bx	lr

08000658 <__udivmoddi4>:
 8000658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800065c:	9d08      	ldr	r5, [sp, #32]
 800065e:	4604      	mov	r4, r0
 8000660:	468c      	mov	ip, r1
 8000662:	2b00      	cmp	r3, #0
 8000664:	f040 8083 	bne.w	800076e <__udivmoddi4+0x116>
 8000668:	428a      	cmp	r2, r1
 800066a:	4617      	mov	r7, r2
 800066c:	d947      	bls.n	80006fe <__udivmoddi4+0xa6>
 800066e:	fab2 f282 	clz	r2, r2
 8000672:	b142      	cbz	r2, 8000686 <__udivmoddi4+0x2e>
 8000674:	f1c2 0020 	rsb	r0, r2, #32
 8000678:	fa24 f000 	lsr.w	r0, r4, r0
 800067c:	4091      	lsls	r1, r2
 800067e:	4097      	lsls	r7, r2
 8000680:	ea40 0c01 	orr.w	ip, r0, r1
 8000684:	4094      	lsls	r4, r2
 8000686:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800068a:	0c23      	lsrs	r3, r4, #16
 800068c:	fbbc f6f8 	udiv	r6, ip, r8
 8000690:	fa1f fe87 	uxth.w	lr, r7
 8000694:	fb08 c116 	mls	r1, r8, r6, ip
 8000698:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800069c:	fb06 f10e 	mul.w	r1, r6, lr
 80006a0:	4299      	cmp	r1, r3
 80006a2:	d909      	bls.n	80006b8 <__udivmoddi4+0x60>
 80006a4:	18fb      	adds	r3, r7, r3
 80006a6:	f106 30ff 	add.w	r0, r6, #4294967295
 80006aa:	f080 8119 	bcs.w	80008e0 <__udivmoddi4+0x288>
 80006ae:	4299      	cmp	r1, r3
 80006b0:	f240 8116 	bls.w	80008e0 <__udivmoddi4+0x288>
 80006b4:	3e02      	subs	r6, #2
 80006b6:	443b      	add	r3, r7
 80006b8:	1a5b      	subs	r3, r3, r1
 80006ba:	b2a4      	uxth	r4, r4
 80006bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80006c0:	fb08 3310 	mls	r3, r8, r0, r3
 80006c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006cc:	45a6      	cmp	lr, r4
 80006ce:	d909      	bls.n	80006e4 <__udivmoddi4+0x8c>
 80006d0:	193c      	adds	r4, r7, r4
 80006d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006d6:	f080 8105 	bcs.w	80008e4 <__udivmoddi4+0x28c>
 80006da:	45a6      	cmp	lr, r4
 80006dc:	f240 8102 	bls.w	80008e4 <__udivmoddi4+0x28c>
 80006e0:	3802      	subs	r0, #2
 80006e2:	443c      	add	r4, r7
 80006e4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006e8:	eba4 040e 	sub.w	r4, r4, lr
 80006ec:	2600      	movs	r6, #0
 80006ee:	b11d      	cbz	r5, 80006f8 <__udivmoddi4+0xa0>
 80006f0:	40d4      	lsrs	r4, r2
 80006f2:	2300      	movs	r3, #0
 80006f4:	e9c5 4300 	strd	r4, r3, [r5]
 80006f8:	4631      	mov	r1, r6
 80006fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fe:	b902      	cbnz	r2, 8000702 <__udivmoddi4+0xaa>
 8000700:	deff      	udf	#255	; 0xff
 8000702:	fab2 f282 	clz	r2, r2
 8000706:	2a00      	cmp	r2, #0
 8000708:	d150      	bne.n	80007ac <__udivmoddi4+0x154>
 800070a:	1bcb      	subs	r3, r1, r7
 800070c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000710:	fa1f f887 	uxth.w	r8, r7
 8000714:	2601      	movs	r6, #1
 8000716:	fbb3 fcfe 	udiv	ip, r3, lr
 800071a:	0c21      	lsrs	r1, r4, #16
 800071c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000720:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000724:	fb08 f30c 	mul.w	r3, r8, ip
 8000728:	428b      	cmp	r3, r1
 800072a:	d907      	bls.n	800073c <__udivmoddi4+0xe4>
 800072c:	1879      	adds	r1, r7, r1
 800072e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000732:	d202      	bcs.n	800073a <__udivmoddi4+0xe2>
 8000734:	428b      	cmp	r3, r1
 8000736:	f200 80e9 	bhi.w	800090c <__udivmoddi4+0x2b4>
 800073a:	4684      	mov	ip, r0
 800073c:	1ac9      	subs	r1, r1, r3
 800073e:	b2a3      	uxth	r3, r4
 8000740:	fbb1 f0fe 	udiv	r0, r1, lr
 8000744:	fb0e 1110 	mls	r1, lr, r0, r1
 8000748:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800074c:	fb08 f800 	mul.w	r8, r8, r0
 8000750:	45a0      	cmp	r8, r4
 8000752:	d907      	bls.n	8000764 <__udivmoddi4+0x10c>
 8000754:	193c      	adds	r4, r7, r4
 8000756:	f100 33ff 	add.w	r3, r0, #4294967295
 800075a:	d202      	bcs.n	8000762 <__udivmoddi4+0x10a>
 800075c:	45a0      	cmp	r8, r4
 800075e:	f200 80d9 	bhi.w	8000914 <__udivmoddi4+0x2bc>
 8000762:	4618      	mov	r0, r3
 8000764:	eba4 0408 	sub.w	r4, r4, r8
 8000768:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800076c:	e7bf      	b.n	80006ee <__udivmoddi4+0x96>
 800076e:	428b      	cmp	r3, r1
 8000770:	d909      	bls.n	8000786 <__udivmoddi4+0x12e>
 8000772:	2d00      	cmp	r5, #0
 8000774:	f000 80b1 	beq.w	80008da <__udivmoddi4+0x282>
 8000778:	2600      	movs	r6, #0
 800077a:	e9c5 0100 	strd	r0, r1, [r5]
 800077e:	4630      	mov	r0, r6
 8000780:	4631      	mov	r1, r6
 8000782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000786:	fab3 f683 	clz	r6, r3
 800078a:	2e00      	cmp	r6, #0
 800078c:	d14a      	bne.n	8000824 <__udivmoddi4+0x1cc>
 800078e:	428b      	cmp	r3, r1
 8000790:	d302      	bcc.n	8000798 <__udivmoddi4+0x140>
 8000792:	4282      	cmp	r2, r0
 8000794:	f200 80b8 	bhi.w	8000908 <__udivmoddi4+0x2b0>
 8000798:	1a84      	subs	r4, r0, r2
 800079a:	eb61 0103 	sbc.w	r1, r1, r3
 800079e:	2001      	movs	r0, #1
 80007a0:	468c      	mov	ip, r1
 80007a2:	2d00      	cmp	r5, #0
 80007a4:	d0a8      	beq.n	80006f8 <__udivmoddi4+0xa0>
 80007a6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007aa:	e7a5      	b.n	80006f8 <__udivmoddi4+0xa0>
 80007ac:	f1c2 0320 	rsb	r3, r2, #32
 80007b0:	fa20 f603 	lsr.w	r6, r0, r3
 80007b4:	4097      	lsls	r7, r2
 80007b6:	fa01 f002 	lsl.w	r0, r1, r2
 80007ba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007be:	40d9      	lsrs	r1, r3
 80007c0:	4330      	orrs	r0, r6
 80007c2:	0c03      	lsrs	r3, r0, #16
 80007c4:	fbb1 f6fe 	udiv	r6, r1, lr
 80007c8:	fa1f f887 	uxth.w	r8, r7
 80007cc:	fb0e 1116 	mls	r1, lr, r6, r1
 80007d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007d4:	fb06 f108 	mul.w	r1, r6, r8
 80007d8:	4299      	cmp	r1, r3
 80007da:	fa04 f402 	lsl.w	r4, r4, r2
 80007de:	d909      	bls.n	80007f4 <__udivmoddi4+0x19c>
 80007e0:	18fb      	adds	r3, r7, r3
 80007e2:	f106 3cff 	add.w	ip, r6, #4294967295
 80007e6:	f080 808d 	bcs.w	8000904 <__udivmoddi4+0x2ac>
 80007ea:	4299      	cmp	r1, r3
 80007ec:	f240 808a 	bls.w	8000904 <__udivmoddi4+0x2ac>
 80007f0:	3e02      	subs	r6, #2
 80007f2:	443b      	add	r3, r7
 80007f4:	1a5b      	subs	r3, r3, r1
 80007f6:	b281      	uxth	r1, r0
 80007f8:	fbb3 f0fe 	udiv	r0, r3, lr
 80007fc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000800:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000804:	fb00 f308 	mul.w	r3, r0, r8
 8000808:	428b      	cmp	r3, r1
 800080a:	d907      	bls.n	800081c <__udivmoddi4+0x1c4>
 800080c:	1879      	adds	r1, r7, r1
 800080e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000812:	d273      	bcs.n	80008fc <__udivmoddi4+0x2a4>
 8000814:	428b      	cmp	r3, r1
 8000816:	d971      	bls.n	80008fc <__udivmoddi4+0x2a4>
 8000818:	3802      	subs	r0, #2
 800081a:	4439      	add	r1, r7
 800081c:	1acb      	subs	r3, r1, r3
 800081e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000822:	e778      	b.n	8000716 <__udivmoddi4+0xbe>
 8000824:	f1c6 0c20 	rsb	ip, r6, #32
 8000828:	fa03 f406 	lsl.w	r4, r3, r6
 800082c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000830:	431c      	orrs	r4, r3
 8000832:	fa20 f70c 	lsr.w	r7, r0, ip
 8000836:	fa01 f306 	lsl.w	r3, r1, r6
 800083a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800083e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000842:	431f      	orrs	r7, r3
 8000844:	0c3b      	lsrs	r3, r7, #16
 8000846:	fbb1 f9fe 	udiv	r9, r1, lr
 800084a:	fa1f f884 	uxth.w	r8, r4
 800084e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000852:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000856:	fb09 fa08 	mul.w	sl, r9, r8
 800085a:	458a      	cmp	sl, r1
 800085c:	fa02 f206 	lsl.w	r2, r2, r6
 8000860:	fa00 f306 	lsl.w	r3, r0, r6
 8000864:	d908      	bls.n	8000878 <__udivmoddi4+0x220>
 8000866:	1861      	adds	r1, r4, r1
 8000868:	f109 30ff 	add.w	r0, r9, #4294967295
 800086c:	d248      	bcs.n	8000900 <__udivmoddi4+0x2a8>
 800086e:	458a      	cmp	sl, r1
 8000870:	d946      	bls.n	8000900 <__udivmoddi4+0x2a8>
 8000872:	f1a9 0902 	sub.w	r9, r9, #2
 8000876:	4421      	add	r1, r4
 8000878:	eba1 010a 	sub.w	r1, r1, sl
 800087c:	b2bf      	uxth	r7, r7
 800087e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000882:	fb0e 1110 	mls	r1, lr, r0, r1
 8000886:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800088a:	fb00 f808 	mul.w	r8, r0, r8
 800088e:	45b8      	cmp	r8, r7
 8000890:	d907      	bls.n	80008a2 <__udivmoddi4+0x24a>
 8000892:	19e7      	adds	r7, r4, r7
 8000894:	f100 31ff 	add.w	r1, r0, #4294967295
 8000898:	d22e      	bcs.n	80008f8 <__udivmoddi4+0x2a0>
 800089a:	45b8      	cmp	r8, r7
 800089c:	d92c      	bls.n	80008f8 <__udivmoddi4+0x2a0>
 800089e:	3802      	subs	r0, #2
 80008a0:	4427      	add	r7, r4
 80008a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008a6:	eba7 0708 	sub.w	r7, r7, r8
 80008aa:	fba0 8902 	umull	r8, r9, r0, r2
 80008ae:	454f      	cmp	r7, r9
 80008b0:	46c6      	mov	lr, r8
 80008b2:	4649      	mov	r1, r9
 80008b4:	d31a      	bcc.n	80008ec <__udivmoddi4+0x294>
 80008b6:	d017      	beq.n	80008e8 <__udivmoddi4+0x290>
 80008b8:	b15d      	cbz	r5, 80008d2 <__udivmoddi4+0x27a>
 80008ba:	ebb3 020e 	subs.w	r2, r3, lr
 80008be:	eb67 0701 	sbc.w	r7, r7, r1
 80008c2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008c6:	40f2      	lsrs	r2, r6
 80008c8:	ea4c 0202 	orr.w	r2, ip, r2
 80008cc:	40f7      	lsrs	r7, r6
 80008ce:	e9c5 2700 	strd	r2, r7, [r5]
 80008d2:	2600      	movs	r6, #0
 80008d4:	4631      	mov	r1, r6
 80008d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008da:	462e      	mov	r6, r5
 80008dc:	4628      	mov	r0, r5
 80008de:	e70b      	b.n	80006f8 <__udivmoddi4+0xa0>
 80008e0:	4606      	mov	r6, r0
 80008e2:	e6e9      	b.n	80006b8 <__udivmoddi4+0x60>
 80008e4:	4618      	mov	r0, r3
 80008e6:	e6fd      	b.n	80006e4 <__udivmoddi4+0x8c>
 80008e8:	4543      	cmp	r3, r8
 80008ea:	d2e5      	bcs.n	80008b8 <__udivmoddi4+0x260>
 80008ec:	ebb8 0e02 	subs.w	lr, r8, r2
 80008f0:	eb69 0104 	sbc.w	r1, r9, r4
 80008f4:	3801      	subs	r0, #1
 80008f6:	e7df      	b.n	80008b8 <__udivmoddi4+0x260>
 80008f8:	4608      	mov	r0, r1
 80008fa:	e7d2      	b.n	80008a2 <__udivmoddi4+0x24a>
 80008fc:	4660      	mov	r0, ip
 80008fe:	e78d      	b.n	800081c <__udivmoddi4+0x1c4>
 8000900:	4681      	mov	r9, r0
 8000902:	e7b9      	b.n	8000878 <__udivmoddi4+0x220>
 8000904:	4666      	mov	r6, ip
 8000906:	e775      	b.n	80007f4 <__udivmoddi4+0x19c>
 8000908:	4630      	mov	r0, r6
 800090a:	e74a      	b.n	80007a2 <__udivmoddi4+0x14a>
 800090c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000910:	4439      	add	r1, r7
 8000912:	e713      	b.n	800073c <__udivmoddi4+0xe4>
 8000914:	3802      	subs	r0, #2
 8000916:	443c      	add	r4, r7
 8000918:	e724      	b.n	8000764 <__udivmoddi4+0x10c>
 800091a:	bf00      	nop

0800091c <__aeabi_idiv0>:
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop

08000920 <BH1750_Init>:

//
//	Initialization.
//
BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	bh1750_i2c = hi2c;
 8000928:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <BH1750_Init+0x34>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 800092e:	f000 f813 	bl	8000958 <BH1750_Reset>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d107      	bne.n	8000948 <BH1750_Init+0x28>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG)) // Set default value;
 8000938:	2045      	movs	r0, #69	; 0x45
 800093a:	f000 f859 	bl	80009f0 <BH1750_SetMtreg>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d101      	bne.n	8000948 <BH1750_Init+0x28>
			return BH1750_OK;
 8000944:	2300      	movs	r3, #0
 8000946:	e000      	b.n	800094a <BH1750_Init+0x2a>
	}
	return BH1750_ERROR;
 8000948:	2301      	movs	r3, #1
}
 800094a:	4618      	mov	r0, r3
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	2000009c 	.word	0x2000009c

08000958 <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 800095e:	2307      	movs	r3, #7
 8000960:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <BH1750_Reset+0x30>)
 8000964:	6818      	ldr	r0, [r3, #0]
 8000966:	1dfa      	adds	r2, r7, #7
 8000968:	230a      	movs	r3, #10
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	2301      	movs	r3, #1
 800096e:	2146      	movs	r1, #70	; 0x46
 8000970:	f001 fbec 	bl	800214c <HAL_I2C_Master_Transmit>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d101      	bne.n	800097e <BH1750_Reset+0x26>
		return BH1750_OK;
 800097a:	2300      	movs	r3, #0
 800097c:	e000      	b.n	8000980 <BH1750_Reset+0x28>

	return BH1750_ERROR;
 800097e:	2301      	movs	r3, #1
}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	2000009c 	.word	0x2000009c

0800098c <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(bh1750_mode Mode)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af02      	add	r7, sp, #8
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	091b      	lsrs	r3, r3, #4
 800099a:	b2db      	uxtb	r3, r3
 800099c:	2b00      	cmp	r3, #0
 800099e:	d106      	bne.n	80009ae <BH1750_SetMode+0x22>
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	095b      	lsrs	r3, r3, #5
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d101      	bne.n	80009ae <BH1750_SetMode+0x22>
 80009aa:	2301      	movs	r3, #1
 80009ac:	e018      	b.n	80009e0 <BH1750_SetMode+0x54>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	f003 030c 	and.w	r3, r3, #12
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <BH1750_SetMode+0x30>
 80009b8:	2301      	movs	r3, #1
 80009ba:	e011      	b.n	80009e0 <BH1750_SetMode+0x54>

	Bh1750_Mode = Mode;
 80009bc:	79fa      	ldrb	r2, [r7, #7]
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <BH1750_SetMode+0x5c>)
 80009c0:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 80009c2:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <BH1750_SetMode+0x60>)
 80009c4:	6818      	ldr	r0, [r3, #0]
 80009c6:	1dfa      	adds	r2, r7, #7
 80009c8:	230a      	movs	r3, #10
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	2301      	movs	r3, #1
 80009ce:	2146      	movs	r1, #70	; 0x46
 80009d0:	f001 fbbc 	bl	800214c <HAL_I2C_Master_Transmit>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d101      	bne.n	80009de <BH1750_SetMode+0x52>
		return BH1750_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	e000      	b.n	80009e0 <BH1750_SetMode+0x54>

	return BH1750_ERROR;
 80009de:	2301      	movs	r3, #1
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000098 	.word	0x20000098
 80009ec:	2000009c 	.word	0x2000009c

080009f0 <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af02      	add	r7, sp, #8
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	2b1e      	cmp	r3, #30
 80009fe:	d902      	bls.n	8000a06 <BH1750_SetMtreg+0x16>
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	2bff      	cmp	r3, #255	; 0xff
 8000a04:	d101      	bne.n	8000a0a <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	e037      	b.n	8000a7a <BH1750_SetMtreg+0x8a>
	}

	Bh1750_Mtreg = Mtreg;
 8000a0a:	4a1e      	ldr	r2, [pc, #120]	; (8000a84 <BH1750_SetMtreg+0x94>)
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	095b      	lsrs	r3, r3, #5
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	f003 031f 	and.w	r3, r3, #31
 8000a26:	b25b      	sxtb	r3, r3
 8000a28:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000a2c:	b25b      	sxtb	r3, r3
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <BH1750_SetMtreg+0x98>)
 8000a34:	6818      	ldr	r0, [r3, #0]
 8000a36:	f107 020c 	add.w	r2, r7, #12
 8000a3a:	230a      	movs	r3, #10
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2301      	movs	r3, #1
 8000a40:	2146      	movs	r1, #70	; 0x46
 8000a42:	f001 fb83 	bl	800214c <HAL_I2C_Master_Transmit>
 8000a46:	4603      	mov	r3, r0
 8000a48:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != retCode) {
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <BH1750_SetMtreg+0x64>
		return BH1750_ERROR;
 8000a50:	2301      	movs	r3, #1
 8000a52:	e012      	b.n	8000a7a <BH1750_SetMtreg+0x8a>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <BH1750_SetMtreg+0x98>)
 8000a56:	6818      	ldr	r0, [r3, #0]
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	1c5a      	adds	r2, r3, #1
 8000a5e:	230a      	movs	r3, #10
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	2301      	movs	r3, #1
 8000a64:	2146      	movs	r1, #70	; 0x46
 8000a66:	f001 fb71 	bl	800214c <HAL_I2C_Master_Transmit>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK == retCode) {
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d101      	bne.n	8000a78 <BH1750_SetMtreg+0x88>
		return BH1750_OK;
 8000a74:	2300      	movs	r3, #0
 8000a76:	e000      	b.n	8000a7a <BH1750_SetMtreg+0x8a>
	}

	return BH1750_ERROR;
 8000a78:	2301      	movs	r3, #1
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200000a0 	.word	0x200000a0
 8000a88:	2000009c 	.word	0x2000009c

08000a8c <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(float *Result)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af02      	add	r7, sp, #8
 8000a92:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];

	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 8000a94:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <BH1750_ReadLight+0xa0>)
 8000a96:	6818      	ldr	r0, [r3, #0]
 8000a98:	f107 0208 	add.w	r2, r7, #8
 8000a9c:	230a      	movs	r3, #10
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	2146      	movs	r1, #70	; 0x46
 8000aa4:	f001 fc46 	bl	8002334 <HAL_I2C_Master_Receive>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d138      	bne.n	8000b20 <BH1750_ReadLight+0x94>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 8000aae:	7a3b      	ldrb	r3, [r7, #8]
 8000ab0:	021b      	lsls	r3, r3, #8
 8000ab2:	7a7a      	ldrb	r2, [r7, #9]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	ee07 3a90 	vmov	s15, r3
 8000aba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000abe:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <BH1750_ReadLight+0xa4>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b45      	cmp	r3, #69	; 0x45
 8000ac8:	d00f      	beq.n	8000aea <BH1750_ReadLight+0x5e>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 8000aca:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <BH1750_ReadLight+0xa4>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	ee07 3a90 	vmov	s15, r3
 8000ad2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ad6:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000b34 <BH1750_ReadLight+0xa8>
 8000ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ade:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ae6:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 8000aea:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <BH1750_ReadLight+0xac>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b21      	cmp	r3, #33	; 0x21
 8000af0:	d003      	beq.n	8000afa <BH1750_ReadLight+0x6e>
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <BH1750_ReadLight+0xac>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b11      	cmp	r3, #17
 8000af8:	d107      	bne.n	8000b0a <BH1750_ReadLight+0x7e>
		{
			result /= 2.0;
 8000afa:	ed97 7a03 	vldr	s14, [r7, #12]
 8000afe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000b02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b06:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 8000b0a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b0e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000b3c <BH1750_ReadLight+0xb0>
 8000b12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	e000      	b.n	8000b22 <BH1750_ReadLight+0x96>
	}
	return BH1750_ERROR;
 8000b20:	2301      	movs	r3, #1
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	2000009c 	.word	0x2000009c
 8000b30:	200000a0 	.word	0x200000a0
 8000b34:	428a0000 	.word	0x428a0000
 8000b38:	20000098 	.word	0x20000098
 8000b3c:	3f99999a 	.word	0x3f99999a

08000b40 <lcd_send_cmd>:

//#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup
#define SLAVE_ADDRESS_LCD 0x27<<1// change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af02      	add	r7, sp, #8
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	f023 030f 	bic.w	r3, r3, #15
 8000b50:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	011b      	lsls	r3, r3, #4
 8000b56:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	f043 030c 	orr.w	r3, r3, #12
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	f043 0308 	orr.w	r3, r3, #8
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000b6c:	7bbb      	ldrb	r3, [r7, #14]
 8000b6e:	f043 030c 	orr.w	r3, r3, #12
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000b76:	7bbb      	ldrb	r3, [r7, #14]
 8000b78:	f043 0308 	orr.w	r3, r3, #8
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b80:	f107 0208 	add.w	r2, r7, #8
 8000b84:	2364      	movs	r3, #100	; 0x64
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	2304      	movs	r3, #4
 8000b8a:	214e      	movs	r1, #78	; 0x4e
 8000b8c:	4803      	ldr	r0, [pc, #12]	; (8000b9c <lcd_send_cmd+0x5c>)
 8000b8e:	f001 fadd 	bl	800214c <HAL_I2C_Master_Transmit>
}
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200000a4 	.word	0x200000a4

08000ba0 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af02      	add	r7, sp, #8
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	f023 030f 	bic.w	r3, r3, #15
 8000bb0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	011b      	lsls	r3, r3, #4
 8000bb6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	f043 030d 	orr.w	r3, r3, #13
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
 8000bc4:	f043 0309 	orr.w	r3, r3, #9
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000bcc:	7bbb      	ldrb	r3, [r7, #14]
 8000bce:	f043 030d 	orr.w	r3, r3, #13
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000bd6:	7bbb      	ldrb	r3, [r7, #14]
 8000bd8:	f043 0309 	orr.w	r3, r3, #9
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000be0:	f107 0208 	add.w	r2, r7, #8
 8000be4:	2364      	movs	r3, #100	; 0x64
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	2304      	movs	r3, #4
 8000bea:	214e      	movs	r1, #78	; 0x4e
 8000bec:	4803      	ldr	r0, [pc, #12]	; (8000bfc <lcd_send_data+0x5c>)
 8000bee:	f001 faad 	bl	800214c <HAL_I2C_Master_Transmit>
}
 8000bf2:	bf00      	nop
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200000a4 	.word	0x200000a4

08000c00 <lcd_clear>:

void lcd_clear (void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000c06:	2080      	movs	r0, #128	; 0x80
 8000c08:	f7ff ff9a 	bl	8000b40 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	e005      	b.n	8000c1e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000c12:	2020      	movs	r0, #32
 8000c14:	f7ff ffc4 	bl	8000ba0 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2b45      	cmp	r3, #69	; 0x45
 8000c22:	ddf6      	ble.n	8000c12 <lcd_clear+0x12>
	}
	lcd_put_cur(0, 0); //Dopisane ustawienie kursora na 0,0
 8000c24:	2100      	movs	r1, #0
 8000c26:	2000      	movs	r0, #0
 8000c28:	f000 f804 	bl	8000c34 <lcd_put_cur>
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
    switch (row)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d003      	beq.n	8000c4c <lcd_put_cur+0x18>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d005      	beq.n	8000c56 <lcd_put_cur+0x22>
 8000c4a:	e009      	b.n	8000c60 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c52:	603b      	str	r3, [r7, #0]
            break;
 8000c54:	e004      	b.n	8000c60 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000c5c:	603b      	str	r3, [r7, #0]
            break;
 8000c5e:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff6b 	bl	8000b40 <lcd_send_cmd>
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <lcd_init>:


void lcd_init (void)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000c76:	2032      	movs	r0, #50	; 0x32
 8000c78:	f000 ff08 	bl	8001a8c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c7c:	2030      	movs	r0, #48	; 0x30
 8000c7e:	f7ff ff5f 	bl	8000b40 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000c82:	2005      	movs	r0, #5
 8000c84:	f000 ff02 	bl	8001a8c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c88:	2030      	movs	r0, #48	; 0x30
 8000c8a:	f7ff ff59 	bl	8000b40 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f000 fefc 	bl	8001a8c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c94:	2030      	movs	r0, #48	; 0x30
 8000c96:	f7ff ff53 	bl	8000b40 <lcd_send_cmd>
	HAL_Delay(10);
 8000c9a:	200a      	movs	r0, #10
 8000c9c:	f000 fef6 	bl	8001a8c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000ca0:	2020      	movs	r0, #32
 8000ca2:	f7ff ff4d 	bl	8000b40 <lcd_send_cmd>
	HAL_Delay(10);
 8000ca6:	200a      	movs	r0, #10
 8000ca8:	f000 fef0 	bl	8001a8c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000cac:	2028      	movs	r0, #40	; 0x28
 8000cae:	f7ff ff47 	bl	8000b40 <lcd_send_cmd>
	HAL_Delay(1);
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f000 feea 	bl	8001a8c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000cb8:	2008      	movs	r0, #8
 8000cba:	f7ff ff41 	bl	8000b40 <lcd_send_cmd>
	HAL_Delay(1);
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	f000 fee4 	bl	8001a8c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f7ff ff3b 	bl	8000b40 <lcd_send_cmd>
	HAL_Delay(1);
 8000cca:	2001      	movs	r0, #1
 8000ccc:	f000 fede 	bl	8001a8c <HAL_Delay>
	HAL_Delay(1);
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	f000 fedb 	bl	8001a8c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000cd6:	2006      	movs	r0, #6
 8000cd8:	f7ff ff32 	bl	8000b40 <lcd_send_cmd>
	HAL_Delay(1);
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f000 fed5 	bl	8001a8c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000ce2:	200c      	movs	r0, #12
 8000ce4:	f7ff ff2c 	bl	8000b40 <lcd_send_cmd>
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}

08000cec <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	while (*str)
 8000cf4:	e006      	b.n	8000d04 <lcd_send_string+0x18>
	{
		lcd_send_data (*str++);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	1c5a      	adds	r2, r3, #1
 8000cfa:	607a      	str	r2, [r7, #4]
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff ff4e 	bl	8000ba0 <lcd_send_data>
	while (*str)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1f4      	bne.n	8000cf6 <lcd_send_string+0xa>
	}
}
 8000d0c:	bf00      	nop
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b09e      	sub	sp, #120	; 0x78
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
#define MAX_LENGTH 30
char text[MAX_LENGTH];
char msg[64];
int impulsy;
int pwm = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	673b      	str	r3, [r7, #112]	; 0x70
int pwm_max = 100;
 8000d22:	2364      	movs	r3, #100	; 0x64
 8000d24:	66fb      	str	r3, [r7, #108]	; 0x6c
int pwm_min = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	66bb      	str	r3, [r7, #104]	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2a:	f000 fe52 	bl	80019d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2e:	f000 f897 	bl	8000e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d32:	f000 fad7 	bl	80012e4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000d36:	f000 fa77 	bl	8001228 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d3a:	f000 faa5 	bl	8001288 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C4_Init();
 8000d3e:	f000 f963 	bl	8001008 <MX_I2C4_Init>
  MX_TIM3_Init();
 8000d42:	f000 f9fb 	bl	800113c <MX_TIM3_Init>
  MX_I2C1_Init();
 8000d46:	f000 f91f 	bl	8000f88 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000d4a:	f000 f99d 	bl	8001088 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000d4e:	2100      	movs	r1, #0
 8000d50:	483a      	ldr	r0, [pc, #232]	; (8000e3c <main+0x124>)
 8000d52:	f003 f99b 	bl	800408c <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000d56:	213c      	movs	r1, #60	; 0x3c
 8000d58:	4839      	ldr	r0, [pc, #228]	; (8000e40 <main+0x128>)
 8000d5a:	f003 fb37 	bl	80043cc <HAL_TIM_Encoder_Start>

  BH1750_Init(&hi2c1);
 8000d5e:	4839      	ldr	r0, [pc, #228]	; (8000e44 <main+0x12c>)
 8000d60:	f7ff fdde 	bl	8000920 <BH1750_Init>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 8000d64:	2011      	movs	r0, #17
 8000d66:	f7ff fe11 	bl	800098c <BH1750_SetMode>

  lcd_init();
 8000d6a:	f7ff ff82 	bl	8000c72 <lcd_init>
  lcd_send_string ("Projekt");
 8000d6e:	4836      	ldr	r0, [pc, #216]	; (8000e48 <main+0x130>)
 8000d70:	f7ff ffbc 	bl	8000cec <lcd_send_string>
  HAL_Delay(1000);
 8000d74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d78:	f000 fe88 	bl	8001a8c <HAL_Delay>
  lcd_put_cur(0, 0);
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f7ff ff58 	bl	8000c34 <lcd_put_cur>
  lcd_send_string("D. Boberska");
 8000d84:	4831      	ldr	r0, [pc, #196]	; (8000e4c <main+0x134>)
 8000d86:	f7ff ffb1 	bl	8000cec <lcd_send_string>
  lcd_put_cur(1, 0);
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	f7ff ff51 	bl	8000c34 <lcd_put_cur>
  lcd_send_string("W. Czerniejewska");
 8000d92:	482f      	ldr	r0, [pc, #188]	; (8000e50 <main+0x138>)
 8000d94:	f7ff ffaa 	bl	8000cec <lcd_send_string>
  HAL_Delay(1500);
 8000d98:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000d9c:	f000 fe76 	bl	8001a8c <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  BH1750_ReadLight(&BH1750_lux);
 8000da0:	482c      	ldr	r0, [pc, #176]	; (8000e54 <main+0x13c>)
 8000da2:	f7ff fe73 	bl	8000a8c <BH1750_ReadLight>



	  lcd_clear ();
 8000da6:	f7ff ff2b 	bl	8000c00 <lcd_clear>
	  lcd_put_cur(0, 0);
 8000daa:	2100      	movs	r1, #0
 8000dac:	2000      	movs	r0, #0
 8000dae:	f7ff ff41 	bl	8000c34 <lcd_put_cur>
	  sprintf((char*)text, "P.swiatla  %.2f  LUX", BH1750_lux);
 8000db2:	4b28      	ldr	r3, [pc, #160]	; (8000e54 <main+0x13c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fbde 	bl	8000578 <__aeabi_f2d>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000dc4:	4924      	ldr	r1, [pc, #144]	; (8000e58 <main+0x140>)
 8000dc6:	f005 f923 	bl	8006010 <siprintf>
	  lcd_send_string(text);
 8000dca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff8c 	bl	8000cec <lcd_send_string>

	  int imp = impulsy;
 8000dd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000dd6:	667b      	str	r3, [r7, #100]	; 0x64
	  impulsy = __HAL_TIM_GET_COUNTER(&htim1);
 8000dd8:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <main+0x128>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dde:	677b      	str	r3, [r7, #116]	; 0x74
	  if((impulsy > imp) && (pwm < pwm_max)){
 8000de0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000de2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000de4:	429a      	cmp	r2, r3
 8000de6:	dd07      	ble.n	8000df8 <main+0xe0>
 8000de8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000dec:	429a      	cmp	r2, r3
 8000dee:	da03      	bge.n	8000df8 <main+0xe0>
	  	pwm = pwm + 10;
 8000df0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000df2:	330a      	adds	r3, #10
 8000df4:	673b      	str	r3, [r7, #112]	; 0x70
 8000df6:	e00a      	b.n	8000e0e <main+0xf6>
	  }else if((impulsy < imp) && (pwm > pwm_min)){
 8000df8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000dfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	da06      	bge.n	8000e0e <main+0xf6>
 8000e00:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000e02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000e04:	429a      	cmp	r2, r3
 8000e06:	dd02      	ble.n	8000e0e <main+0xf6>
	  	pwm = pwm - 10;
 8000e08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e0a:	3b0a      	subs	r3, #10
 8000e0c:	673b      	str	r3, [r7, #112]	; 0x70
	  }
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,pwm);
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <main+0x124>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000e14:	635a      	str	r2, [r3, #52]	; 0x34

	  sprintf((char*)msg, "PWM = %3i" , pwm);
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000e1a:	4910      	ldr	r1, [pc, #64]	; (8000e5c <main+0x144>)
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f005 f8f7 	bl	8006010 <siprintf>
	  lcd_put_cur(1,0);
 8000e22:	2100      	movs	r1, #0
 8000e24:	2001      	movs	r0, #1
 8000e26:	f7ff ff05 	bl	8000c34 <lcd_put_cur>
	  lcd_send_string(msg);
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ff5d 	bl	8000cec <lcd_send_string>
	  HAL_Delay(250);
 8000e32:	20fa      	movs	r0, #250	; 0xfa
 8000e34:	f000 fe2a 	bl	8001a8c <HAL_Delay>
  {
 8000e38:	e7b2      	b.n	8000da0 <main+0x88>
 8000e3a:	bf00      	nop
 8000e3c:	200005c4 	.word	0x200005c4
 8000e40:	20000614 	.word	0x20000614
 8000e44:	20000174 	.word	0x20000174
 8000e48:	08006884 	.word	0x08006884
 8000e4c:	0800688c 	.word	0x0800688c
 8000e50:	08006898 	.word	0x08006898
 8000e54:	20000610 	.word	0x20000610
 8000e58:	080068ac 	.word	0x080068ac
 8000e5c:	080068c4 	.word	0x080068c4

08000e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b0b4      	sub	sp, #208	; 0xd0
 8000e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e66:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000e6a:	2230      	movs	r2, #48	; 0x30
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f005 f8c6 	bl	8006000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e74:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e84:	f107 0308 	add.w	r3, r7, #8
 8000e88:	2284      	movs	r2, #132	; 0x84
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f005 f8b7 	bl	8006000 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e92:	f001 ff9d 	bl	8002dd0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e96:	4b39      	ldr	r3, [pc, #228]	; (8000f7c <SystemClock_Config+0x11c>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	4a38      	ldr	r2, [pc, #224]	; (8000f7c <SystemClock_Config+0x11c>)
 8000e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea2:	4b36      	ldr	r3, [pc, #216]	; (8000f7c <SystemClock_Config+0x11c>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000eae:	4b34      	ldr	r3, [pc, #208]	; (8000f80 <SystemClock_Config+0x120>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000eb6:	4a32      	ldr	r2, [pc, #200]	; (8000f80 <SystemClock_Config+0x120>)
 8000eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ebc:	6013      	str	r3, [r2, #0]
 8000ebe:	4b30      	ldr	r3, [pc, #192]	; (8000f80 <SystemClock_Config+0x120>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ed0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ed4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ede:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ee2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ee6:	2304      	movs	r3, #4
 8000ee8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000eec:	2348      	movs	r3, #72	; 0x48
 8000eee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000efe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f001 ff74 	bl	8002df0 <HAL_RCC_OscConfig>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000f0e:	f000 fae7 	bl	80014e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f12:	230f      	movs	r3, #15
 8000f14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f32:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f36:	2102      	movs	r1, #2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f002 f9fd 	bl	8003338 <HAL_RCC_ClockConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000f44:	f000 facc 	bl	80014e0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <SystemClock_Config+0x124>)
 8000f4a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C4|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	4618      	mov	r0, r3
 8000f64:	f002 fbea 	bl	800373c <HAL_RCCEx_PeriphCLKConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SystemClock_Config+0x112>
  {
    Error_Handler();
 8000f6e:	f000 fab7 	bl	80014e0 <Error_Handler>
  }
}
 8000f72:	bf00      	nop
 8000f74:	37d0      	adds	r7, #208	; 0xd0
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40007000 	.word	0x40007000
 8000f84:	00224100 	.word	0x00224100

08000f88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000f8e:	4a1c      	ldr	r2, [pc, #112]	; (8001000 <MX_I2C1_Init+0x78>)
 8000f90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8000f92:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000f94:	4a1b      	ldr	r2, [pc, #108]	; (8001004 <MX_I2C1_Init+0x7c>)
 8000f96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f98:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f9e:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fc2:	480e      	ldr	r0, [pc, #56]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000fc4:	f001 f832 	bl	800202c <HAL_I2C_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fce:	f000 fa87 	bl	80014e0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4809      	ldr	r0, [pc, #36]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000fd6:	f001 fd1b 	bl	8002a10 <HAL_I2CEx_ConfigAnalogFilter>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fe0:	f000 fa7e 	bl	80014e0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000fe8:	f001 fd5d 	bl	8002aa6 <HAL_I2CEx_ConfigDigitalFilter>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ff2:	f000 fa75 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000174 	.word	0x20000174
 8001000:	40005400 	.word	0x40005400
 8001004:	00808cd2 	.word	0x00808cd2

08001008 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800100c:	4b1b      	ldr	r3, [pc, #108]	; (800107c <MX_I2C4_Init+0x74>)
 800100e:	4a1c      	ldr	r2, [pc, #112]	; (8001080 <MX_I2C4_Init+0x78>)
 8001010:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <MX_I2C4_Init+0x74>)
 8001014:	4a1b      	ldr	r2, [pc, #108]	; (8001084 <MX_I2C4_Init+0x7c>)
 8001016:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <MX_I2C4_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800101e:	4b17      	ldr	r3, [pc, #92]	; (800107c <MX_I2C4_Init+0x74>)
 8001020:	2201      	movs	r2, #1
 8001022:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <MX_I2C4_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800102a:	4b14      	ldr	r3, [pc, #80]	; (800107c <MX_I2C4_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <MX_I2C4_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_I2C4_Init+0x74>)
 8001038:	2200      	movs	r2, #0
 800103a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <MX_I2C4_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001042:	480e      	ldr	r0, [pc, #56]	; (800107c <MX_I2C4_Init+0x74>)
 8001044:	f000 fff2 	bl	800202c <HAL_I2C_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800104e:	f000 fa47 	bl	80014e0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001052:	2100      	movs	r1, #0
 8001054:	4809      	ldr	r0, [pc, #36]	; (800107c <MX_I2C4_Init+0x74>)
 8001056:	f001 fcdb 	bl	8002a10 <HAL_I2CEx_ConfigAnalogFilter>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001060:	f000 fa3e 	bl	80014e0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001064:	2100      	movs	r1, #0
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_I2C4_Init+0x74>)
 8001068:	f001 fd1d 	bl	8002aa6 <HAL_I2CEx_ConfigDigitalFilter>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001072:	f000 fa35 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200000a4 	.word	0x200000a4
 8001080:	40006000 	.word	0x40006000
 8001084:	00808cd2 	.word	0x00808cd2

08001088 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08c      	sub	sp, #48	; 0x30
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	2224      	movs	r2, #36	; 0x24
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f004 ffb2 	bl	8006000 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109c:	463b      	mov	r3, r7
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010a6:	4b23      	ldr	r3, [pc, #140]	; (8001134 <MX_TIM1_Init+0xac>)
 80010a8:	4a23      	ldr	r2, [pc, #140]	; (8001138 <MX_TIM1_Init+0xb0>)
 80010aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010ac:	4b21      	ldr	r3, [pc, #132]	; (8001134 <MX_TIM1_Init+0xac>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b2:	4b20      	ldr	r3, [pc, #128]	; (8001134 <MX_TIM1_Init+0xac>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 23;
 80010b8:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <MX_TIM1_Init+0xac>)
 80010ba:	2217      	movs	r2, #23
 80010bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010be:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <MX_TIM1_Init+0xac>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <MX_TIM1_Init+0xac>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ca:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <MX_TIM1_Init+0xac>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80010d0:	2301      	movs	r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010d8:	2301      	movs	r3, #1
 80010da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010dc:	2300      	movs	r3, #0
 80010de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010e4:	2300      	movs	r3, #0
 80010e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010e8:	2301      	movs	r3, #1
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	4619      	mov	r1, r3
 80010fa:	480e      	ldr	r0, [pc, #56]	; (8001134 <MX_TIM1_Init+0xac>)
 80010fc:	f003 f8c0 	bl	8004280 <HAL_TIM_Encoder_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001106:	f000 f9eb 	bl	80014e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110a:	2300      	movs	r3, #0
 800110c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001116:	463b      	mov	r3, r7
 8001118:	4619      	mov	r1, r3
 800111a:	4806      	ldr	r0, [pc, #24]	; (8001134 <MX_TIM1_Init+0xac>)
 800111c:	f003 ff80 	bl	8005020 <HAL_TIMEx_MasterConfigSynchronization>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001126:	f000 f9db 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	3730      	adds	r7, #48	; 0x30
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000614 	.word	0x20000614
 8001138:	40010000 	.word	0x40010000

0800113c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08e      	sub	sp, #56	; 0x38
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001142:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800115c:	463b      	mov	r3, r7
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]
 800116a:	615a      	str	r2, [r3, #20]
 800116c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800116e:	4b2c      	ldr	r3, [pc, #176]	; (8001220 <MX_TIM3_Init+0xe4>)
 8001170:	4a2c      	ldr	r2, [pc, #176]	; (8001224 <MX_TIM3_Init+0xe8>)
 8001172:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001174:	4b2a      	ldr	r3, [pc, #168]	; (8001220 <MX_TIM3_Init+0xe4>)
 8001176:	2200      	movs	r2, #0
 8001178:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117a:	4b29      	ldr	r3, [pc, #164]	; (8001220 <MX_TIM3_Init+0xe4>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001180:	4b27      	ldr	r3, [pc, #156]	; (8001220 <MX_TIM3_Init+0xe4>)
 8001182:	2263      	movs	r2, #99	; 0x63
 8001184:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001186:	4b26      	ldr	r3, [pc, #152]	; (8001220 <MX_TIM3_Init+0xe4>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118c:	4b24      	ldr	r3, [pc, #144]	; (8001220 <MX_TIM3_Init+0xe4>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001192:	4823      	ldr	r0, [pc, #140]	; (8001220 <MX_TIM3_Init+0xe4>)
 8001194:	f002 fec2 	bl	8003f1c <HAL_TIM_Base_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800119e:	f000 f99f 	bl	80014e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ac:	4619      	mov	r1, r3
 80011ae:	481c      	ldr	r0, [pc, #112]	; (8001220 <MX_TIM3_Init+0xe4>)
 80011b0:	f003 faae 	bl	8004710 <HAL_TIM_ConfigClockSource>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80011ba:	f000 f991 	bl	80014e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011be:	4818      	ldr	r0, [pc, #96]	; (8001220 <MX_TIM3_Init+0xe4>)
 80011c0:	f002 ff0d 	bl	8003fde <HAL_TIM_PWM_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80011ca:	f000 f989 	bl	80014e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	4619      	mov	r1, r3
 80011dc:	4810      	ldr	r0, [pc, #64]	; (8001220 <MX_TIM3_Init+0xe4>)
 80011de:	f003 ff1f 	bl	8005020 <HAL_TIMEx_MasterConfigSynchronization>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80011e8:	f000 f97a 	bl	80014e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ec:	2360      	movs	r3, #96	; 0x60
 80011ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011fc:	463b      	mov	r3, r7
 80011fe:	2200      	movs	r2, #0
 8001200:	4619      	mov	r1, r3
 8001202:	4807      	ldr	r0, [pc, #28]	; (8001220 <MX_TIM3_Init+0xe4>)
 8001204:	f003 f970 	bl	80044e8 <HAL_TIM_PWM_ConfigChannel>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800120e:	f000 f967 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001212:	4803      	ldr	r0, [pc, #12]	; (8001220 <MX_TIM3_Init+0xe4>)
 8001214:	f000 fa6a 	bl	80016ec <HAL_TIM_MspPostInit>

}
 8001218:	bf00      	nop
 800121a:	3738      	adds	r7, #56	; 0x38
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200005c4 	.word	0x200005c4
 8001224:	40000400 	.word	0x40000400

08001228 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <MX_USART3_UART_Init+0x58>)
 800122e:	4a15      	ldr	r2, [pc, #84]	; (8001284 <MX_USART3_UART_Init+0x5c>)
 8001230:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <MX_USART3_UART_Init+0x58>)
 8001234:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001238:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <MX_USART3_UART_Init+0x58>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <MX_USART3_UART_Init+0x58>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <MX_USART3_UART_Init+0x58>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_USART3_UART_Init+0x58>)
 800124e:	220c      	movs	r2, #12
 8001250:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <MX_USART3_UART_Init+0x58>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_USART3_UART_Init+0x58>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <MX_USART3_UART_Init+0x58>)
 8001260:	2200      	movs	r2, #0
 8001262:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_USART3_UART_Init+0x58>)
 8001266:	2200      	movs	r2, #0
 8001268:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <MX_USART3_UART_Init+0x58>)
 800126c:	f003 ff66 	bl	800513c <HAL_UART_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001276:	f000 f933 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200000f0 	.word	0x200000f0
 8001284:	40004800 	.word	0x40004800

08001288 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800128e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001292:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001296:	2206      	movs	r2, #6
 8001298:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800129c:	2202      	movs	r2, #2
 800129e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012a8:	2202      	movs	r2, #2
 80012aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012cc:	f001 fc37 	bl	8002b3e <HAL_PCD_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80012d6:	f000 f903 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200001c0 	.word	0x200001c0

080012e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08e      	sub	sp, #56	; 0x38
 80012e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fa:	4b74      	ldr	r3, [pc, #464]	; (80014cc <MX_GPIO_Init+0x1e8>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a73      	ldr	r2, [pc, #460]	; (80014cc <MX_GPIO_Init+0x1e8>)
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b71      	ldr	r3, [pc, #452]	; (80014cc <MX_GPIO_Init+0x1e8>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	623b      	str	r3, [r7, #32]
 8001310:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001312:	4b6e      	ldr	r3, [pc, #440]	; (80014cc <MX_GPIO_Init+0x1e8>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a6d      	ldr	r2, [pc, #436]	; (80014cc <MX_GPIO_Init+0x1e8>)
 8001318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b6b      	ldr	r3, [pc, #428]	; (80014cc <MX_GPIO_Init+0x1e8>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001326:	61fb      	str	r3, [r7, #28]
 8001328:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	4b68      	ldr	r3, [pc, #416]	; (80014cc <MX_GPIO_Init+0x1e8>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a67      	ldr	r2, [pc, #412]	; (80014cc <MX_GPIO_Init+0x1e8>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b65      	ldr	r3, [pc, #404]	; (80014cc <MX_GPIO_Init+0x1e8>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
 8001340:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	4b62      	ldr	r3, [pc, #392]	; (80014cc <MX_GPIO_Init+0x1e8>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a61      	ldr	r2, [pc, #388]	; (80014cc <MX_GPIO_Init+0x1e8>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b5f      	ldr	r3, [pc, #380]	; (80014cc <MX_GPIO_Init+0x1e8>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800135a:	4b5c      	ldr	r3, [pc, #368]	; (80014cc <MX_GPIO_Init+0x1e8>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a5b      	ldr	r2, [pc, #364]	; (80014cc <MX_GPIO_Init+0x1e8>)
 8001360:	f043 0320 	orr.w	r3, r3, #32
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b59      	ldr	r3, [pc, #356]	; (80014cc <MX_GPIO_Init+0x1e8>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0320 	and.w	r3, r3, #32
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001372:	4b56      	ldr	r3, [pc, #344]	; (80014cc <MX_GPIO_Init+0x1e8>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a55      	ldr	r2, [pc, #340]	; (80014cc <MX_GPIO_Init+0x1e8>)
 8001378:	f043 0310 	orr.w	r3, r3, #16
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b53      	ldr	r3, [pc, #332]	; (80014cc <MX_GPIO_Init+0x1e8>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0310 	and.w	r3, r3, #16
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800138a:	4b50      	ldr	r3, [pc, #320]	; (80014cc <MX_GPIO_Init+0x1e8>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a4f      	ldr	r2, [pc, #316]	; (80014cc <MX_GPIO_Init+0x1e8>)
 8001390:	f043 0308 	orr.w	r3, r3, #8
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b4d      	ldr	r3, [pc, #308]	; (80014cc <MX_GPIO_Init+0x1e8>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013a2:	4b4a      	ldr	r3, [pc, #296]	; (80014cc <MX_GPIO_Init+0x1e8>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a49      	ldr	r2, [pc, #292]	; (80014cc <MX_GPIO_Init+0x1e8>)
 80013a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b47      	ldr	r3, [pc, #284]	; (80014cc <MX_GPIO_Init+0x1e8>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	f244 0181 	movw	r1, #16513	; 0x4081
 80013c0:	4843      	ldr	r0, [pc, #268]	; (80014d0 <MX_GPIO_Init+0x1ec>)
 80013c2:	f000 fe19 	bl	8001ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2140      	movs	r1, #64	; 0x40
 80013ca:	4842      	ldr	r0, [pc, #264]	; (80014d4 <MX_GPIO_Init+0x1f0>)
 80013cc:	f000 fe14 	bl	8001ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80013d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80013e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e4:	4619      	mov	r1, r3
 80013e6:	483c      	ldr	r0, [pc, #240]	; (80014d8 <MX_GPIO_Init+0x1f4>)
 80013e8:	f000 fc5a 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80013ec:	2332      	movs	r3, #50	; 0x32
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f8:	2303      	movs	r3, #3
 80013fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013fc:	230b      	movs	r3, #11
 80013fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001404:	4619      	mov	r1, r3
 8001406:	4834      	ldr	r0, [pc, #208]	; (80014d8 <MX_GPIO_Init+0x1f4>)
 8001408:	f000 fc4a 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800140c:	2386      	movs	r3, #134	; 0x86
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001418:	2303      	movs	r3, #3
 800141a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800141c:	230b      	movs	r3, #11
 800141e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001424:	4619      	mov	r1, r3
 8001426:	482d      	ldr	r0, [pc, #180]	; (80014dc <MX_GPIO_Init+0x1f8>)
 8001428:	f000 fc3a 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800142c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001432:	2301      	movs	r3, #1
 8001434:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001442:	4619      	mov	r1, r3
 8001444:	4822      	ldr	r0, [pc, #136]	; (80014d0 <MX_GPIO_Init+0x1ec>)
 8001446:	f000 fc2b 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800144a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001458:	2303      	movs	r3, #3
 800145a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800145c:	230b      	movs	r3, #11
 800145e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001464:	4619      	mov	r1, r3
 8001466:	481a      	ldr	r0, [pc, #104]	; (80014d0 <MX_GPIO_Init+0x1ec>)
 8001468:	f000 fc1a 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800146c:	2340      	movs	r3, #64	; 0x40
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001470:	2301      	movs	r3, #1
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800147c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001480:	4619      	mov	r1, r3
 8001482:	4814      	ldr	r0, [pc, #80]	; (80014d4 <MX_GPIO_Init+0x1f0>)
 8001484:	f000 fc0c 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148c:	2300      	movs	r3, #0
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001498:	4619      	mov	r1, r3
 800149a:	480e      	ldr	r0, [pc, #56]	; (80014d4 <MX_GPIO_Init+0x1f0>)
 800149c:	f000 fc00 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80014a0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ae:	2303      	movs	r3, #3
 80014b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014b2:	230b      	movs	r3, #11
 80014b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_GPIO_Init+0x1f0>)
 80014be:	f000 fbef 	bl	8001ca0 <HAL_GPIO_Init>

}
 80014c2:	bf00      	nop
 80014c4:	3738      	adds	r7, #56	; 0x38
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020400 	.word	0x40020400
 80014d4:	40021800 	.word	0x40021800
 80014d8:	40020800 	.word	0x40020800
 80014dc:	40020000 	.word	0x40020000

080014e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e4:	b672      	cpsid	i
}
 80014e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <Error_Handler+0x8>
	...

080014ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <HAL_MspInit+0x44>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <HAL_MspInit+0x44>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fc:	6413      	str	r3, [r2, #64]	; 0x40
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <HAL_MspInit+0x44>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_MspInit+0x44>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	4a08      	ldr	r2, [pc, #32]	; (8001530 <HAL_MspInit+0x44>)
 8001510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001514:	6453      	str	r3, [r2, #68]	; 0x44
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_MspInit+0x44>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800

08001534 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08c      	sub	sp, #48	; 0x30
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 031c 	add.w	r3, r7, #28
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a2f      	ldr	r2, [pc, #188]	; (8001610 <HAL_I2C_MspInit+0xdc>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d129      	bne.n	80015aa <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	4b2f      	ldr	r3, [pc, #188]	; (8001614 <HAL_I2C_MspInit+0xe0>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a2e      	ldr	r2, [pc, #184]	; (8001614 <HAL_I2C_MspInit+0xe0>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b2c      	ldr	r3, [pc, #176]	; (8001614 <HAL_I2C_MspInit+0xe0>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	61bb      	str	r3, [r7, #24]
 800156c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800156e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001574:	2312      	movs	r3, #18
 8001576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157c:	2303      	movs	r3, #3
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001580:	2304      	movs	r3, #4
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4619      	mov	r1, r3
 800158a:	4823      	ldr	r0, [pc, #140]	; (8001618 <HAL_I2C_MspInit+0xe4>)
 800158c:	f000 fb88 	bl	8001ca0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001590:	4b20      	ldr	r3, [pc, #128]	; (8001614 <HAL_I2C_MspInit+0xe0>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	4a1f      	ldr	r2, [pc, #124]	; (8001614 <HAL_I2C_MspInit+0xe0>)
 8001596:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800159a:	6413      	str	r3, [r2, #64]	; 0x40
 800159c:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <HAL_I2C_MspInit+0xe0>)
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80015a8:	e02d      	b.n	8001606 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C4)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a1b      	ldr	r2, [pc, #108]	; (800161c <HAL_I2C_MspInit+0xe8>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d128      	bne.n	8001606 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80015b4:	4b17      	ldr	r3, [pc, #92]	; (8001614 <HAL_I2C_MspInit+0xe0>)
 80015b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b8:	4a16      	ldr	r2, [pc, #88]	; (8001614 <HAL_I2C_MspInit+0xe0>)
 80015ba:	f043 0320 	orr.w	r3, r3, #32
 80015be:	6313      	str	r3, [r2, #48]	; 0x30
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <HAL_I2C_MspInit+0xe0>)
 80015c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c4:	f003 0320 	and.w	r3, r3, #32
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80015cc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80015d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015d2:	2312      	movs	r3, #18
 80015d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80015de:	2304      	movs	r3, #4
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015e2:	f107 031c 	add.w	r3, r7, #28
 80015e6:	4619      	mov	r1, r3
 80015e8:	480d      	ldr	r0, [pc, #52]	; (8001620 <HAL_I2C_MspInit+0xec>)
 80015ea:	f000 fb59 	bl	8001ca0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <HAL_I2C_MspInit+0xe0>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	4a08      	ldr	r2, [pc, #32]	; (8001614 <HAL_I2C_MspInit+0xe0>)
 80015f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015f8:	6413      	str	r3, [r2, #64]	; 0x40
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_I2C_MspInit+0xe0>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
}
 8001606:	bf00      	nop
 8001608:	3730      	adds	r7, #48	; 0x30
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40005400 	.word	0x40005400
 8001614:	40023800 	.word	0x40023800
 8001618:	40020400 	.word	0x40020400
 800161c:	40006000 	.word	0x40006000
 8001620:	40021400 	.word	0x40021400

08001624 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d128      	bne.n	8001698 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001646:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	4a16      	ldr	r2, [pc, #88]	; (80016a4 <HAL_TIM_Encoder_MspInit+0x80>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6453      	str	r3, [r2, #68]	; 0x44
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a10      	ldr	r2, [pc, #64]	; (80016a4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001664:	f043 0310 	orr.w	r3, r3, #16
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <HAL_TIM_Encoder_MspInit+0x80>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0310 	and.w	r3, r3, #16
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001676:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800167a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	2300      	movs	r3, #0
 8001686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001688:	2301      	movs	r3, #1
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	4805      	ldr	r0, [pc, #20]	; (80016a8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001694:	f000 fb04 	bl	8001ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001698:	bf00      	nop
 800169a:	3728      	adds	r7, #40	; 0x28
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40010000 	.word	0x40010000
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40021000 	.word	0x40021000

080016ac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <HAL_TIM_PWM_MspInit+0x38>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d10b      	bne.n	80016d6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016be:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <HAL_TIM_PWM_MspInit+0x3c>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	4a09      	ldr	r2, [pc, #36]	; (80016e8 <HAL_TIM_PWM_MspInit+0x3c>)
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ca:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <HAL_TIM_PWM_MspInit+0x3c>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016d6:	bf00      	nop
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40000400 	.word	0x40000400
 80016e8:	40023800 	.word	0x40023800

080016ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a11      	ldr	r2, [pc, #68]	; (8001750 <HAL_TIM_MspPostInit+0x64>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d11b      	bne.n	8001746 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <HAL_TIM_MspPostInit+0x68>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a10      	ldr	r2, [pc, #64]	; (8001754 <HAL_TIM_MspPostInit+0x68>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <HAL_TIM_MspPostInit+0x68>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001726:	2340      	movs	r3, #64	; 0x40
 8001728:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001736:	2302      	movs	r3, #2
 8001738:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	4619      	mov	r1, r3
 8001740:	4805      	ldr	r0, [pc, #20]	; (8001758 <HAL_TIM_MspPostInit+0x6c>)
 8001742:	f000 faad 	bl	8001ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001746:	bf00      	nop
 8001748:	3720      	adds	r7, #32
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40000400 	.word	0x40000400
 8001754:	40023800 	.word	0x40023800
 8001758:	40020000 	.word	0x40020000

0800175c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a17      	ldr	r2, [pc, #92]	; (80017d8 <HAL_UART_MspInit+0x7c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d128      	bne.n	80017d0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800177e:	4b17      	ldr	r3, [pc, #92]	; (80017dc <HAL_UART_MspInit+0x80>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	4a16      	ldr	r2, [pc, #88]	; (80017dc <HAL_UART_MspInit+0x80>)
 8001784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001788:	6413      	str	r3, [r2, #64]	; 0x40
 800178a:	4b14      	ldr	r3, [pc, #80]	; (80017dc <HAL_UART_MspInit+0x80>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <HAL_UART_MspInit+0x80>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a10      	ldr	r2, [pc, #64]	; (80017dc <HAL_UART_MspInit+0x80>)
 800179c:	f043 0308 	orr.w	r3, r3, #8
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_UART_MspInit+0x80>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80017ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017bc:	2303      	movs	r3, #3
 80017be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017c0:	2307      	movs	r3, #7
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4619      	mov	r1, r3
 80017ca:	4805      	ldr	r0, [pc, #20]	; (80017e0 <HAL_UART_MspInit+0x84>)
 80017cc:	f000 fa68 	bl	8001ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017d0:	bf00      	nop
 80017d2:	3728      	adds	r7, #40	; 0x28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40004800 	.word	0x40004800
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020c00 	.word	0x40020c00

080017e4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	; 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001804:	d141      	bne.n	800188a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	4b23      	ldr	r3, [pc, #140]	; (8001894 <HAL_PCD_MspInit+0xb0>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a22      	ldr	r2, [pc, #136]	; (8001894 <HAL_PCD_MspInit+0xb0>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b20      	ldr	r3, [pc, #128]	; (8001894 <HAL_PCD_MspInit+0xb0>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800181e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182c:	2303      	movs	r3, #3
 800182e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001830:	230a      	movs	r3, #10
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	4619      	mov	r1, r3
 800183a:	4817      	ldr	r0, [pc, #92]	; (8001898 <HAL_PCD_MspInit+0xb4>)
 800183c:	f000 fa30 	bl	8001ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001840:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001846:	2300      	movs	r3, #0
 8001848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	4619      	mov	r1, r3
 8001854:	4810      	ldr	r0, [pc, #64]	; (8001898 <HAL_PCD_MspInit+0xb4>)
 8001856:	f000 fa23 	bl	8001ca0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800185a:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <HAL_PCD_MspInit+0xb0>)
 800185c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800185e:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <HAL_PCD_MspInit+0xb0>)
 8001860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001864:	6353      	str	r3, [r2, #52]	; 0x34
 8001866:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <HAL_PCD_MspInit+0xb0>)
 8001868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800186a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4b08      	ldr	r3, [pc, #32]	; (8001894 <HAL_PCD_MspInit+0xb0>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	4a07      	ldr	r2, [pc, #28]	; (8001894 <HAL_PCD_MspInit+0xb0>)
 8001878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800187c:	6453      	str	r3, [r2, #68]	; 0x44
 800187e:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_PCD_MspInit+0xb0>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800188a:	bf00      	nop
 800188c:	3728      	adds	r7, #40	; 0x28
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800
 8001898:	40020000 	.word	0x40020000

0800189c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <NMI_Handler+0x4>

080018a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a6:	e7fe      	b.n	80018a6 <HardFault_Handler+0x4>

080018a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <MemManage_Handler+0x4>

080018ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b2:	e7fe      	b.n	80018b2 <BusFault_Handler+0x4>

080018b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <UsageFault_Handler+0x4>

080018ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e8:	f000 f8b0 	bl	8001a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f8:	4a14      	ldr	r2, [pc, #80]	; (800194c <_sbrk+0x5c>)
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <_sbrk+0x60>)
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001904:	4b13      	ldr	r3, [pc, #76]	; (8001954 <_sbrk+0x64>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d102      	bne.n	8001912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <_sbrk+0x64>)
 800190e:	4a12      	ldr	r2, [pc, #72]	; (8001958 <_sbrk+0x68>)
 8001910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001912:	4b10      	ldr	r3, [pc, #64]	; (8001954 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	429a      	cmp	r2, r3
 800191e:	d207      	bcs.n	8001930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001920:	f004 fb44 	bl	8005fac <__errno>
 8001924:	4603      	mov	r3, r0
 8001926:	220c      	movs	r2, #12
 8001928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800192a:	f04f 33ff 	mov.w	r3, #4294967295
 800192e:	e009      	b.n	8001944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001936:	4b07      	ldr	r3, [pc, #28]	; (8001954 <_sbrk+0x64>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	4a05      	ldr	r2, [pc, #20]	; (8001954 <_sbrk+0x64>)
 8001940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001942:	68fb      	ldr	r3, [r7, #12]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20050000 	.word	0x20050000
 8001950:	00000400 	.word	0x00000400
 8001954:	2000008c 	.word	0x2000008c
 8001958:	20000678 	.word	0x20000678

0800195c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <SystemInit+0x20>)
 8001962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001966:	4a05      	ldr	r2, [pc, #20]	; (800197c <SystemInit+0x20>)
 8001968:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800196c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001984:	480d      	ldr	r0, [pc, #52]	; (80019bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001986:	490e      	ldr	r1, [pc, #56]	; (80019c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001988:	4a0e      	ldr	r2, [pc, #56]	; (80019c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800198c:	e002      	b.n	8001994 <LoopCopyDataInit>

0800198e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001992:	3304      	adds	r3, #4

08001994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001998:	d3f9      	bcc.n	800198e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199a:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800199c:	4c0b      	ldr	r4, [pc, #44]	; (80019cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a0:	e001      	b.n	80019a6 <LoopFillZerobss>

080019a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a4:	3204      	adds	r2, #4

080019a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a8:	d3fb      	bcc.n	80019a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019aa:	f7ff ffd7 	bl	800195c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ae:	f004 fb03 	bl	8005fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019b2:	f7ff f9b1 	bl	8000d18 <main>
  bx  lr    
 80019b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019b8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80019bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80019c4:	0800692c 	.word	0x0800692c
  ldr r2, =_sbss
 80019c8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80019cc:	20000674 	.word	0x20000674

080019d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <ADC_IRQHandler>

080019d2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d6:	2003      	movs	r0, #3
 80019d8:	f000 f92e 	bl	8001c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019dc:	2000      	movs	r0, #0
 80019de:	f000 f805 	bl	80019ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019e2:	f7ff fd83 	bl	80014ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	bd80      	pop	{r7, pc}

080019ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_InitTick+0x54>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_InitTick+0x58>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 f93b 	bl	8001c86 <HAL_SYSTICK_Config>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00e      	b.n	8001a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b0f      	cmp	r3, #15
 8001a1e:	d80a      	bhi.n	8001a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a20:	2200      	movs	r2, #0
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f000 f911 	bl	8001c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a2c:	4a06      	ldr	r2, [pc, #24]	; (8001a48 <HAL_InitTick+0x5c>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	e000      	b.n	8001a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000000 	.word	0x20000000
 8001a44:	20000008 	.word	0x20000008
 8001a48:	20000004 	.word	0x20000004

08001a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_IncTick+0x20>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_IncTick+0x24>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <HAL_IncTick+0x24>)
 8001a5e:	6013      	str	r3, [r2, #0]
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	20000008 	.word	0x20000008
 8001a70:	20000660 	.word	0x20000660

08001a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return uwTick;
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <HAL_GetTick+0x14>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	20000660 	.word	0x20000660

08001a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a94:	f7ff ffee 	bl	8001a74 <HAL_GetTick>
 8001a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa4:	d005      	beq.n	8001ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <HAL_Delay+0x44>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ab2:	bf00      	nop
 8001ab4:	f7ff ffde 	bl	8001a74 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d8f7      	bhi.n	8001ab4 <HAL_Delay+0x28>
  {
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000008 	.word	0x20000008

08001ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <__NVIC_SetPriorityGrouping+0x40>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af0:	4013      	ands	r3, r2
 8001af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b02:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <__NVIC_SetPriorityGrouping+0x40>)
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	60d3      	str	r3, [r2, #12]
}
 8001b08:	bf00      	nop
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000ed00 	.word	0xe000ed00
 8001b18:	05fa0000 	.word	0x05fa0000

08001b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b20:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <__NVIC_GetPriorityGrouping+0x18>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	f003 0307 	and.w	r3, r3, #7
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	6039      	str	r1, [r7, #0]
 8001b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	db0a      	blt.n	8001b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	490c      	ldr	r1, [pc, #48]	; (8001b84 <__NVIC_SetPriority+0x4c>)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	0112      	lsls	r2, r2, #4
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b60:	e00a      	b.n	8001b78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4908      	ldr	r1, [pc, #32]	; (8001b88 <__NVIC_SetPriority+0x50>)
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	3b04      	subs	r3, #4
 8001b70:	0112      	lsls	r2, r2, #4
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	440b      	add	r3, r1
 8001b76:	761a      	strb	r2, [r3, #24]
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000e100 	.word	0xe000e100
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b089      	sub	sp, #36	; 0x24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f1c3 0307 	rsb	r3, r3, #7
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	bf28      	it	cs
 8001baa:	2304      	movcs	r3, #4
 8001bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	2b06      	cmp	r3, #6
 8001bb4:	d902      	bls.n	8001bbc <NVIC_EncodePriority+0x30>
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3b03      	subs	r3, #3
 8001bba:	e000      	b.n	8001bbe <NVIC_EncodePriority+0x32>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43da      	mvns	r2, r3
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	401a      	ands	r2, r3
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	fa01 f303 	lsl.w	r3, r1, r3
 8001bde:	43d9      	mvns	r1, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	4313      	orrs	r3, r2
         );
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3724      	adds	r7, #36	; 0x24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c04:	d301      	bcc.n	8001c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c06:	2301      	movs	r3, #1
 8001c08:	e00f      	b.n	8001c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <SysTick_Config+0x40>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c12:	210f      	movs	r1, #15
 8001c14:	f04f 30ff 	mov.w	r0, #4294967295
 8001c18:	f7ff ff8e 	bl	8001b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <SysTick_Config+0x40>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c22:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <SysTick_Config+0x40>)
 8001c24:	2207      	movs	r2, #7
 8001c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	e000e010 	.word	0xe000e010

08001c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff ff47 	bl	8001ad4 <__NVIC_SetPriorityGrouping>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	4603      	mov	r3, r0
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
 8001c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c60:	f7ff ff5c 	bl	8001b1c <__NVIC_GetPriorityGrouping>
 8001c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	6978      	ldr	r0, [r7, #20]
 8001c6c:	f7ff ff8e 	bl	8001b8c <NVIC_EncodePriority>
 8001c70:	4602      	mov	r2, r0
 8001c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c76:	4611      	mov	r1, r2
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff5d 	bl	8001b38 <__NVIC_SetPriority>
}
 8001c7e:	bf00      	nop
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff ffb0 	bl	8001bf4 <SysTick_Config>
 8001c94:	4603      	mov	r3, r0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	; 0x24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	e175      	b.n	8001fac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	f040 8164 	bne.w	8001fa6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d005      	beq.n	8001cf6 <HAL_GPIO_Init+0x56>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d130      	bne.n	8001d58 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	2203      	movs	r2, #3
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	091b      	lsrs	r3, r3, #4
 8001d42:	f003 0201 	and.w	r2, r3, #1
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	2b03      	cmp	r3, #3
 8001d62:	d017      	beq.n	8001d94 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	2203      	movs	r2, #3
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d123      	bne.n	8001de8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	08da      	lsrs	r2, r3, #3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3208      	adds	r2, #8
 8001da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	220f      	movs	r2, #15
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	08da      	lsrs	r2, r3, #3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3208      	adds	r2, #8
 8001de2:	69b9      	ldr	r1, [r7, #24]
 8001de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	2203      	movs	r2, #3
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0203 	and.w	r2, r3, #3
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 80be 	beq.w	8001fa6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2a:	4b66      	ldr	r3, [pc, #408]	; (8001fc4 <HAL_GPIO_Init+0x324>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	4a65      	ldr	r2, [pc, #404]	; (8001fc4 <HAL_GPIO_Init+0x324>)
 8001e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e34:	6453      	str	r3, [r2, #68]	; 0x44
 8001e36:	4b63      	ldr	r3, [pc, #396]	; (8001fc4 <HAL_GPIO_Init+0x324>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e42:	4a61      	ldr	r2, [pc, #388]	; (8001fc8 <HAL_GPIO_Init+0x328>)
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	089b      	lsrs	r3, r3, #2
 8001e48:	3302      	adds	r3, #2
 8001e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	220f      	movs	r2, #15
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a58      	ldr	r2, [pc, #352]	; (8001fcc <HAL_GPIO_Init+0x32c>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d037      	beq.n	8001ede <HAL_GPIO_Init+0x23e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a57      	ldr	r2, [pc, #348]	; (8001fd0 <HAL_GPIO_Init+0x330>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d031      	beq.n	8001eda <HAL_GPIO_Init+0x23a>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a56      	ldr	r2, [pc, #344]	; (8001fd4 <HAL_GPIO_Init+0x334>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d02b      	beq.n	8001ed6 <HAL_GPIO_Init+0x236>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a55      	ldr	r2, [pc, #340]	; (8001fd8 <HAL_GPIO_Init+0x338>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d025      	beq.n	8001ed2 <HAL_GPIO_Init+0x232>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a54      	ldr	r2, [pc, #336]	; (8001fdc <HAL_GPIO_Init+0x33c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d01f      	beq.n	8001ece <HAL_GPIO_Init+0x22e>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a53      	ldr	r2, [pc, #332]	; (8001fe0 <HAL_GPIO_Init+0x340>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d019      	beq.n	8001eca <HAL_GPIO_Init+0x22a>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a52      	ldr	r2, [pc, #328]	; (8001fe4 <HAL_GPIO_Init+0x344>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <HAL_GPIO_Init+0x226>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a51      	ldr	r2, [pc, #324]	; (8001fe8 <HAL_GPIO_Init+0x348>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00d      	beq.n	8001ec2 <HAL_GPIO_Init+0x222>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a50      	ldr	r2, [pc, #320]	; (8001fec <HAL_GPIO_Init+0x34c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d007      	beq.n	8001ebe <HAL_GPIO_Init+0x21e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a4f      	ldr	r2, [pc, #316]	; (8001ff0 <HAL_GPIO_Init+0x350>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d101      	bne.n	8001eba <HAL_GPIO_Init+0x21a>
 8001eb6:	2309      	movs	r3, #9
 8001eb8:	e012      	b.n	8001ee0 <HAL_GPIO_Init+0x240>
 8001eba:	230a      	movs	r3, #10
 8001ebc:	e010      	b.n	8001ee0 <HAL_GPIO_Init+0x240>
 8001ebe:	2308      	movs	r3, #8
 8001ec0:	e00e      	b.n	8001ee0 <HAL_GPIO_Init+0x240>
 8001ec2:	2307      	movs	r3, #7
 8001ec4:	e00c      	b.n	8001ee0 <HAL_GPIO_Init+0x240>
 8001ec6:	2306      	movs	r3, #6
 8001ec8:	e00a      	b.n	8001ee0 <HAL_GPIO_Init+0x240>
 8001eca:	2305      	movs	r3, #5
 8001ecc:	e008      	b.n	8001ee0 <HAL_GPIO_Init+0x240>
 8001ece:	2304      	movs	r3, #4
 8001ed0:	e006      	b.n	8001ee0 <HAL_GPIO_Init+0x240>
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e004      	b.n	8001ee0 <HAL_GPIO_Init+0x240>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e002      	b.n	8001ee0 <HAL_GPIO_Init+0x240>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <HAL_GPIO_Init+0x240>
 8001ede:	2300      	movs	r3, #0
 8001ee0:	69fa      	ldr	r2, [r7, #28]
 8001ee2:	f002 0203 	and.w	r2, r2, #3
 8001ee6:	0092      	lsls	r2, r2, #2
 8001ee8:	4093      	lsls	r3, r2
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ef0:	4935      	ldr	r1, [pc, #212]	; (8001fc8 <HAL_GPIO_Init+0x328>)
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	089b      	lsrs	r3, r3, #2
 8001ef6:	3302      	adds	r3, #2
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001efe:	4b3d      	ldr	r3, [pc, #244]	; (8001ff4 <HAL_GPIO_Init+0x354>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f22:	4a34      	ldr	r2, [pc, #208]	; (8001ff4 <HAL_GPIO_Init+0x354>)
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f28:	4b32      	ldr	r3, [pc, #200]	; (8001ff4 <HAL_GPIO_Init+0x354>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f4c:	4a29      	ldr	r2, [pc, #164]	; (8001ff4 <HAL_GPIO_Init+0x354>)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f52:	4b28      	ldr	r3, [pc, #160]	; (8001ff4 <HAL_GPIO_Init+0x354>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f76:	4a1f      	ldr	r2, [pc, #124]	; (8001ff4 <HAL_GPIO_Init+0x354>)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <HAL_GPIO_Init+0x354>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fa0:	4a14      	ldr	r2, [pc, #80]	; (8001ff4 <HAL_GPIO_Init+0x354>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	61fb      	str	r3, [r7, #28]
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	2b0f      	cmp	r3, #15
 8001fb0:	f67f ae86 	bls.w	8001cc0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	3724      	adds	r7, #36	; 0x24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40013800 	.word	0x40013800
 8001fcc:	40020000 	.word	0x40020000
 8001fd0:	40020400 	.word	0x40020400
 8001fd4:	40020800 	.word	0x40020800
 8001fd8:	40020c00 	.word	0x40020c00
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40021400 	.word	0x40021400
 8001fe4:	40021800 	.word	0x40021800
 8001fe8:	40021c00 	.word	0x40021c00
 8001fec:	40022000 	.word	0x40022000
 8001ff0:	40022400 	.word	0x40022400
 8001ff4:	40013c00 	.word	0x40013c00

08001ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	807b      	strh	r3, [r7, #2]
 8002004:	4613      	mov	r3, r2
 8002006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002008:	787b      	ldrb	r3, [r7, #1]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800200e:	887a      	ldrh	r2, [r7, #2]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002014:	e003      	b.n	800201e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002016:	887b      	ldrh	r3, [r7, #2]
 8002018:	041a      	lsls	r2, r3, #16
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	619a      	str	r2, [r3, #24]
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e07f      	b.n	800213e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d106      	bne.n	8002058 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff fa6e 	bl	8001534 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2224      	movs	r2, #36	; 0x24
 800205c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 0201 	bic.w	r2, r2, #1
 800206e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800207c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800208c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d107      	bne.n	80020a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	e006      	b.n	80020b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80020b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d104      	bne.n	80020c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6859      	ldr	r1, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <HAL_I2C_Init+0x11c>)
 80020d2:	430b      	orrs	r3, r1
 80020d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68da      	ldr	r2, [r3, #12]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691a      	ldr	r2, [r3, #16]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69d9      	ldr	r1, [r3, #28]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1a      	ldr	r2, [r3, #32]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0201 	orr.w	r2, r2, #1
 800211e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2220      	movs	r2, #32
 800212a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	02008000 	.word	0x02008000

0800214c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af02      	add	r7, sp, #8
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	607a      	str	r2, [r7, #4]
 8002156:	461a      	mov	r2, r3
 8002158:	460b      	mov	r3, r1
 800215a:	817b      	strh	r3, [r7, #10]
 800215c:	4613      	mov	r3, r2
 800215e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b20      	cmp	r3, #32
 800216a:	f040 80da 	bne.w	8002322 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_I2C_Master_Transmit+0x30>
 8002178:	2302      	movs	r3, #2
 800217a:	e0d3      	b.n	8002324 <HAL_I2C_Master_Transmit+0x1d8>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002184:	f7ff fc76 	bl	8001a74 <HAL_GetTick>
 8002188:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	2319      	movs	r3, #25
 8002190:	2201      	movs	r2, #1
 8002192:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 f9e6 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e0be      	b.n	8002324 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2221      	movs	r2, #33	; 0x21
 80021aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2210      	movs	r2, #16
 80021b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	893a      	ldrh	r2, [r7, #8]
 80021c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	2bff      	cmp	r3, #255	; 0xff
 80021d6:	d90e      	bls.n	80021f6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	22ff      	movs	r2, #255	; 0xff
 80021dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	8979      	ldrh	r1, [r7, #10]
 80021e6:	4b51      	ldr	r3, [pc, #324]	; (800232c <HAL_I2C_Master_Transmit+0x1e0>)
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 fbdc 	bl	80029ac <I2C_TransferConfig>
 80021f4:	e06c      	b.n	80022d0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002204:	b2da      	uxtb	r2, r3
 8002206:	8979      	ldrh	r1, [r7, #10]
 8002208:	4b48      	ldr	r3, [pc, #288]	; (800232c <HAL_I2C_Master_Transmit+0x1e0>)
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 fbcb 	bl	80029ac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002216:	e05b      	b.n	80022d0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	6a39      	ldr	r1, [r7, #32]
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 f9e3 	bl	80025e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e07b      	b.n	8002324 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	781a      	ldrb	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002246:	b29b      	uxth	r3, r3
 8002248:	3b01      	subs	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002260:	b29b      	uxth	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d034      	beq.n	80022d0 <HAL_I2C_Master_Transmit+0x184>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226a:	2b00      	cmp	r3, #0
 800226c:	d130      	bne.n	80022d0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	2200      	movs	r2, #0
 8002276:	2180      	movs	r1, #128	; 0x80
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 f975 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e04d      	b.n	8002324 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228c:	b29b      	uxth	r3, r3
 800228e:	2bff      	cmp	r3, #255	; 0xff
 8002290:	d90e      	bls.n	80022b0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	22ff      	movs	r2, #255	; 0xff
 8002296:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229c:	b2da      	uxtb	r2, r3
 800229e:	8979      	ldrh	r1, [r7, #10]
 80022a0:	2300      	movs	r3, #0
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 fb7f 	bl	80029ac <I2C_TransferConfig>
 80022ae:	e00f      	b.n	80022d0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	8979      	ldrh	r1, [r7, #10]
 80022c2:	2300      	movs	r3, #0
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 fb6e 	bl	80029ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d19e      	bne.n	8002218 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	6a39      	ldr	r1, [r7, #32]
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 f9c2 	bl	8002668 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e01a      	b.n	8002324 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2220      	movs	r2, #32
 80022f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6859      	ldr	r1, [r3, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_I2C_Master_Transmit+0x1e4>)
 8002302:	400b      	ands	r3, r1
 8002304:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2220      	movs	r2, #32
 800230a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	e000      	b.n	8002324 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002322:	2302      	movs	r3, #2
  }
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	80002000 	.word	0x80002000
 8002330:	fe00e800 	.word	0xfe00e800

08002334 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af02      	add	r7, sp, #8
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	607a      	str	r2, [r7, #4]
 800233e:	461a      	mov	r2, r3
 8002340:	460b      	mov	r3, r1
 8002342:	817b      	strh	r3, [r7, #10]
 8002344:	4613      	mov	r3, r2
 8002346:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b20      	cmp	r3, #32
 8002352:	f040 80db 	bne.w	800250c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <HAL_I2C_Master_Receive+0x30>
 8002360:	2302      	movs	r3, #2
 8002362:	e0d4      	b.n	800250e <HAL_I2C_Master_Receive+0x1da>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800236c:	f7ff fb82 	bl	8001a74 <HAL_GetTick>
 8002370:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	2319      	movs	r3, #25
 8002378:	2201      	movs	r2, #1
 800237a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 f8f2 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e0bf      	b.n	800250e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2222      	movs	r2, #34	; 0x22
 8002392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2210      	movs	r2, #16
 800239a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	893a      	ldrh	r2, [r7, #8]
 80023ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	2bff      	cmp	r3, #255	; 0xff
 80023be:	d90e      	bls.n	80023de <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	22ff      	movs	r2, #255	; 0xff
 80023c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	8979      	ldrh	r1, [r7, #10]
 80023ce:	4b52      	ldr	r3, [pc, #328]	; (8002518 <HAL_I2C_Master_Receive+0x1e4>)
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 fae8 	bl	80029ac <I2C_TransferConfig>
 80023dc:	e06d      	b.n	80024ba <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	8979      	ldrh	r1, [r7, #10]
 80023f0:	4b49      	ldr	r3, [pc, #292]	; (8002518 <HAL_I2C_Master_Receive+0x1e4>)
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 fad7 	bl	80029ac <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80023fe:	e05c      	b.n	80024ba <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	6a39      	ldr	r1, [r7, #32]
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 f96b 	bl	80026e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e07c      	b.n	800250e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002430:	3b01      	subs	r3, #1
 8002432:	b29a      	uxth	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243c:	b29b      	uxth	r3, r3
 800243e:	3b01      	subs	r3, #1
 8002440:	b29a      	uxth	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244a:	b29b      	uxth	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d034      	beq.n	80024ba <HAL_I2C_Master_Receive+0x186>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002454:	2b00      	cmp	r3, #0
 8002456:	d130      	bne.n	80024ba <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	2200      	movs	r2, #0
 8002460:	2180      	movs	r1, #128	; 0x80
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 f880 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e04d      	b.n	800250e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002476:	b29b      	uxth	r3, r3
 8002478:	2bff      	cmp	r3, #255	; 0xff
 800247a:	d90e      	bls.n	800249a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	22ff      	movs	r2, #255	; 0xff
 8002480:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002486:	b2da      	uxtb	r2, r3
 8002488:	8979      	ldrh	r1, [r7, #10]
 800248a:	2300      	movs	r3, #0
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 fa8a 	bl	80029ac <I2C_TransferConfig>
 8002498:	e00f      	b.n	80024ba <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	8979      	ldrh	r1, [r7, #10]
 80024ac:	2300      	movs	r3, #0
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 fa79 	bl	80029ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024be:	b29b      	uxth	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d19d      	bne.n	8002400 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	6a39      	ldr	r1, [r7, #32]
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 f8cd 	bl	8002668 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e01a      	b.n	800250e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2220      	movs	r2, #32
 80024de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6859      	ldr	r1, [r3, #4]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	4b0c      	ldr	r3, [pc, #48]	; (800251c <HAL_I2C_Master_Receive+0x1e8>)
 80024ec:	400b      	ands	r3, r1
 80024ee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	e000      	b.n	800250e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800250c:	2302      	movs	r3, #2
  }
}
 800250e:	4618      	mov	r0, r3
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	80002400 	.word	0x80002400
 800251c:	fe00e800 	.word	0xfe00e800

08002520 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b02      	cmp	r3, #2
 8002534:	d103      	bne.n	800253e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2200      	movs	r2, #0
 800253c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b01      	cmp	r3, #1
 800254a:	d007      	beq.n	800255c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699a      	ldr	r2, [r3, #24]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0201 	orr.w	r2, r2, #1
 800255a:	619a      	str	r2, [r3, #24]
  }
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	4613      	mov	r3, r2
 8002576:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002578:	e022      	b.n	80025c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002580:	d01e      	beq.n	80025c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002582:	f7ff fa77 	bl	8001a74 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d302      	bcc.n	8002598 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d113      	bne.n	80025c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259c:	f043 0220 	orr.w	r2, r3, #32
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2220      	movs	r2, #32
 80025a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e00f      	b.n	80025e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	699a      	ldr	r2, [r3, #24]
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	4013      	ands	r3, r2
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	bf0c      	ite	eq
 80025d0:	2301      	moveq	r3, #1
 80025d2:	2300      	movne	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	461a      	mov	r2, r3
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d0cd      	beq.n	800257a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025f4:	e02c      	b.n	8002650 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f8ea 	bl	80027d4 <I2C_IsErrorOccurred>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e02a      	b.n	8002660 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002610:	d01e      	beq.n	8002650 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002612:	f7ff fa2f 	bl	8001a74 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	429a      	cmp	r2, r3
 8002620:	d302      	bcc.n	8002628 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d113      	bne.n	8002650 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262c:	f043 0220 	orr.w	r2, r3, #32
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e007      	b.n	8002660 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b02      	cmp	r3, #2
 800265c:	d1cb      	bne.n	80025f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002674:	e028      	b.n	80026c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68b9      	ldr	r1, [r7, #8]
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 f8aa 	bl	80027d4 <I2C_IsErrorOccurred>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e026      	b.n	80026d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800268a:	f7ff f9f3 	bl	8001a74 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	429a      	cmp	r2, r3
 8002698:	d302      	bcc.n	80026a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d113      	bne.n	80026c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a4:	f043 0220 	orr.w	r2, r3, #32
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2220      	movs	r2, #32
 80026b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e007      	b.n	80026d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	f003 0320 	and.w	r3, r3, #32
 80026d2:	2b20      	cmp	r3, #32
 80026d4:	d1cf      	bne.n	8002676 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026ec:	e064      	b.n	80027b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 f86e 	bl	80027d4 <I2C_IsErrorOccurred>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e062      	b.n	80027c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	f003 0320 	and.w	r3, r3, #32
 800270c:	2b20      	cmp	r3, #32
 800270e:	d138      	bne.n	8002782 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	2b04      	cmp	r3, #4
 800271c:	d105      	bne.n	800272a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	e04e      	b.n	80027c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	f003 0310 	and.w	r3, r3, #16
 8002734:	2b10      	cmp	r3, #16
 8002736:	d107      	bne.n	8002748 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2210      	movs	r2, #16
 800273e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2204      	movs	r2, #4
 8002744:	645a      	str	r2, [r3, #68]	; 0x44
 8002746:	e002      	b.n	800274e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2220      	movs	r2, #32
 8002754:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6859      	ldr	r1, [r3, #4]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002762:	400b      	ands	r3, r1
 8002764:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2220      	movs	r2, #32
 800276a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e022      	b.n	80027c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002782:	f7ff f977 	bl	8001a74 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	429a      	cmp	r2, r3
 8002790:	d302      	bcc.n	8002798 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10f      	bne.n	80027b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279c:	f043 0220 	orr.w	r2, r3, #32
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e007      	b.n	80027c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d193      	bne.n	80026ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	fe00e800 	.word	0xfe00e800

080027d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08a      	sub	sp, #40	; 0x28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80027ee:	2300      	movs	r3, #0
 80027f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d075      	beq.n	80028ec <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2210      	movs	r2, #16
 8002806:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002808:	e056      	b.n	80028b8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002810:	d052      	beq.n	80028b8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002812:	f7ff f92f 	bl	8001a74 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	429a      	cmp	r2, r3
 8002820:	d302      	bcc.n	8002828 <I2C_IsErrorOccurred+0x54>
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d147      	bne.n	80028b8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002832:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800283a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800284a:	d12e      	bne.n	80028aa <I2C_IsErrorOccurred+0xd6>
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002852:	d02a      	beq.n	80028aa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002854:	7cfb      	ldrb	r3, [r7, #19]
 8002856:	2b20      	cmp	r3, #32
 8002858:	d027      	beq.n	80028aa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002868:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800286a:	f7ff f903 	bl	8001a74 <HAL_GetTick>
 800286e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002870:	e01b      	b.n	80028aa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002872:	f7ff f8ff 	bl	8001a74 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b19      	cmp	r3, #25
 800287e:	d914      	bls.n	80028aa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002884:	f043 0220 	orr.w	r2, r3, #32
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2220      	movs	r2, #32
 8002890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	f003 0320 	and.w	r3, r3, #32
 80028b4:	2b20      	cmp	r3, #32
 80028b6:	d1dc      	bne.n	8002872 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	f003 0320 	and.w	r3, r3, #32
 80028c2:	2b20      	cmp	r3, #32
 80028c4:	d003      	beq.n	80028ce <I2C_IsErrorOccurred+0xfa>
 80028c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d09d      	beq.n	800280a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80028ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d103      	bne.n	80028de <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2220      	movs	r2, #32
 80028dc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	f043 0304 	orr.w	r3, r3, #4
 80028e4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00b      	beq.n	8002916 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800290e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00b      	beq.n	8002938 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	f043 0308 	orr.w	r3, r3, #8
 8002926:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002930:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00b      	beq.n	800295a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	f043 0302 	orr.w	r3, r3, #2
 8002948:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002952:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800295a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800295e:	2b00      	cmp	r3, #0
 8002960:	d01c      	beq.n	800299c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f7ff fddc 	bl	8002520 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6859      	ldr	r1, [r3, #4]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <I2C_IsErrorOccurred+0x1d4>)
 8002974:	400b      	ands	r3, r1
 8002976:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	431a      	orrs	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2220      	movs	r2, #32
 8002988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800299c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3728      	adds	r7, #40	; 0x28
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	fe00e800 	.word	0xfe00e800

080029ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	607b      	str	r3, [r7, #4]
 80029b6:	460b      	mov	r3, r1
 80029b8:	817b      	strh	r3, [r7, #10]
 80029ba:	4613      	mov	r3, r2
 80029bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029be:	897b      	ldrh	r3, [r7, #10]
 80029c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029c4:	7a7b      	ldrb	r3, [r7, #9]
 80029c6:	041b      	lsls	r3, r3, #16
 80029c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029cc:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029da:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	0d5b      	lsrs	r3, r3, #21
 80029e6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80029ea:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <I2C_TransferConfig+0x60>)
 80029ec:	430b      	orrs	r3, r1
 80029ee:	43db      	mvns	r3, r3
 80029f0:	ea02 0103 	and.w	r1, r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80029fe:	bf00      	nop
 8002a00:	371c      	adds	r7, #28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	03ff63ff 	.word	0x03ff63ff

08002a10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b20      	cmp	r3, #32
 8002a24:	d138      	bne.n	8002a98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e032      	b.n	8002a9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2224      	movs	r2, #36	; 0x24
 8002a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0201 	bic.w	r2, r2, #1
 8002a52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6819      	ldr	r1, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	e000      	b.n	8002a9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a98:	2302      	movs	r3, #2
  }
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b085      	sub	sp, #20
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b20      	cmp	r3, #32
 8002aba:	d139      	bne.n	8002b30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d101      	bne.n	8002aca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e033      	b.n	8002b32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2224      	movs	r2, #36	; 0x24
 8002ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0201 	bic.w	r2, r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002af8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	021b      	lsls	r3, r3, #8
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0201 	orr.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	e000      	b.n	8002b32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b30:	2302      	movs	r3, #2
  }
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b40:	b08f      	sub	sp, #60	; 0x3c
 8002b42:	af0a      	add	r7, sp, #40	; 0x28
 8002b44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e116      	b.n	8002d7e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d106      	bne.n	8002b70 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7fe fe3a 	bl	80017e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2203      	movs	r2, #3
 8002b74:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d102      	bne.n	8002b8a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f002 ff76 	bl	8005a80 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	603b      	str	r3, [r7, #0]
 8002b9a:	687e      	ldr	r6, [r7, #4]
 8002b9c:	466d      	mov	r5, sp
 8002b9e:	f106 0410 	add.w	r4, r6, #16
 8002ba2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ba4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ba6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ba8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002baa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bae:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bb2:	1d33      	adds	r3, r6, #4
 8002bb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bb6:	6838      	ldr	r0, [r7, #0]
 8002bb8:	f002 ff0a 	bl	80059d0 <USB_CoreInit>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d005      	beq.n	8002bce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e0d7      	b.n	8002d7e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f002 ff64 	bl	8005aa2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bda:	2300      	movs	r3, #0
 8002bdc:	73fb      	strb	r3, [r7, #15]
 8002bde:	e04a      	b.n	8002c76 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	1a9b      	subs	r3, r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	333d      	adds	r3, #61	; 0x3d
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	333c      	adds	r3, #60	; 0x3c
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c08:	7bfa      	ldrb	r2, [r7, #15]
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
 8002c0c:	b298      	uxth	r0, r3
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	3342      	adds	r3, #66	; 0x42
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c20:	7bfa      	ldrb	r2, [r7, #15]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	333f      	adds	r3, #63	; 0x3f
 8002c30:	2200      	movs	r2, #0
 8002c32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c34:	7bfa      	ldrb	r2, [r7, #15]
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	3344      	adds	r3, #68	; 0x44
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c48:	7bfa      	ldrb	r2, [r7, #15]
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	1a9b      	subs	r3, r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	3348      	adds	r3, #72	; 0x48
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c5c:	7bfa      	ldrb	r2, [r7, #15]
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	1a9b      	subs	r3, r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	3350      	adds	r3, #80	; 0x50
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	3301      	adds	r3, #1
 8002c74:	73fb      	strb	r3, [r7, #15]
 8002c76:	7bfa      	ldrb	r2, [r7, #15]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d3af      	bcc.n	8002be0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c80:	2300      	movs	r3, #0
 8002c82:	73fb      	strb	r3, [r7, #15]
 8002c84:	e044      	b.n	8002d10 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	1a9b      	subs	r3, r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c9c:	7bfa      	ldrb	r2, [r7, #15]
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	1a9b      	subs	r3, r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002cae:	7bfa      	ldrb	r2, [r7, #15]
 8002cb0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cb2:	7bfa      	ldrb	r2, [r7, #15]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	1a9b      	subs	r3, r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cc8:	7bfa      	ldrb	r2, [r7, #15]
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	1a9b      	subs	r3, r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cde:	7bfa      	ldrb	r2, [r7, #15]
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	1a9b      	subs	r3, r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	440b      	add	r3, r1
 8002cec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cf4:	7bfa      	ldrb	r2, [r7, #15]
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	1a9b      	subs	r3, r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
 8002d10:	7bfa      	ldrb	r2, [r7, #15]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d3b5      	bcc.n	8002c86 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	687e      	ldr	r6, [r7, #4]
 8002d22:	466d      	mov	r5, sp
 8002d24:	f106 0410 	add.w	r4, r6, #16
 8002d28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d34:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d38:	1d33      	adds	r3, r6, #4
 8002d3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d3c:	6838      	ldr	r0, [r7, #0]
 8002d3e:	f002 fefd 	bl	8005b3c <USB_DevInit>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e014      	b.n	8002d7e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d102      	bne.n	8002d72 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f80b 	bl	8002d88 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f003 f8b7 	bl	8005eea <USB_DevDisconnect>

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002d88 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002db6:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <HAL_PCDEx_ActivateLPM+0x44>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	10000003 	.word	0x10000003

08002dd0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a04      	ldr	r2, [pc, #16]	; (8002dec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dde:	6013      	str	r3, [r2, #0]
}
 8002de0:	bf00      	nop
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40007000 	.word	0x40007000

08002df0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e291      	b.n	800332a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 8087 	beq.w	8002f22 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e14:	4b96      	ldr	r3, [pc, #600]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 030c 	and.w	r3, r3, #12
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d00c      	beq.n	8002e3a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e20:	4b93      	ldr	r3, [pc, #588]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 030c 	and.w	r3, r3, #12
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d112      	bne.n	8002e52 <HAL_RCC_OscConfig+0x62>
 8002e2c:	4b90      	ldr	r3, [pc, #576]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e38:	d10b      	bne.n	8002e52 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e3a:	4b8d      	ldr	r3, [pc, #564]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d06c      	beq.n	8002f20 <HAL_RCC_OscConfig+0x130>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d168      	bne.n	8002f20 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e26b      	b.n	800332a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e5a:	d106      	bne.n	8002e6a <HAL_RCC_OscConfig+0x7a>
 8002e5c:	4b84      	ldr	r3, [pc, #528]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a83      	ldr	r2, [pc, #524]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	e02e      	b.n	8002ec8 <HAL_RCC_OscConfig+0xd8>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x9c>
 8002e72:	4b7f      	ldr	r3, [pc, #508]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a7e      	ldr	r2, [pc, #504]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	4b7c      	ldr	r3, [pc, #496]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a7b      	ldr	r2, [pc, #492]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002e84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	e01d      	b.n	8002ec8 <HAL_RCC_OscConfig+0xd8>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e94:	d10c      	bne.n	8002eb0 <HAL_RCC_OscConfig+0xc0>
 8002e96:	4b76      	ldr	r3, [pc, #472]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a75      	ldr	r2, [pc, #468]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	4b73      	ldr	r3, [pc, #460]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a72      	ldr	r2, [pc, #456]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	e00b      	b.n	8002ec8 <HAL_RCC_OscConfig+0xd8>
 8002eb0:	4b6f      	ldr	r3, [pc, #444]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a6e      	ldr	r2, [pc, #440]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eba:	6013      	str	r3, [r2, #0]
 8002ebc:	4b6c      	ldr	r3, [pc, #432]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a6b      	ldr	r2, [pc, #428]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ec6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d013      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed0:	f7fe fdd0 	bl	8001a74 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed8:	f7fe fdcc 	bl	8001a74 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b64      	cmp	r3, #100	; 0x64
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e21f      	b.n	800332a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eea:	4b61      	ldr	r3, [pc, #388]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0f0      	beq.n	8002ed8 <HAL_RCC_OscConfig+0xe8>
 8002ef6:	e014      	b.n	8002f22 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7fe fdbc 	bl	8001a74 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f00:	f7fe fdb8 	bl	8001a74 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b64      	cmp	r3, #100	; 0x64
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e20b      	b.n	800332a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f12:	4b57      	ldr	r3, [pc, #348]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f0      	bne.n	8002f00 <HAL_RCC_OscConfig+0x110>
 8002f1e:	e000      	b.n	8002f22 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d069      	beq.n	8003002 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f2e:	4b50      	ldr	r3, [pc, #320]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 030c 	and.w	r3, r3, #12
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00b      	beq.n	8002f52 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f3a:	4b4d      	ldr	r3, [pc, #308]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b08      	cmp	r3, #8
 8002f44:	d11c      	bne.n	8002f80 <HAL_RCC_OscConfig+0x190>
 8002f46:	4b4a      	ldr	r3, [pc, #296]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d116      	bne.n	8002f80 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f52:	4b47      	ldr	r3, [pc, #284]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d005      	beq.n	8002f6a <HAL_RCC_OscConfig+0x17a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d001      	beq.n	8002f6a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e1df      	b.n	800332a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6a:	4b41      	ldr	r3, [pc, #260]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	493d      	ldr	r1, [pc, #244]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f7e:	e040      	b.n	8003002 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d023      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f88:	4b39      	ldr	r3, [pc, #228]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a38      	ldr	r2, [pc, #224]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f94:	f7fe fd6e 	bl	8001a74 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f9c:	f7fe fd6a 	bl	8001a74 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e1bd      	b.n	800332a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fae:	4b30      	ldr	r3, [pc, #192]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0f0      	beq.n	8002f9c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fba:	4b2d      	ldr	r3, [pc, #180]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	4929      	ldr	r1, [pc, #164]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	600b      	str	r3, [r1, #0]
 8002fce:	e018      	b.n	8003002 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fd0:	4b27      	ldr	r3, [pc, #156]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a26      	ldr	r2, [pc, #152]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002fd6:	f023 0301 	bic.w	r3, r3, #1
 8002fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fe fd4a 	bl	8001a74 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe4:	f7fe fd46 	bl	8001a74 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e199      	b.n	800332a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff6:	4b1e      	ldr	r3, [pc, #120]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d038      	beq.n	8003080 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d019      	beq.n	800304a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003016:	4b16      	ldr	r3, [pc, #88]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8003018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800301a:	4a15      	ldr	r2, [pc, #84]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003022:	f7fe fd27 	bl	8001a74 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800302a:	f7fe fd23 	bl	8001a74 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e176      	b.n	800332a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 800303e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x23a>
 8003048:	e01a      	b.n	8003080 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800304a:	4b09      	ldr	r3, [pc, #36]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 800304c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800304e:	4a08      	ldr	r2, [pc, #32]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8003050:	f023 0301 	bic.w	r3, r3, #1
 8003054:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003056:	f7fe fd0d 	bl	8001a74 <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800305c:	e00a      	b.n	8003074 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800305e:	f7fe fd09 	bl	8001a74 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d903      	bls.n	8003074 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e15c      	b.n	800332a <HAL_RCC_OscConfig+0x53a>
 8003070:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003074:	4b91      	ldr	r3, [pc, #580]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 8003076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1ee      	bne.n	800305e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 80a4 	beq.w	80031d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800308e:	4b8b      	ldr	r3, [pc, #556]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10d      	bne.n	80030b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800309a:	4b88      	ldr	r3, [pc, #544]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	4a87      	ldr	r2, [pc, #540]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 80030a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a4:	6413      	str	r3, [r2, #64]	; 0x40
 80030a6:	4b85      	ldr	r3, [pc, #532]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ae:	60bb      	str	r3, [r7, #8]
 80030b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030b2:	2301      	movs	r3, #1
 80030b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030b6:	4b82      	ldr	r3, [pc, #520]	; (80032c0 <HAL_RCC_OscConfig+0x4d0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d118      	bne.n	80030f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80030c2:	4b7f      	ldr	r3, [pc, #508]	; (80032c0 <HAL_RCC_OscConfig+0x4d0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a7e      	ldr	r2, [pc, #504]	; (80032c0 <HAL_RCC_OscConfig+0x4d0>)
 80030c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ce:	f7fe fcd1 	bl	8001a74 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d6:	f7fe fccd 	bl	8001a74 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b64      	cmp	r3, #100	; 0x64
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e120      	b.n	800332a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030e8:	4b75      	ldr	r3, [pc, #468]	; (80032c0 <HAL_RCC_OscConfig+0x4d0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d106      	bne.n	800310a <HAL_RCC_OscConfig+0x31a>
 80030fc:	4b6f      	ldr	r3, [pc, #444]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 80030fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003100:	4a6e      	ldr	r2, [pc, #440]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	6713      	str	r3, [r2, #112]	; 0x70
 8003108:	e02d      	b.n	8003166 <HAL_RCC_OscConfig+0x376>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10c      	bne.n	800312c <HAL_RCC_OscConfig+0x33c>
 8003112:	4b6a      	ldr	r3, [pc, #424]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 8003114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003116:	4a69      	ldr	r2, [pc, #420]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 8003118:	f023 0301 	bic.w	r3, r3, #1
 800311c:	6713      	str	r3, [r2, #112]	; 0x70
 800311e:	4b67      	ldr	r3, [pc, #412]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 8003120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003122:	4a66      	ldr	r2, [pc, #408]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 8003124:	f023 0304 	bic.w	r3, r3, #4
 8003128:	6713      	str	r3, [r2, #112]	; 0x70
 800312a:	e01c      	b.n	8003166 <HAL_RCC_OscConfig+0x376>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b05      	cmp	r3, #5
 8003132:	d10c      	bne.n	800314e <HAL_RCC_OscConfig+0x35e>
 8003134:	4b61      	ldr	r3, [pc, #388]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 8003136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003138:	4a60      	ldr	r2, [pc, #384]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 800313a:	f043 0304 	orr.w	r3, r3, #4
 800313e:	6713      	str	r3, [r2, #112]	; 0x70
 8003140:	4b5e      	ldr	r3, [pc, #376]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 8003142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003144:	4a5d      	ldr	r2, [pc, #372]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	6713      	str	r3, [r2, #112]	; 0x70
 800314c:	e00b      	b.n	8003166 <HAL_RCC_OscConfig+0x376>
 800314e:	4b5b      	ldr	r3, [pc, #364]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 8003150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003152:	4a5a      	ldr	r2, [pc, #360]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 8003154:	f023 0301 	bic.w	r3, r3, #1
 8003158:	6713      	str	r3, [r2, #112]	; 0x70
 800315a:	4b58      	ldr	r3, [pc, #352]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 800315c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315e:	4a57      	ldr	r2, [pc, #348]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 8003160:	f023 0304 	bic.w	r3, r3, #4
 8003164:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d015      	beq.n	800319a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316e:	f7fe fc81 	bl	8001a74 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003174:	e00a      	b.n	800318c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003176:	f7fe fc7d 	bl	8001a74 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	f241 3288 	movw	r2, #5000	; 0x1388
 8003184:	4293      	cmp	r3, r2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e0ce      	b.n	800332a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318c:	4b4b      	ldr	r3, [pc, #300]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 800318e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0ee      	beq.n	8003176 <HAL_RCC_OscConfig+0x386>
 8003198:	e014      	b.n	80031c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319a:	f7fe fc6b 	bl	8001a74 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a0:	e00a      	b.n	80031b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a2:	f7fe fc67 	bl	8001a74 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e0b8      	b.n	800332a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b8:	4b40      	ldr	r3, [pc, #256]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1ee      	bne.n	80031a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031c4:	7dfb      	ldrb	r3, [r7, #23]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d105      	bne.n	80031d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ca:	4b3c      	ldr	r3, [pc, #240]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	4a3b      	ldr	r2, [pc, #236]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 80031d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 80a4 	beq.w	8003328 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031e0:	4b36      	ldr	r3, [pc, #216]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 030c 	and.w	r3, r3, #12
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d06b      	beq.n	80032c4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d149      	bne.n	8003288 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f4:	4b31      	ldr	r3, [pc, #196]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a30      	ldr	r2, [pc, #192]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 80031fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003200:	f7fe fc38 	bl	8001a74 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003208:	f7fe fc34 	bl	8001a74 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e087      	b.n	800332a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321a:	4b28      	ldr	r3, [pc, #160]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69da      	ldr	r2, [r3, #28]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	019b      	lsls	r3, r3, #6
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323c:	085b      	lsrs	r3, r3, #1
 800323e:	3b01      	subs	r3, #1
 8003240:	041b      	lsls	r3, r3, #16
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	061b      	lsls	r3, r3, #24
 800324a:	4313      	orrs	r3, r2
 800324c:	4a1b      	ldr	r2, [pc, #108]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 800324e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003252:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003254:	4b19      	ldr	r3, [pc, #100]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a18      	ldr	r2, [pc, #96]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 800325a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800325e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003260:	f7fe fc08 	bl	8001a74 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003268:	f7fe fc04 	bl	8001a74 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e057      	b.n	800332a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327a:	4b10      	ldr	r3, [pc, #64]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0x478>
 8003286:	e04f      	b.n	8003328 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003288:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a0b      	ldr	r2, [pc, #44]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 800328e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003292:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003294:	f7fe fbee 	bl	8001a74 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800329c:	f7fe fbea 	bl	8001a74 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e03d      	b.n	800332a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ae:	4b03      	ldr	r3, [pc, #12]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x4ac>
 80032ba:	e035      	b.n	8003328 <HAL_RCC_OscConfig+0x538>
 80032bc:	40023800 	.word	0x40023800
 80032c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80032c4:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <HAL_RCC_OscConfig+0x544>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d028      	beq.n	8003324 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032dc:	429a      	cmp	r2, r3
 80032de:	d121      	bne.n	8003324 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d11a      	bne.n	8003324 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032f4:	4013      	ands	r3, r2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d111      	bne.n	8003324 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330a:	085b      	lsrs	r3, r3, #1
 800330c:	3b01      	subs	r3, #1
 800330e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003310:	429a      	cmp	r2, r3
 8003312:	d107      	bne.n	8003324 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003320:	429a      	cmp	r2, r3
 8003322:	d001      	beq.n	8003328 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e000      	b.n	800332a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40023800 	.word	0x40023800

08003338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0d0      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003350:	4b6a      	ldr	r3, [pc, #424]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d910      	bls.n	8003380 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335e:	4b67      	ldr	r3, [pc, #412]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f023 020f 	bic.w	r2, r3, #15
 8003366:	4965      	ldr	r1, [pc, #404]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	4313      	orrs	r3, r2
 800336c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800336e:	4b63      	ldr	r3, [pc, #396]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d001      	beq.n	8003380 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e0b8      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d020      	beq.n	80033ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d005      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003398:	4b59      	ldr	r3, [pc, #356]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	4a58      	ldr	r2, [pc, #352]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 800339e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033b0:	4b53      	ldr	r3, [pc, #332]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	4a52      	ldr	r2, [pc, #328]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 80033b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033bc:	4b50      	ldr	r3, [pc, #320]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	494d      	ldr	r1, [pc, #308]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d040      	beq.n	800345c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d107      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e2:	4b47      	ldr	r3, [pc, #284]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d115      	bne.n	800341a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e07f      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d107      	bne.n	800340a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fa:	4b41      	ldr	r3, [pc, #260]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d109      	bne.n	800341a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e073      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340a:	4b3d      	ldr	r3, [pc, #244]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e06b      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800341a:	4b39      	ldr	r3, [pc, #228]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f023 0203 	bic.w	r2, r3, #3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	4936      	ldr	r1, [pc, #216]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 8003428:	4313      	orrs	r3, r2
 800342a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800342c:	f7fe fb22 	bl	8001a74 <HAL_GetTick>
 8003430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003432:	e00a      	b.n	800344a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003434:	f7fe fb1e 	bl	8001a74 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003442:	4293      	cmp	r3, r2
 8003444:	d901      	bls.n	800344a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e053      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344a:	4b2d      	ldr	r3, [pc, #180]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 020c 	and.w	r2, r3, #12
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	429a      	cmp	r2, r3
 800345a:	d1eb      	bne.n	8003434 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800345c:	4b27      	ldr	r3, [pc, #156]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 030f 	and.w	r3, r3, #15
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d210      	bcs.n	800348c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346a:	4b24      	ldr	r3, [pc, #144]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f023 020f 	bic.w	r2, r3, #15
 8003472:	4922      	ldr	r1, [pc, #136]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	4313      	orrs	r3, r2
 8003478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800347a:	4b20      	ldr	r3, [pc, #128]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d001      	beq.n	800348c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e032      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003498:	4b19      	ldr	r3, [pc, #100]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4916      	ldr	r1, [pc, #88]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d009      	beq.n	80034ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034b6:	4b12      	ldr	r3, [pc, #72]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	490e      	ldr	r1, [pc, #56]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034ca:	f000 f821 	bl	8003510 <HAL_RCC_GetSysClockFreq>
 80034ce:	4602      	mov	r2, r0
 80034d0:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	091b      	lsrs	r3, r3, #4
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	490a      	ldr	r1, [pc, #40]	; (8003504 <HAL_RCC_ClockConfig+0x1cc>)
 80034dc:	5ccb      	ldrb	r3, [r1, r3]
 80034de:	fa22 f303 	lsr.w	r3, r2, r3
 80034e2:	4a09      	ldr	r2, [pc, #36]	; (8003508 <HAL_RCC_ClockConfig+0x1d0>)
 80034e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034e6:	4b09      	ldr	r3, [pc, #36]	; (800350c <HAL_RCC_ClockConfig+0x1d4>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fe fa7e 	bl	80019ec <HAL_InitTick>

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40023c00 	.word	0x40023c00
 8003500:	40023800 	.word	0x40023800
 8003504:	080068d0 	.word	0x080068d0
 8003508:	20000000 	.word	0x20000000
 800350c:	20000004 	.word	0x20000004

08003510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003510:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003514:	b084      	sub	sp, #16
 8003516:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	607b      	str	r3, [r7, #4]
 800351c:	2300      	movs	r3, #0
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	2300      	movs	r3, #0
 8003522:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003524:	2300      	movs	r3, #0
 8003526:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003528:	4b67      	ldr	r3, [pc, #412]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 030c 	and.w	r3, r3, #12
 8003530:	2b08      	cmp	r3, #8
 8003532:	d00d      	beq.n	8003550 <HAL_RCC_GetSysClockFreq+0x40>
 8003534:	2b08      	cmp	r3, #8
 8003536:	f200 80bd 	bhi.w	80036b4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <HAL_RCC_GetSysClockFreq+0x34>
 800353e:	2b04      	cmp	r3, #4
 8003540:	d003      	beq.n	800354a <HAL_RCC_GetSysClockFreq+0x3a>
 8003542:	e0b7      	b.n	80036b4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003544:	4b61      	ldr	r3, [pc, #388]	; (80036cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003546:	60bb      	str	r3, [r7, #8]
      break;
 8003548:	e0b7      	b.n	80036ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800354a:	4b61      	ldr	r3, [pc, #388]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800354c:	60bb      	str	r3, [r7, #8]
      break;
 800354e:	e0b4      	b.n	80036ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003550:	4b5d      	ldr	r3, [pc, #372]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003558:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800355a:	4b5b      	ldr	r3, [pc, #364]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d04d      	beq.n	8003602 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003566:	4b58      	ldr	r3, [pc, #352]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	099b      	lsrs	r3, r3, #6
 800356c:	461a      	mov	r2, r3
 800356e:	f04f 0300 	mov.w	r3, #0
 8003572:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003576:	f04f 0100 	mov.w	r1, #0
 800357a:	ea02 0800 	and.w	r8, r2, r0
 800357e:	ea03 0901 	and.w	r9, r3, r1
 8003582:	4640      	mov	r0, r8
 8003584:	4649      	mov	r1, r9
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	014b      	lsls	r3, r1, #5
 8003590:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003594:	0142      	lsls	r2, r0, #5
 8003596:	4610      	mov	r0, r2
 8003598:	4619      	mov	r1, r3
 800359a:	ebb0 0008 	subs.w	r0, r0, r8
 800359e:	eb61 0109 	sbc.w	r1, r1, r9
 80035a2:	f04f 0200 	mov.w	r2, #0
 80035a6:	f04f 0300 	mov.w	r3, #0
 80035aa:	018b      	lsls	r3, r1, #6
 80035ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035b0:	0182      	lsls	r2, r0, #6
 80035b2:	1a12      	subs	r2, r2, r0
 80035b4:	eb63 0301 	sbc.w	r3, r3, r1
 80035b8:	f04f 0000 	mov.w	r0, #0
 80035bc:	f04f 0100 	mov.w	r1, #0
 80035c0:	00d9      	lsls	r1, r3, #3
 80035c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035c6:	00d0      	lsls	r0, r2, #3
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	eb12 0208 	adds.w	r2, r2, r8
 80035d0:	eb43 0309 	adc.w	r3, r3, r9
 80035d4:	f04f 0000 	mov.w	r0, #0
 80035d8:	f04f 0100 	mov.w	r1, #0
 80035dc:	0259      	lsls	r1, r3, #9
 80035de:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80035e2:	0250      	lsls	r0, r2, #9
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4610      	mov	r0, r2
 80035ea:	4619      	mov	r1, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	461a      	mov	r2, r3
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	f7fd f818 	bl	8000628 <__aeabi_uldivmod>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4613      	mov	r3, r2
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	e04a      	b.n	8003698 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003602:	4b31      	ldr	r3, [pc, #196]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	099b      	lsrs	r3, r3, #6
 8003608:	461a      	mov	r2, r3
 800360a:	f04f 0300 	mov.w	r3, #0
 800360e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003612:	f04f 0100 	mov.w	r1, #0
 8003616:	ea02 0400 	and.w	r4, r2, r0
 800361a:	ea03 0501 	and.w	r5, r3, r1
 800361e:	4620      	mov	r0, r4
 8003620:	4629      	mov	r1, r5
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	f04f 0300 	mov.w	r3, #0
 800362a:	014b      	lsls	r3, r1, #5
 800362c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003630:	0142      	lsls	r2, r0, #5
 8003632:	4610      	mov	r0, r2
 8003634:	4619      	mov	r1, r3
 8003636:	1b00      	subs	r0, r0, r4
 8003638:	eb61 0105 	sbc.w	r1, r1, r5
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	018b      	lsls	r3, r1, #6
 8003646:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800364a:	0182      	lsls	r2, r0, #6
 800364c:	1a12      	subs	r2, r2, r0
 800364e:	eb63 0301 	sbc.w	r3, r3, r1
 8003652:	f04f 0000 	mov.w	r0, #0
 8003656:	f04f 0100 	mov.w	r1, #0
 800365a:	00d9      	lsls	r1, r3, #3
 800365c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003660:	00d0      	lsls	r0, r2, #3
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	1912      	adds	r2, r2, r4
 8003668:	eb45 0303 	adc.w	r3, r5, r3
 800366c:	f04f 0000 	mov.w	r0, #0
 8003670:	f04f 0100 	mov.w	r1, #0
 8003674:	0299      	lsls	r1, r3, #10
 8003676:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800367a:	0290      	lsls	r0, r2, #10
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4610      	mov	r0, r2
 8003682:	4619      	mov	r1, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	461a      	mov	r2, r3
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	f7fc ffcc 	bl	8000628 <__aeabi_uldivmod>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	4613      	mov	r3, r2
 8003696:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003698:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	0c1b      	lsrs	r3, r3, #16
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	3301      	adds	r3, #1
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b0:	60bb      	str	r3, [r7, #8]
      break;
 80036b2:	e002      	b.n	80036ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036b4:	4b05      	ldr	r3, [pc, #20]	; (80036cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80036b6:	60bb      	str	r3, [r7, #8]
      break;
 80036b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ba:	68bb      	ldr	r3, [r7, #8]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80036c6:	bf00      	nop
 80036c8:	40023800 	.word	0x40023800
 80036cc:	00f42400 	.word	0x00f42400
 80036d0:	007a1200 	.word	0x007a1200

080036d4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036d8:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036da:	681b      	ldr	r3, [r3, #0]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	20000000 	.word	0x20000000

080036ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036f0:	f7ff fff0 	bl	80036d4 <HAL_RCC_GetHCLKFreq>
 80036f4:	4602      	mov	r2, r0
 80036f6:	4b05      	ldr	r3, [pc, #20]	; (800370c <HAL_RCC_GetPCLK1Freq+0x20>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	0a9b      	lsrs	r3, r3, #10
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	4903      	ldr	r1, [pc, #12]	; (8003710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003702:	5ccb      	ldrb	r3, [r1, r3]
 8003704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003708:	4618      	mov	r0, r3
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40023800 	.word	0x40023800
 8003710:	080068e0 	.word	0x080068e0

08003714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003718:	f7ff ffdc 	bl	80036d4 <HAL_RCC_GetHCLKFreq>
 800371c:	4602      	mov	r2, r0
 800371e:	4b05      	ldr	r3, [pc, #20]	; (8003734 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	0b5b      	lsrs	r3, r3, #13
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	4903      	ldr	r1, [pc, #12]	; (8003738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800372a:	5ccb      	ldrb	r3, [r1, r3]
 800372c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003730:	4618      	mov	r0, r3
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40023800 	.word	0x40023800
 8003738:	080068e0 	.word	0x080068e0

0800373c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003748:	2300      	movs	r3, #0
 800374a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003750:	2300      	movs	r3, #0
 8003752:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003754:	2300      	movs	r3, #0
 8003756:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b00      	cmp	r3, #0
 8003762:	d012      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003764:	4b69      	ldr	r3, [pc, #420]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	4a68      	ldr	r2, [pc, #416]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800376a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800376e:	6093      	str	r3, [r2, #8]
 8003770:	4b66      	ldr	r3, [pc, #408]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003778:	4964      	ldr	r1, [pc, #400]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800377a:	4313      	orrs	r3, r2
 800377c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003786:	2301      	movs	r3, #1
 8003788:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d017      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003796:	4b5d      	ldr	r3, [pc, #372]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800379c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a4:	4959      	ldr	r1, [pc, #356]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037b4:	d101      	bne.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80037b6:	2301      	movs	r3, #1
 80037b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80037c2:	2301      	movs	r3, #1
 80037c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d017      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037d2:	4b4e      	ldr	r3, [pc, #312]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	494a      	ldr	r1, [pc, #296]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037f0:	d101      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80037f2:	2301      	movs	r3, #1
 80037f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80037fe:	2301      	movs	r3, #1
 8003800:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800380e:	2301      	movs	r3, #1
 8003810:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 808b 	beq.w	8003936 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003820:	4b3a      	ldr	r3, [pc, #232]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	4a39      	ldr	r2, [pc, #228]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800382a:	6413      	str	r3, [r2, #64]	; 0x40
 800382c:	4b37      	ldr	r3, [pc, #220]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003838:	4b35      	ldr	r3, [pc, #212]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a34      	ldr	r2, [pc, #208]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800383e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003842:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003844:	f7fe f916 	bl	8001a74 <HAL_GetTick>
 8003848:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800384a:	e008      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800384c:	f7fe f912 	bl	8001a74 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b64      	cmp	r3, #100	; 0x64
 8003858:	d901      	bls.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e357      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800385e:	4b2c      	ldr	r3, [pc, #176]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800386a:	4b28      	ldr	r3, [pc, #160]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800386c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003872:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d035      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	429a      	cmp	r2, r3
 8003886:	d02e      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003888:	4b20      	ldr	r3, [pc, #128]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800388a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003890:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003892:	4b1e      	ldr	r3, [pc, #120]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003896:	4a1d      	ldr	r2, [pc, #116]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800389c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800389e:	4b1b      	ldr	r3, [pc, #108]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a2:	4a1a      	ldr	r2, [pc, #104]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80038aa:	4a18      	ldr	r2, [pc, #96]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80038b0:	4b16      	ldr	r3, [pc, #88]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d114      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038bc:	f7fe f8da 	bl	8001a74 <HAL_GetTick>
 80038c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c2:	e00a      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038c4:	f7fe f8d6 	bl	8001a74 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d901      	bls.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e319      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038da:	4b0c      	ldr	r3, [pc, #48]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0ee      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038f2:	d111      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003900:	4b04      	ldr	r3, [pc, #16]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003902:	400b      	ands	r3, r1
 8003904:	4901      	ldr	r1, [pc, #4]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003906:	4313      	orrs	r3, r2
 8003908:	608b      	str	r3, [r1, #8]
 800390a:	e00b      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800390c:	40023800 	.word	0x40023800
 8003910:	40007000 	.word	0x40007000
 8003914:	0ffffcff 	.word	0x0ffffcff
 8003918:	4bb1      	ldr	r3, [pc, #708]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	4ab0      	ldr	r2, [pc, #704]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800391e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003922:	6093      	str	r3, [r2, #8]
 8003924:	4bae      	ldr	r3, [pc, #696]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003926:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003930:	49ab      	ldr	r1, [pc, #684]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003932:	4313      	orrs	r3, r2
 8003934:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0310 	and.w	r3, r3, #16
 800393e:	2b00      	cmp	r3, #0
 8003940:	d010      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003942:	4ba7      	ldr	r3, [pc, #668]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003948:	4aa5      	ldr	r2, [pc, #660]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800394a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800394e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003952:	4ba3      	ldr	r3, [pc, #652]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003954:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395c:	49a0      	ldr	r1, [pc, #640]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800395e:	4313      	orrs	r3, r2
 8003960:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00a      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003970:	4b9b      	ldr	r3, [pc, #620]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003976:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800397e:	4998      	ldr	r1, [pc, #608]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003980:	4313      	orrs	r3, r2
 8003982:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003992:	4b93      	ldr	r3, [pc, #588]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003998:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039a0:	498f      	ldr	r1, [pc, #572]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039b4:	4b8a      	ldr	r3, [pc, #552]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039c2:	4987      	ldr	r1, [pc, #540]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039d6:	4b82      	ldr	r3, [pc, #520]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e4:	497e      	ldr	r1, [pc, #504]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00a      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039f8:	4b79      	ldr	r3, [pc, #484]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fe:	f023 0203 	bic.w	r2, r3, #3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a06:	4976      	ldr	r1, [pc, #472]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a1a:	4b71      	ldr	r3, [pc, #452]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a20:	f023 020c 	bic.w	r2, r3, #12
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a28:	496d      	ldr	r1, [pc, #436]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a3c:	4b68      	ldr	r3, [pc, #416]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a42:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4a:	4965      	ldr	r1, [pc, #404]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a5e:	4b60      	ldr	r3, [pc, #384]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a64:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a6c:	495c      	ldr	r1, [pc, #368]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a80:	4b57      	ldr	r3, [pc, #348]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8e:	4954      	ldr	r1, [pc, #336]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003aa2:	4b4f      	ldr	r3, [pc, #316]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab0:	494b      	ldr	r1, [pc, #300]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003ac4:	4b46      	ldr	r3, [pc, #280]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad2:	4943      	ldr	r1, [pc, #268]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003ae6:	4b3e      	ldr	r3, [pc, #248]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af4:	493a      	ldr	r1, [pc, #232]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b08:	4b35      	ldr	r3, [pc, #212]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b16:	4932      	ldr	r1, [pc, #200]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d011      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003b2a:	4b2d      	ldr	r3, [pc, #180]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b30:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b38:	4929      	ldr	r1, [pc, #164]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b48:	d101      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b6a:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b70:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b78:	4919      	ldr	r1, [pc, #100]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00b      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b8c:	4b14      	ldr	r3, [pc, #80]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b92:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b9c:	4910      	ldr	r1, [pc, #64]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d006      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 80d9 	beq.w	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003bb8:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a08      	ldr	r2, [pc, #32]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bc4:	f7fd ff56 	bl	8001a74 <HAL_GetTick>
 8003bc8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bca:	e00b      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bcc:	f7fd ff52 	bl	8001a74 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b64      	cmp	r3, #100	; 0x64
 8003bd8:	d904      	bls.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e197      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003bde:	bf00      	nop
 8003be0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003be4:	4b6c      	ldr	r3, [pc, #432]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1ed      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d021      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d11d      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c04:	4b64      	ldr	r3, [pc, #400]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c0a:	0c1b      	lsrs	r3, r3, #16
 8003c0c:	f003 0303 	and.w	r3, r3, #3
 8003c10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c12:	4b61      	ldr	r3, [pc, #388]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c18:	0e1b      	lsrs	r3, r3, #24
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	019a      	lsls	r2, r3, #6
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	041b      	lsls	r3, r3, #16
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	061b      	lsls	r3, r3, #24
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	071b      	lsls	r3, r3, #28
 8003c38:	4957      	ldr	r1, [pc, #348]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d004      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c54:	d00a      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d02e      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c6a:	d129      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c6c:	4b4a      	ldr	r3, [pc, #296]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c72:	0c1b      	lsrs	r3, r3, #16
 8003c74:	f003 0303 	and.w	r3, r3, #3
 8003c78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c7a:	4b47      	ldr	r3, [pc, #284]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c80:	0f1b      	lsrs	r3, r3, #28
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	019a      	lsls	r2, r3, #6
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	041b      	lsls	r3, r3, #16
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	061b      	lsls	r3, r3, #24
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	071b      	lsls	r3, r3, #28
 8003ca0:	493d      	ldr	r1, [pc, #244]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ca8:	4b3b      	ldr	r3, [pc, #236]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003caa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cae:	f023 021f 	bic.w	r2, r3, #31
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	4937      	ldr	r1, [pc, #220]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d01d      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ccc:	4b32      	ldr	r3, [pc, #200]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cd2:	0e1b      	lsrs	r3, r3, #24
 8003cd4:	f003 030f 	and.w	r3, r3, #15
 8003cd8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cda:	4b2f      	ldr	r3, [pc, #188]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ce0:	0f1b      	lsrs	r3, r3, #28
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	019a      	lsls	r2, r3, #6
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	041b      	lsls	r3, r3, #16
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	061b      	lsls	r3, r3, #24
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	071b      	lsls	r3, r3, #28
 8003d00:	4925      	ldr	r1, [pc, #148]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d011      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	019a      	lsls	r2, r3, #6
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	041b      	lsls	r3, r3, #16
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	061b      	lsls	r3, r3, #24
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	071b      	lsls	r3, r3, #28
 8003d30:	4919      	ldr	r1, [pc, #100]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d38:	4b17      	ldr	r3, [pc, #92]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a16      	ldr	r2, [pc, #88]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d44:	f7fd fe96 	bl	8001a74 <HAL_GetTick>
 8003d48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d4c:	f7fd fe92 	bl	8001a74 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b64      	cmp	r3, #100	; 0x64
 8003d58:	d901      	bls.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e0d7      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d5e:	4b0e      	ldr	r3, [pc, #56]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0f0      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	f040 80cd 	bne.w	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d72:	4b09      	ldr	r3, [pc, #36]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a08      	ldr	r2, [pc, #32]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d7e:	f7fd fe79 	bl	8001a74 <HAL_GetTick>
 8003d82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d84:	e00a      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d86:	f7fd fe75 	bl	8001a74 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b64      	cmp	r3, #100	; 0x64
 8003d92:	d903      	bls.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e0ba      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003d98:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d9c:	4b5e      	ldr	r3, [pc, #376]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003da4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003da8:	d0ed      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d009      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d02e      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d12a      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003dd2:	4b51      	ldr	r3, [pc, #324]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd8:	0c1b      	lsrs	r3, r3, #16
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003de0:	4b4d      	ldr	r3, [pc, #308]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de6:	0f1b      	lsrs	r3, r3, #28
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	019a      	lsls	r2, r3, #6
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	041b      	lsls	r3, r3, #16
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	061b      	lsls	r3, r3, #24
 8003e00:	431a      	orrs	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	071b      	lsls	r3, r3, #28
 8003e06:	4944      	ldr	r1, [pc, #272]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e0e:	4b42      	ldr	r3, [pc, #264]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e14:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	021b      	lsls	r3, r3, #8
 8003e20:	493d      	ldr	r1, [pc, #244]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d022      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e3c:	d11d      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e3e:	4b36      	ldr	r3, [pc, #216]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e44:	0e1b      	lsrs	r3, r3, #24
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e4c:	4b32      	ldr	r3, [pc, #200]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e52:	0f1b      	lsrs	r3, r3, #28
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	019a      	lsls	r2, r3, #6
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	041b      	lsls	r3, r3, #16
 8003e66:	431a      	orrs	r2, r3
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	061b      	lsls	r3, r3, #24
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	071b      	lsls	r3, r3, #28
 8003e72:	4929      	ldr	r1, [pc, #164]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d028      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e86:	4b24      	ldr	r3, [pc, #144]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8c:	0e1b      	lsrs	r3, r3, #24
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e94:	4b20      	ldr	r3, [pc, #128]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9a:	0c1b      	lsrs	r3, r3, #16
 8003e9c:	f003 0303 	and.w	r3, r3, #3
 8003ea0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	019a      	lsls	r2, r3, #6
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	041b      	lsls	r3, r3, #16
 8003eac:	431a      	orrs	r2, r3
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	061b      	lsls	r3, r3, #24
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	071b      	lsls	r3, r3, #28
 8003eba:	4917      	ldr	r1, [pc, #92]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ec2:	4b15      	ldr	r3, [pc, #84]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ec8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed0:	4911      	ldr	r1, [pc, #68]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ed8:	4b0f      	ldr	r3, [pc, #60]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a0e      	ldr	r2, [pc, #56]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ee4:	f7fd fdc6 	bl	8001a74 <HAL_GetTick>
 8003ee8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003eec:	f7fd fdc2 	bl	8001a74 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b64      	cmp	r3, #100	; 0x64
 8003ef8:	d901      	bls.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e007      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003efe:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f0a:	d1ef      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3720      	adds	r7, #32
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40023800 	.word	0x40023800

08003f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e049      	b.n	8003fc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d106      	bne.n	8003f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f841 	bl	8003fca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3304      	adds	r3, #4
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	f000 fca2 	bl	80048a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b082      	sub	sp, #8
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e049      	b.n	8004084 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d106      	bne.n	800400a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7fd fb51 	bl	80016ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2202      	movs	r2, #2
 800400e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	3304      	adds	r3, #4
 800401a:	4619      	mov	r1, r3
 800401c:	4610      	mov	r0, r2
 800401e:	f000 fc41 	bl	80048a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d109      	bne.n	80040b0 <HAL_TIM_PWM_Start+0x24>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	bf14      	ite	ne
 80040a8:	2301      	movne	r3, #1
 80040aa:	2300      	moveq	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	e03c      	b.n	800412a <HAL_TIM_PWM_Start+0x9e>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d109      	bne.n	80040ca <HAL_TIM_PWM_Start+0x3e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b01      	cmp	r3, #1
 80040c0:	bf14      	ite	ne
 80040c2:	2301      	movne	r3, #1
 80040c4:	2300      	moveq	r3, #0
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	e02f      	b.n	800412a <HAL_TIM_PWM_Start+0x9e>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b08      	cmp	r3, #8
 80040ce:	d109      	bne.n	80040e4 <HAL_TIM_PWM_Start+0x58>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b01      	cmp	r3, #1
 80040da:	bf14      	ite	ne
 80040dc:	2301      	movne	r3, #1
 80040de:	2300      	moveq	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	e022      	b.n	800412a <HAL_TIM_PWM_Start+0x9e>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2b0c      	cmp	r3, #12
 80040e8:	d109      	bne.n	80040fe <HAL_TIM_PWM_Start+0x72>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	bf14      	ite	ne
 80040f6:	2301      	movne	r3, #1
 80040f8:	2300      	moveq	r3, #0
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	e015      	b.n	800412a <HAL_TIM_PWM_Start+0x9e>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b10      	cmp	r3, #16
 8004102:	d109      	bne.n	8004118 <HAL_TIM_PWM_Start+0x8c>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b01      	cmp	r3, #1
 800410e:	bf14      	ite	ne
 8004110:	2301      	movne	r3, #1
 8004112:	2300      	moveq	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	e008      	b.n	800412a <HAL_TIM_PWM_Start+0x9e>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	bf14      	ite	ne
 8004124:	2301      	movne	r3, #1
 8004126:	2300      	moveq	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e092      	b.n	8004258 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d104      	bne.n	8004142 <HAL_TIM_PWM_Start+0xb6>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004140:	e023      	b.n	800418a <HAL_TIM_PWM_Start+0xfe>
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b04      	cmp	r3, #4
 8004146:	d104      	bne.n	8004152 <HAL_TIM_PWM_Start+0xc6>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004150:	e01b      	b.n	800418a <HAL_TIM_PWM_Start+0xfe>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b08      	cmp	r3, #8
 8004156:	d104      	bne.n	8004162 <HAL_TIM_PWM_Start+0xd6>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004160:	e013      	b.n	800418a <HAL_TIM_PWM_Start+0xfe>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b0c      	cmp	r3, #12
 8004166:	d104      	bne.n	8004172 <HAL_TIM_PWM_Start+0xe6>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004170:	e00b      	b.n	800418a <HAL_TIM_PWM_Start+0xfe>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b10      	cmp	r3, #16
 8004176:	d104      	bne.n	8004182 <HAL_TIM_PWM_Start+0xf6>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004180:	e003      	b.n	800418a <HAL_TIM_PWM_Start+0xfe>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2202      	movs	r2, #2
 8004186:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2201      	movs	r2, #1
 8004190:	6839      	ldr	r1, [r7, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f000 ff1e 	bl	8004fd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a30      	ldr	r2, [pc, #192]	; (8004260 <HAL_TIM_PWM_Start+0x1d4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d004      	beq.n	80041ac <HAL_TIM_PWM_Start+0x120>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a2f      	ldr	r2, [pc, #188]	; (8004264 <HAL_TIM_PWM_Start+0x1d8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d101      	bne.n	80041b0 <HAL_TIM_PWM_Start+0x124>
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <HAL_TIM_PWM_Start+0x126>
 80041b0:	2300      	movs	r3, #0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d007      	beq.n	80041c6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a25      	ldr	r2, [pc, #148]	; (8004260 <HAL_TIM_PWM_Start+0x1d4>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d022      	beq.n	8004216 <HAL_TIM_PWM_Start+0x18a>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d8:	d01d      	beq.n	8004216 <HAL_TIM_PWM_Start+0x18a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a22      	ldr	r2, [pc, #136]	; (8004268 <HAL_TIM_PWM_Start+0x1dc>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d018      	beq.n	8004216 <HAL_TIM_PWM_Start+0x18a>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a20      	ldr	r2, [pc, #128]	; (800426c <HAL_TIM_PWM_Start+0x1e0>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d013      	beq.n	8004216 <HAL_TIM_PWM_Start+0x18a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a1f      	ldr	r2, [pc, #124]	; (8004270 <HAL_TIM_PWM_Start+0x1e4>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d00e      	beq.n	8004216 <HAL_TIM_PWM_Start+0x18a>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a19      	ldr	r2, [pc, #100]	; (8004264 <HAL_TIM_PWM_Start+0x1d8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d009      	beq.n	8004216 <HAL_TIM_PWM_Start+0x18a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a1b      	ldr	r2, [pc, #108]	; (8004274 <HAL_TIM_PWM_Start+0x1e8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d004      	beq.n	8004216 <HAL_TIM_PWM_Start+0x18a>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a19      	ldr	r2, [pc, #100]	; (8004278 <HAL_TIM_PWM_Start+0x1ec>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d115      	bne.n	8004242 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	4b17      	ldr	r3, [pc, #92]	; (800427c <HAL_TIM_PWM_Start+0x1f0>)
 800421e:	4013      	ands	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b06      	cmp	r3, #6
 8004226:	d015      	beq.n	8004254 <HAL_TIM_PWM_Start+0x1c8>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800422e:	d011      	beq.n	8004254 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 0201 	orr.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004240:	e008      	b.n	8004254 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f042 0201 	orr.w	r2, r2, #1
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	e000      	b.n	8004256 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004254:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40010000 	.word	0x40010000
 8004264:	40010400 	.word	0x40010400
 8004268:	40000400 	.word	0x40000400
 800426c:	40000800 	.word	0x40000800
 8004270:	40000c00 	.word	0x40000c00
 8004274:	40014000 	.word	0x40014000
 8004278:	40001800 	.word	0x40001800
 800427c:	00010007 	.word	0x00010007

08004280 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e08f      	b.n	80043b4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d106      	bne.n	80042ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7fd f9bb 	bl	8001624 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2202      	movs	r2, #2
 80042b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6899      	ldr	r1, [r3, #8]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	4b3e      	ldr	r3, [pc, #248]	; (80043bc <HAL_TIM_Encoder_Init+0x13c>)
 80042c2:	400b      	ands	r3, r1
 80042c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3304      	adds	r3, #4
 80042ce:	4619      	mov	r1, r3
 80042d0:	4610      	mov	r0, r2
 80042d2:	f000 fae7 	bl	80048a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	4b31      	ldr	r3, [pc, #196]	; (80043c0 <HAL_TIM_Encoder_Init+0x140>)
 80042fc:	4013      	ands	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	021b      	lsls	r3, r3, #8
 800430a:	4313      	orrs	r3, r2
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	4313      	orrs	r3, r2
 8004310:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	4b2b      	ldr	r3, [pc, #172]	; (80043c4 <HAL_TIM_Encoder_Init+0x144>)
 8004316:	4013      	ands	r3, r2
 8004318:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	4b2a      	ldr	r3, [pc, #168]	; (80043c8 <HAL_TIM_Encoder_Init+0x148>)
 800431e:	4013      	ands	r3, r2
 8004320:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	021b      	lsls	r3, r3, #8
 800432c:	4313      	orrs	r3, r2
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	4313      	orrs	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	011a      	lsls	r2, r3, #4
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	031b      	lsls	r3, r3, #12
 8004340:	4313      	orrs	r3, r2
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	4313      	orrs	r3, r2
 8004346:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800434e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004356:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	4313      	orrs	r3, r2
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	4313      	orrs	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3718      	adds	r7, #24
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	fffebff8 	.word	0xfffebff8
 80043c0:	fffffcfc 	.word	0xfffffcfc
 80043c4:	fffff3f3 	.word	0xfffff3f3
 80043c8:	ffff0f0f 	.word	0xffff0f0f

080043cc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043dc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043e4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043ec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043f4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d110      	bne.n	800441e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d102      	bne.n	8004408 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004402:	7b7b      	ldrb	r3, [r7, #13]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d001      	beq.n	800440c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e069      	b.n	80044e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800441c:	e031      	b.n	8004482 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b04      	cmp	r3, #4
 8004422:	d110      	bne.n	8004446 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004424:	7bbb      	ldrb	r3, [r7, #14]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d102      	bne.n	8004430 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800442a:	7b3b      	ldrb	r3, [r7, #12]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d001      	beq.n	8004434 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e055      	b.n	80044e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004444:	e01d      	b.n	8004482 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d108      	bne.n	800445e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800444c:	7bbb      	ldrb	r3, [r7, #14]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d105      	bne.n	800445e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004452:	7b7b      	ldrb	r3, [r7, #13]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d102      	bne.n	800445e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004458:	7b3b      	ldrb	r3, [r7, #12]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d001      	beq.n	8004462 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e03e      	b.n	80044e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2202      	movs	r2, #2
 8004466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2202      	movs	r2, #2
 800446e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2202      	movs	r2, #2
 8004476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2202      	movs	r2, #2
 800447e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <HAL_TIM_Encoder_Start+0xc4>
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	2b04      	cmp	r3, #4
 800448c:	d008      	beq.n	80044a0 <HAL_TIM_Encoder_Start+0xd4>
 800448e:	e00f      	b.n	80044b0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2201      	movs	r2, #1
 8004496:	2100      	movs	r1, #0
 8004498:	4618      	mov	r0, r3
 800449a:	f000 fd9b 	bl	8004fd4 <TIM_CCxChannelCmd>
      break;
 800449e:	e016      	b.n	80044ce <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2201      	movs	r2, #1
 80044a6:	2104      	movs	r1, #4
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 fd93 	bl	8004fd4 <TIM_CCxChannelCmd>
      break;
 80044ae:	e00e      	b.n	80044ce <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2201      	movs	r2, #1
 80044b6:	2100      	movs	r1, #0
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 fd8b 	bl	8004fd4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2201      	movs	r2, #1
 80044c4:	2104      	movs	r1, #4
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 fd84 	bl	8004fd4 <TIM_CCxChannelCmd>
      break;
 80044cc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f042 0201 	orr.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d101      	bne.n	8004506 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004502:	2302      	movs	r3, #2
 8004504:	e0ff      	b.n	8004706 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b14      	cmp	r3, #20
 8004512:	f200 80f0 	bhi.w	80046f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004516:	a201      	add	r2, pc, #4	; (adr r2, 800451c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451c:	08004571 	.word	0x08004571
 8004520:	080046f7 	.word	0x080046f7
 8004524:	080046f7 	.word	0x080046f7
 8004528:	080046f7 	.word	0x080046f7
 800452c:	080045b1 	.word	0x080045b1
 8004530:	080046f7 	.word	0x080046f7
 8004534:	080046f7 	.word	0x080046f7
 8004538:	080046f7 	.word	0x080046f7
 800453c:	080045f3 	.word	0x080045f3
 8004540:	080046f7 	.word	0x080046f7
 8004544:	080046f7 	.word	0x080046f7
 8004548:	080046f7 	.word	0x080046f7
 800454c:	08004633 	.word	0x08004633
 8004550:	080046f7 	.word	0x080046f7
 8004554:	080046f7 	.word	0x080046f7
 8004558:	080046f7 	.word	0x080046f7
 800455c:	08004675 	.word	0x08004675
 8004560:	080046f7 	.word	0x080046f7
 8004564:	080046f7 	.word	0x080046f7
 8004568:	080046f7 	.word	0x080046f7
 800456c:	080046b5 	.word	0x080046b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68b9      	ldr	r1, [r7, #8]
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fa34 	bl	80049e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699a      	ldr	r2, [r3, #24]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0208 	orr.w	r2, r2, #8
 800458a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699a      	ldr	r2, [r3, #24]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0204 	bic.w	r2, r2, #4
 800459a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6999      	ldr	r1, [r3, #24]
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	691a      	ldr	r2, [r3, #16]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	619a      	str	r2, [r3, #24]
      break;
 80045ae:	e0a5      	b.n	80046fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68b9      	ldr	r1, [r7, #8]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 fa86 	bl	8004ac8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699a      	ldr	r2, [r3, #24]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	699a      	ldr	r2, [r3, #24]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6999      	ldr	r1, [r3, #24]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	021a      	lsls	r2, r3, #8
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	619a      	str	r2, [r3, #24]
      break;
 80045f0:	e084      	b.n	80046fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68b9      	ldr	r1, [r7, #8]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 fadd 	bl	8004bb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	69da      	ldr	r2, [r3, #28]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f042 0208 	orr.w	r2, r2, #8
 800460c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	69da      	ldr	r2, [r3, #28]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0204 	bic.w	r2, r2, #4
 800461c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	69d9      	ldr	r1, [r3, #28]
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	691a      	ldr	r2, [r3, #16]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	61da      	str	r2, [r3, #28]
      break;
 8004630:	e064      	b.n	80046fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68b9      	ldr	r1, [r7, #8]
 8004638:	4618      	mov	r0, r3
 800463a:	f000 fb33 	bl	8004ca4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69da      	ldr	r2, [r3, #28]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800464c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69da      	ldr	r2, [r3, #28]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800465c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	69d9      	ldr	r1, [r3, #28]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	021a      	lsls	r2, r3, #8
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	61da      	str	r2, [r3, #28]
      break;
 8004672:	e043      	b.n	80046fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68b9      	ldr	r1, [r7, #8]
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fb6a 	bl	8004d54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0208 	orr.w	r2, r2, #8
 800468e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0204 	bic.w	r2, r2, #4
 800469e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	691a      	ldr	r2, [r3, #16]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046b2:	e023      	b.n	80046fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68b9      	ldr	r1, [r7, #8]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 fb9c 	bl	8004df8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	021a      	lsls	r2, r3, #8
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046f4:	e002      	b.n	80046fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	75fb      	strb	r3, [r7, #23]
      break;
 80046fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004704:	7dfb      	ldrb	r3, [r7, #23]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop

08004710 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800471a:	2300      	movs	r3, #0
 800471c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004724:	2b01      	cmp	r3, #1
 8004726:	d101      	bne.n	800472c <HAL_TIM_ConfigClockSource+0x1c>
 8004728:	2302      	movs	r3, #2
 800472a:	e0b4      	b.n	8004896 <HAL_TIM_ConfigClockSource+0x186>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	4b56      	ldr	r3, [pc, #344]	; (80048a0 <HAL_TIM_ConfigClockSource+0x190>)
 8004748:	4013      	ands	r3, r2
 800474a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004752:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004764:	d03e      	beq.n	80047e4 <HAL_TIM_ConfigClockSource+0xd4>
 8004766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800476a:	f200 8087 	bhi.w	800487c <HAL_TIM_ConfigClockSource+0x16c>
 800476e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004772:	f000 8086 	beq.w	8004882 <HAL_TIM_ConfigClockSource+0x172>
 8004776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800477a:	d87f      	bhi.n	800487c <HAL_TIM_ConfigClockSource+0x16c>
 800477c:	2b70      	cmp	r3, #112	; 0x70
 800477e:	d01a      	beq.n	80047b6 <HAL_TIM_ConfigClockSource+0xa6>
 8004780:	2b70      	cmp	r3, #112	; 0x70
 8004782:	d87b      	bhi.n	800487c <HAL_TIM_ConfigClockSource+0x16c>
 8004784:	2b60      	cmp	r3, #96	; 0x60
 8004786:	d050      	beq.n	800482a <HAL_TIM_ConfigClockSource+0x11a>
 8004788:	2b60      	cmp	r3, #96	; 0x60
 800478a:	d877      	bhi.n	800487c <HAL_TIM_ConfigClockSource+0x16c>
 800478c:	2b50      	cmp	r3, #80	; 0x50
 800478e:	d03c      	beq.n	800480a <HAL_TIM_ConfigClockSource+0xfa>
 8004790:	2b50      	cmp	r3, #80	; 0x50
 8004792:	d873      	bhi.n	800487c <HAL_TIM_ConfigClockSource+0x16c>
 8004794:	2b40      	cmp	r3, #64	; 0x40
 8004796:	d058      	beq.n	800484a <HAL_TIM_ConfigClockSource+0x13a>
 8004798:	2b40      	cmp	r3, #64	; 0x40
 800479a:	d86f      	bhi.n	800487c <HAL_TIM_ConfigClockSource+0x16c>
 800479c:	2b30      	cmp	r3, #48	; 0x30
 800479e:	d064      	beq.n	800486a <HAL_TIM_ConfigClockSource+0x15a>
 80047a0:	2b30      	cmp	r3, #48	; 0x30
 80047a2:	d86b      	bhi.n	800487c <HAL_TIM_ConfigClockSource+0x16c>
 80047a4:	2b20      	cmp	r3, #32
 80047a6:	d060      	beq.n	800486a <HAL_TIM_ConfigClockSource+0x15a>
 80047a8:	2b20      	cmp	r3, #32
 80047aa:	d867      	bhi.n	800487c <HAL_TIM_ConfigClockSource+0x16c>
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d05c      	beq.n	800486a <HAL_TIM_ConfigClockSource+0x15a>
 80047b0:	2b10      	cmp	r3, #16
 80047b2:	d05a      	beq.n	800486a <HAL_TIM_ConfigClockSource+0x15a>
 80047b4:	e062      	b.n	800487c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6818      	ldr	r0, [r3, #0]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	6899      	ldr	r1, [r3, #8]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f000 fbe5 	bl	8004f94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	609a      	str	r2, [r3, #8]
      break;
 80047e2:	e04f      	b.n	8004884 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6818      	ldr	r0, [r3, #0]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	6899      	ldr	r1, [r3, #8]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f000 fbce 	bl	8004f94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004806:	609a      	str	r2, [r3, #8]
      break;
 8004808:	e03c      	b.n	8004884 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6818      	ldr	r0, [r3, #0]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	6859      	ldr	r1, [r3, #4]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	461a      	mov	r2, r3
 8004818:	f000 fb42 	bl	8004ea0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2150      	movs	r1, #80	; 0x50
 8004822:	4618      	mov	r0, r3
 8004824:	f000 fb9b 	bl	8004f5e <TIM_ITRx_SetConfig>
      break;
 8004828:	e02c      	b.n	8004884 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6818      	ldr	r0, [r3, #0]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	6859      	ldr	r1, [r3, #4]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	461a      	mov	r2, r3
 8004838:	f000 fb61 	bl	8004efe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2160      	movs	r1, #96	; 0x60
 8004842:	4618      	mov	r0, r3
 8004844:	f000 fb8b 	bl	8004f5e <TIM_ITRx_SetConfig>
      break;
 8004848:	e01c      	b.n	8004884 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6818      	ldr	r0, [r3, #0]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	6859      	ldr	r1, [r3, #4]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	461a      	mov	r2, r3
 8004858:	f000 fb22 	bl	8004ea0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2140      	movs	r1, #64	; 0x40
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fb7b 	bl	8004f5e <TIM_ITRx_SetConfig>
      break;
 8004868:	e00c      	b.n	8004884 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4619      	mov	r1, r3
 8004874:	4610      	mov	r0, r2
 8004876:	f000 fb72 	bl	8004f5e <TIM_ITRx_SetConfig>
      break;
 800487a:	e003      	b.n	8004884 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	73fb      	strb	r3, [r7, #15]
      break;
 8004880:	e000      	b.n	8004884 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004882:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004894:	7bfb      	ldrb	r3, [r7, #15]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	fffeff88 	.word	0xfffeff88

080048a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a40      	ldr	r2, [pc, #256]	; (80049b8 <TIM_Base_SetConfig+0x114>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d013      	beq.n	80048e4 <TIM_Base_SetConfig+0x40>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c2:	d00f      	beq.n	80048e4 <TIM_Base_SetConfig+0x40>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a3d      	ldr	r2, [pc, #244]	; (80049bc <TIM_Base_SetConfig+0x118>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d00b      	beq.n	80048e4 <TIM_Base_SetConfig+0x40>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a3c      	ldr	r2, [pc, #240]	; (80049c0 <TIM_Base_SetConfig+0x11c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d007      	beq.n	80048e4 <TIM_Base_SetConfig+0x40>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a3b      	ldr	r2, [pc, #236]	; (80049c4 <TIM_Base_SetConfig+0x120>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d003      	beq.n	80048e4 <TIM_Base_SetConfig+0x40>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a3a      	ldr	r2, [pc, #232]	; (80049c8 <TIM_Base_SetConfig+0x124>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d108      	bne.n	80048f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a2f      	ldr	r2, [pc, #188]	; (80049b8 <TIM_Base_SetConfig+0x114>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d02b      	beq.n	8004956 <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004904:	d027      	beq.n	8004956 <TIM_Base_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a2c      	ldr	r2, [pc, #176]	; (80049bc <TIM_Base_SetConfig+0x118>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d023      	beq.n	8004956 <TIM_Base_SetConfig+0xb2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a2b      	ldr	r2, [pc, #172]	; (80049c0 <TIM_Base_SetConfig+0x11c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d01f      	beq.n	8004956 <TIM_Base_SetConfig+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a2a      	ldr	r2, [pc, #168]	; (80049c4 <TIM_Base_SetConfig+0x120>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d01b      	beq.n	8004956 <TIM_Base_SetConfig+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a29      	ldr	r2, [pc, #164]	; (80049c8 <TIM_Base_SetConfig+0x124>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d017      	beq.n	8004956 <TIM_Base_SetConfig+0xb2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a28      	ldr	r2, [pc, #160]	; (80049cc <TIM_Base_SetConfig+0x128>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d013      	beq.n	8004956 <TIM_Base_SetConfig+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a27      	ldr	r2, [pc, #156]	; (80049d0 <TIM_Base_SetConfig+0x12c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d00f      	beq.n	8004956 <TIM_Base_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a26      	ldr	r2, [pc, #152]	; (80049d4 <TIM_Base_SetConfig+0x130>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d00b      	beq.n	8004956 <TIM_Base_SetConfig+0xb2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a25      	ldr	r2, [pc, #148]	; (80049d8 <TIM_Base_SetConfig+0x134>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d007      	beq.n	8004956 <TIM_Base_SetConfig+0xb2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a24      	ldr	r2, [pc, #144]	; (80049dc <TIM_Base_SetConfig+0x138>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d003      	beq.n	8004956 <TIM_Base_SetConfig+0xb2>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a23      	ldr	r2, [pc, #140]	; (80049e0 <TIM_Base_SetConfig+0x13c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d108      	bne.n	8004968 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800495c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	4313      	orrs	r3, r2
 8004966:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	4313      	orrs	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a0a      	ldr	r2, [pc, #40]	; (80049b8 <TIM_Base_SetConfig+0x114>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d003      	beq.n	800499c <TIM_Base_SetConfig+0xf8>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a0c      	ldr	r2, [pc, #48]	; (80049c8 <TIM_Base_SetConfig+0x124>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d103      	bne.n	80049a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	691a      	ldr	r2, [r3, #16]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	615a      	str	r2, [r3, #20]
}
 80049aa:	bf00      	nop
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	40010000 	.word	0x40010000
 80049bc:	40000400 	.word	0x40000400
 80049c0:	40000800 	.word	0x40000800
 80049c4:	40000c00 	.word	0x40000c00
 80049c8:	40010400 	.word	0x40010400
 80049cc:	40014000 	.word	0x40014000
 80049d0:	40014400 	.word	0x40014400
 80049d4:	40014800 	.word	0x40014800
 80049d8:	40001800 	.word	0x40001800
 80049dc:	40001c00 	.word	0x40001c00
 80049e0:	40002000 	.word	0x40002000

080049e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	f023 0201 	bic.w	r2, r3, #1
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	4b2b      	ldr	r3, [pc, #172]	; (8004abc <TIM_OC1_SetConfig+0xd8>)
 8004a10:	4013      	ands	r3, r2
 8004a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f023 0303 	bic.w	r3, r3, #3
 8004a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f023 0302 	bic.w	r3, r3, #2
 8004a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a21      	ldr	r2, [pc, #132]	; (8004ac0 <TIM_OC1_SetConfig+0xdc>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d003      	beq.n	8004a48 <TIM_OC1_SetConfig+0x64>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a20      	ldr	r2, [pc, #128]	; (8004ac4 <TIM_OC1_SetConfig+0xe0>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d10c      	bne.n	8004a62 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f023 0308 	bic.w	r3, r3, #8
 8004a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f023 0304 	bic.w	r3, r3, #4
 8004a60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a16      	ldr	r2, [pc, #88]	; (8004ac0 <TIM_OC1_SetConfig+0xdc>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d003      	beq.n	8004a72 <TIM_OC1_SetConfig+0x8e>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a15      	ldr	r2, [pc, #84]	; (8004ac4 <TIM_OC1_SetConfig+0xe0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d111      	bne.n	8004a96 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	621a      	str	r2, [r3, #32]
}
 8004ab0:	bf00      	nop
 8004ab2:	371c      	adds	r7, #28
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	fffeff8f 	.word	0xfffeff8f
 8004ac0:	40010000 	.word	0x40010000
 8004ac4:	40010400 	.word	0x40010400

08004ac8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	f023 0210 	bic.w	r2, r3, #16
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4b2e      	ldr	r3, [pc, #184]	; (8004bac <TIM_OC2_SetConfig+0xe4>)
 8004af4:	4013      	ands	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	021b      	lsls	r3, r3, #8
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f023 0320 	bic.w	r3, r3, #32
 8004b12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	011b      	lsls	r3, r3, #4
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a23      	ldr	r2, [pc, #140]	; (8004bb0 <TIM_OC2_SetConfig+0xe8>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d003      	beq.n	8004b30 <TIM_OC2_SetConfig+0x68>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a22      	ldr	r2, [pc, #136]	; (8004bb4 <TIM_OC2_SetConfig+0xec>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d10d      	bne.n	8004b4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	011b      	lsls	r3, r3, #4
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a18      	ldr	r2, [pc, #96]	; (8004bb0 <TIM_OC2_SetConfig+0xe8>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d003      	beq.n	8004b5c <TIM_OC2_SetConfig+0x94>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a17      	ldr	r2, [pc, #92]	; (8004bb4 <TIM_OC2_SetConfig+0xec>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d113      	bne.n	8004b84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	621a      	str	r2, [r3, #32]
}
 8004b9e:	bf00      	nop
 8004ba0:	371c      	adds	r7, #28
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	feff8fff 	.word	0xfeff8fff
 8004bb0:	40010000 	.word	0x40010000
 8004bb4:	40010400 	.word	0x40010400

08004bb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	4b2d      	ldr	r3, [pc, #180]	; (8004c98 <TIM_OC3_SetConfig+0xe0>)
 8004be4:	4013      	ands	r3, r2
 8004be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f023 0303 	bic.w	r3, r3, #3
 8004bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	021b      	lsls	r3, r3, #8
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a22      	ldr	r2, [pc, #136]	; (8004c9c <TIM_OC3_SetConfig+0xe4>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d003      	beq.n	8004c1e <TIM_OC3_SetConfig+0x66>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a21      	ldr	r2, [pc, #132]	; (8004ca0 <TIM_OC3_SetConfig+0xe8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d10d      	bne.n	8004c3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	021b      	lsls	r3, r3, #8
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a17      	ldr	r2, [pc, #92]	; (8004c9c <TIM_OC3_SetConfig+0xe4>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d003      	beq.n	8004c4a <TIM_OC3_SetConfig+0x92>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a16      	ldr	r2, [pc, #88]	; (8004ca0 <TIM_OC3_SetConfig+0xe8>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d113      	bne.n	8004c72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	621a      	str	r2, [r3, #32]
}
 8004c8c:	bf00      	nop
 8004c8e:	371c      	adds	r7, #28
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	fffeff8f 	.word	0xfffeff8f
 8004c9c:	40010000 	.word	0x40010000
 8004ca0:	40010400 	.word	0x40010400

08004ca4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b087      	sub	sp, #28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	4b1e      	ldr	r3, [pc, #120]	; (8004d48 <TIM_OC4_SetConfig+0xa4>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	021b      	lsls	r3, r3, #8
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	031b      	lsls	r3, r3, #12
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a13      	ldr	r2, [pc, #76]	; (8004d4c <TIM_OC4_SetConfig+0xa8>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d003      	beq.n	8004d0c <TIM_OC4_SetConfig+0x68>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a12      	ldr	r2, [pc, #72]	; (8004d50 <TIM_OC4_SetConfig+0xac>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d109      	bne.n	8004d20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	019b      	lsls	r3, r3, #6
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	621a      	str	r2, [r3, #32]
}
 8004d3a:	bf00      	nop
 8004d3c:	371c      	adds	r7, #28
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	feff8fff 	.word	0xfeff8fff
 8004d4c:	40010000 	.word	0x40010000
 8004d50:	40010400 	.word	0x40010400

08004d54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	4b1b      	ldr	r3, [pc, #108]	; (8004dec <TIM_OC5_SetConfig+0x98>)
 8004d80:	4013      	ands	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	041b      	lsls	r3, r3, #16
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a12      	ldr	r2, [pc, #72]	; (8004df0 <TIM_OC5_SetConfig+0x9c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d003      	beq.n	8004db2 <TIM_OC5_SetConfig+0x5e>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a11      	ldr	r2, [pc, #68]	; (8004df4 <TIM_OC5_SetConfig+0xa0>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d109      	bne.n	8004dc6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004db8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	021b      	lsls	r3, r3, #8
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	621a      	str	r2, [r3, #32]
}
 8004de0:	bf00      	nop
 8004de2:	371c      	adds	r7, #28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	fffeff8f 	.word	0xfffeff8f
 8004df0:	40010000 	.word	0x40010000
 8004df4:	40010400 	.word	0x40010400

08004df8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	4b1c      	ldr	r3, [pc, #112]	; (8004e94 <TIM_OC6_SetConfig+0x9c>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	021b      	lsls	r3, r3, #8
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	051b      	lsls	r3, r3, #20
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a13      	ldr	r2, [pc, #76]	; (8004e98 <TIM_OC6_SetConfig+0xa0>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d003      	beq.n	8004e58 <TIM_OC6_SetConfig+0x60>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a12      	ldr	r2, [pc, #72]	; (8004e9c <TIM_OC6_SetConfig+0xa4>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d109      	bne.n	8004e6c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	029b      	lsls	r3, r3, #10
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	621a      	str	r2, [r3, #32]
}
 8004e86:	bf00      	nop
 8004e88:	371c      	adds	r7, #28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	feff8fff 	.word	0xfeff8fff
 8004e98:	40010000 	.word	0x40010000
 8004e9c:	40010400 	.word	0x40010400

08004ea0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	f023 0201 	bic.w	r2, r3, #1
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	011b      	lsls	r3, r3, #4
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f023 030a 	bic.w	r3, r3, #10
 8004edc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	621a      	str	r2, [r3, #32]
}
 8004ef2:	bf00      	nop
 8004ef4:	371c      	adds	r7, #28
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b087      	sub	sp, #28
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	60f8      	str	r0, [r7, #12]
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	f023 0210 	bic.w	r2, r3, #16
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	031b      	lsls	r3, r3, #12
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	011b      	lsls	r3, r3, #4
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	621a      	str	r2, [r3, #32]
}
 8004f52:	bf00      	nop
 8004f54:	371c      	adds	r7, #28
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b085      	sub	sp, #20
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f043 0307 	orr.w	r3, r3, #7
 8004f80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	609a      	str	r2, [r3, #8]
}
 8004f88:	bf00      	nop
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	021a      	lsls	r2, r3, #8
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	609a      	str	r2, [r3, #8]
}
 8004fc8:	bf00      	nop
 8004fca:	371c      	adds	r7, #28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f003 031f 	and.w	r3, r3, #31
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6a1a      	ldr	r2, [r3, #32]
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	43db      	mvns	r3, r3
 8004ff6:	401a      	ands	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6a1a      	ldr	r2, [r3, #32]
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	f003 031f 	and.w	r3, r3, #31
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	fa01 f303 	lsl.w	r3, r1, r3
 800500c:	431a      	orrs	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	621a      	str	r2, [r3, #32]
}
 8005012:	bf00      	nop
 8005014:	371c      	adds	r7, #28
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
	...

08005020 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005030:	2b01      	cmp	r3, #1
 8005032:	d101      	bne.n	8005038 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005034:	2302      	movs	r3, #2
 8005036:	e06d      	b.n	8005114 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2202      	movs	r2, #2
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a30      	ldr	r2, [pc, #192]	; (8005120 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d004      	beq.n	800506c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a2f      	ldr	r2, [pc, #188]	; (8005124 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d108      	bne.n	800507e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005072:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	4313      	orrs	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005084:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	4313      	orrs	r3, r2
 800508e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a20      	ldr	r2, [pc, #128]	; (8005120 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d022      	beq.n	80050e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050aa:	d01d      	beq.n	80050e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a1d      	ldr	r2, [pc, #116]	; (8005128 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d018      	beq.n	80050e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a1c      	ldr	r2, [pc, #112]	; (800512c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d013      	beq.n	80050e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a1a      	ldr	r2, [pc, #104]	; (8005130 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d00e      	beq.n	80050e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a15      	ldr	r2, [pc, #84]	; (8005124 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d009      	beq.n	80050e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a16      	ldr	r2, [pc, #88]	; (8005134 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d004      	beq.n	80050e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a15      	ldr	r2, [pc, #84]	; (8005138 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d10c      	bne.n	8005102 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	40010000 	.word	0x40010000
 8005124:	40010400 	.word	0x40010400
 8005128:	40000400 	.word	0x40000400
 800512c:	40000800 	.word	0x40000800
 8005130:	40000c00 	.word	0x40000c00
 8005134:	40014000 	.word	0x40014000
 8005138:	40001800 	.word	0x40001800

0800513c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e040      	b.n	80051d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005152:	2b00      	cmp	r3, #0
 8005154:	d106      	bne.n	8005164 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7fc fafc 	bl	800175c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2224      	movs	r2, #36	; 0x24
 8005168:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0201 	bic.w	r2, r2, #1
 8005178:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f82c 	bl	80051d8 <UART_SetConfig>
 8005180:	4603      	mov	r3, r0
 8005182:	2b01      	cmp	r3, #1
 8005184:	d101      	bne.n	800518a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e022      	b.n	80051d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 fa82 	bl	800569c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0201 	orr.w	r2, r2, #1
 80051c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fb09 	bl	80057e0 <UART_CheckIdleState>
 80051ce:	4603      	mov	r3, r0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b088      	sub	sp, #32
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051e0:	2300      	movs	r3, #0
 80051e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	431a      	orrs	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	4ba7      	ldr	r3, [pc, #668]	; (80054a0 <UART_SetConfig+0x2c8>)
 8005204:	4013      	ands	r3, r2
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6812      	ldr	r2, [r2, #0]
 800520a:	6979      	ldr	r1, [r7, #20]
 800520c:	430b      	orrs	r3, r1
 800520e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68da      	ldr	r2, [r3, #12]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	4313      	orrs	r3, r2
 8005234:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	430a      	orrs	r2, r1
 8005248:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a95      	ldr	r2, [pc, #596]	; (80054a4 <UART_SetConfig+0x2cc>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d120      	bne.n	8005296 <UART_SetConfig+0xbe>
 8005254:	4b94      	ldr	r3, [pc, #592]	; (80054a8 <UART_SetConfig+0x2d0>)
 8005256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	2b03      	cmp	r3, #3
 8005260:	d816      	bhi.n	8005290 <UART_SetConfig+0xb8>
 8005262:	a201      	add	r2, pc, #4	; (adr r2, 8005268 <UART_SetConfig+0x90>)
 8005264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005268:	08005279 	.word	0x08005279
 800526c:	08005285 	.word	0x08005285
 8005270:	0800527f 	.word	0x0800527f
 8005274:	0800528b 	.word	0x0800528b
 8005278:	2301      	movs	r3, #1
 800527a:	77fb      	strb	r3, [r7, #31]
 800527c:	e14f      	b.n	800551e <UART_SetConfig+0x346>
 800527e:	2302      	movs	r3, #2
 8005280:	77fb      	strb	r3, [r7, #31]
 8005282:	e14c      	b.n	800551e <UART_SetConfig+0x346>
 8005284:	2304      	movs	r3, #4
 8005286:	77fb      	strb	r3, [r7, #31]
 8005288:	e149      	b.n	800551e <UART_SetConfig+0x346>
 800528a:	2308      	movs	r3, #8
 800528c:	77fb      	strb	r3, [r7, #31]
 800528e:	e146      	b.n	800551e <UART_SetConfig+0x346>
 8005290:	2310      	movs	r3, #16
 8005292:	77fb      	strb	r3, [r7, #31]
 8005294:	e143      	b.n	800551e <UART_SetConfig+0x346>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a84      	ldr	r2, [pc, #528]	; (80054ac <UART_SetConfig+0x2d4>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d132      	bne.n	8005306 <UART_SetConfig+0x12e>
 80052a0:	4b81      	ldr	r3, [pc, #516]	; (80054a8 <UART_SetConfig+0x2d0>)
 80052a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a6:	f003 030c 	and.w	r3, r3, #12
 80052aa:	2b0c      	cmp	r3, #12
 80052ac:	d828      	bhi.n	8005300 <UART_SetConfig+0x128>
 80052ae:	a201      	add	r2, pc, #4	; (adr r2, 80052b4 <UART_SetConfig+0xdc>)
 80052b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b4:	080052e9 	.word	0x080052e9
 80052b8:	08005301 	.word	0x08005301
 80052bc:	08005301 	.word	0x08005301
 80052c0:	08005301 	.word	0x08005301
 80052c4:	080052f5 	.word	0x080052f5
 80052c8:	08005301 	.word	0x08005301
 80052cc:	08005301 	.word	0x08005301
 80052d0:	08005301 	.word	0x08005301
 80052d4:	080052ef 	.word	0x080052ef
 80052d8:	08005301 	.word	0x08005301
 80052dc:	08005301 	.word	0x08005301
 80052e0:	08005301 	.word	0x08005301
 80052e4:	080052fb 	.word	0x080052fb
 80052e8:	2300      	movs	r3, #0
 80052ea:	77fb      	strb	r3, [r7, #31]
 80052ec:	e117      	b.n	800551e <UART_SetConfig+0x346>
 80052ee:	2302      	movs	r3, #2
 80052f0:	77fb      	strb	r3, [r7, #31]
 80052f2:	e114      	b.n	800551e <UART_SetConfig+0x346>
 80052f4:	2304      	movs	r3, #4
 80052f6:	77fb      	strb	r3, [r7, #31]
 80052f8:	e111      	b.n	800551e <UART_SetConfig+0x346>
 80052fa:	2308      	movs	r3, #8
 80052fc:	77fb      	strb	r3, [r7, #31]
 80052fe:	e10e      	b.n	800551e <UART_SetConfig+0x346>
 8005300:	2310      	movs	r3, #16
 8005302:	77fb      	strb	r3, [r7, #31]
 8005304:	e10b      	b.n	800551e <UART_SetConfig+0x346>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a69      	ldr	r2, [pc, #420]	; (80054b0 <UART_SetConfig+0x2d8>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d120      	bne.n	8005352 <UART_SetConfig+0x17a>
 8005310:	4b65      	ldr	r3, [pc, #404]	; (80054a8 <UART_SetConfig+0x2d0>)
 8005312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005316:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800531a:	2b30      	cmp	r3, #48	; 0x30
 800531c:	d013      	beq.n	8005346 <UART_SetConfig+0x16e>
 800531e:	2b30      	cmp	r3, #48	; 0x30
 8005320:	d814      	bhi.n	800534c <UART_SetConfig+0x174>
 8005322:	2b20      	cmp	r3, #32
 8005324:	d009      	beq.n	800533a <UART_SetConfig+0x162>
 8005326:	2b20      	cmp	r3, #32
 8005328:	d810      	bhi.n	800534c <UART_SetConfig+0x174>
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <UART_SetConfig+0x15c>
 800532e:	2b10      	cmp	r3, #16
 8005330:	d006      	beq.n	8005340 <UART_SetConfig+0x168>
 8005332:	e00b      	b.n	800534c <UART_SetConfig+0x174>
 8005334:	2300      	movs	r3, #0
 8005336:	77fb      	strb	r3, [r7, #31]
 8005338:	e0f1      	b.n	800551e <UART_SetConfig+0x346>
 800533a:	2302      	movs	r3, #2
 800533c:	77fb      	strb	r3, [r7, #31]
 800533e:	e0ee      	b.n	800551e <UART_SetConfig+0x346>
 8005340:	2304      	movs	r3, #4
 8005342:	77fb      	strb	r3, [r7, #31]
 8005344:	e0eb      	b.n	800551e <UART_SetConfig+0x346>
 8005346:	2308      	movs	r3, #8
 8005348:	77fb      	strb	r3, [r7, #31]
 800534a:	e0e8      	b.n	800551e <UART_SetConfig+0x346>
 800534c:	2310      	movs	r3, #16
 800534e:	77fb      	strb	r3, [r7, #31]
 8005350:	e0e5      	b.n	800551e <UART_SetConfig+0x346>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a57      	ldr	r2, [pc, #348]	; (80054b4 <UART_SetConfig+0x2dc>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d120      	bne.n	800539e <UART_SetConfig+0x1c6>
 800535c:	4b52      	ldr	r3, [pc, #328]	; (80054a8 <UART_SetConfig+0x2d0>)
 800535e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005362:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005366:	2bc0      	cmp	r3, #192	; 0xc0
 8005368:	d013      	beq.n	8005392 <UART_SetConfig+0x1ba>
 800536a:	2bc0      	cmp	r3, #192	; 0xc0
 800536c:	d814      	bhi.n	8005398 <UART_SetConfig+0x1c0>
 800536e:	2b80      	cmp	r3, #128	; 0x80
 8005370:	d009      	beq.n	8005386 <UART_SetConfig+0x1ae>
 8005372:	2b80      	cmp	r3, #128	; 0x80
 8005374:	d810      	bhi.n	8005398 <UART_SetConfig+0x1c0>
 8005376:	2b00      	cmp	r3, #0
 8005378:	d002      	beq.n	8005380 <UART_SetConfig+0x1a8>
 800537a:	2b40      	cmp	r3, #64	; 0x40
 800537c:	d006      	beq.n	800538c <UART_SetConfig+0x1b4>
 800537e:	e00b      	b.n	8005398 <UART_SetConfig+0x1c0>
 8005380:	2300      	movs	r3, #0
 8005382:	77fb      	strb	r3, [r7, #31]
 8005384:	e0cb      	b.n	800551e <UART_SetConfig+0x346>
 8005386:	2302      	movs	r3, #2
 8005388:	77fb      	strb	r3, [r7, #31]
 800538a:	e0c8      	b.n	800551e <UART_SetConfig+0x346>
 800538c:	2304      	movs	r3, #4
 800538e:	77fb      	strb	r3, [r7, #31]
 8005390:	e0c5      	b.n	800551e <UART_SetConfig+0x346>
 8005392:	2308      	movs	r3, #8
 8005394:	77fb      	strb	r3, [r7, #31]
 8005396:	e0c2      	b.n	800551e <UART_SetConfig+0x346>
 8005398:	2310      	movs	r3, #16
 800539a:	77fb      	strb	r3, [r7, #31]
 800539c:	e0bf      	b.n	800551e <UART_SetConfig+0x346>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a45      	ldr	r2, [pc, #276]	; (80054b8 <UART_SetConfig+0x2e0>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d125      	bne.n	80053f4 <UART_SetConfig+0x21c>
 80053a8:	4b3f      	ldr	r3, [pc, #252]	; (80054a8 <UART_SetConfig+0x2d0>)
 80053aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053b6:	d017      	beq.n	80053e8 <UART_SetConfig+0x210>
 80053b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053bc:	d817      	bhi.n	80053ee <UART_SetConfig+0x216>
 80053be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053c2:	d00b      	beq.n	80053dc <UART_SetConfig+0x204>
 80053c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053c8:	d811      	bhi.n	80053ee <UART_SetConfig+0x216>
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <UART_SetConfig+0x1fe>
 80053ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053d2:	d006      	beq.n	80053e2 <UART_SetConfig+0x20a>
 80053d4:	e00b      	b.n	80053ee <UART_SetConfig+0x216>
 80053d6:	2300      	movs	r3, #0
 80053d8:	77fb      	strb	r3, [r7, #31]
 80053da:	e0a0      	b.n	800551e <UART_SetConfig+0x346>
 80053dc:	2302      	movs	r3, #2
 80053de:	77fb      	strb	r3, [r7, #31]
 80053e0:	e09d      	b.n	800551e <UART_SetConfig+0x346>
 80053e2:	2304      	movs	r3, #4
 80053e4:	77fb      	strb	r3, [r7, #31]
 80053e6:	e09a      	b.n	800551e <UART_SetConfig+0x346>
 80053e8:	2308      	movs	r3, #8
 80053ea:	77fb      	strb	r3, [r7, #31]
 80053ec:	e097      	b.n	800551e <UART_SetConfig+0x346>
 80053ee:	2310      	movs	r3, #16
 80053f0:	77fb      	strb	r3, [r7, #31]
 80053f2:	e094      	b.n	800551e <UART_SetConfig+0x346>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a30      	ldr	r2, [pc, #192]	; (80054bc <UART_SetConfig+0x2e4>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d125      	bne.n	800544a <UART_SetConfig+0x272>
 80053fe:	4b2a      	ldr	r3, [pc, #168]	; (80054a8 <UART_SetConfig+0x2d0>)
 8005400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005404:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005408:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800540c:	d017      	beq.n	800543e <UART_SetConfig+0x266>
 800540e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005412:	d817      	bhi.n	8005444 <UART_SetConfig+0x26c>
 8005414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005418:	d00b      	beq.n	8005432 <UART_SetConfig+0x25a>
 800541a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800541e:	d811      	bhi.n	8005444 <UART_SetConfig+0x26c>
 8005420:	2b00      	cmp	r3, #0
 8005422:	d003      	beq.n	800542c <UART_SetConfig+0x254>
 8005424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005428:	d006      	beq.n	8005438 <UART_SetConfig+0x260>
 800542a:	e00b      	b.n	8005444 <UART_SetConfig+0x26c>
 800542c:	2301      	movs	r3, #1
 800542e:	77fb      	strb	r3, [r7, #31]
 8005430:	e075      	b.n	800551e <UART_SetConfig+0x346>
 8005432:	2302      	movs	r3, #2
 8005434:	77fb      	strb	r3, [r7, #31]
 8005436:	e072      	b.n	800551e <UART_SetConfig+0x346>
 8005438:	2304      	movs	r3, #4
 800543a:	77fb      	strb	r3, [r7, #31]
 800543c:	e06f      	b.n	800551e <UART_SetConfig+0x346>
 800543e:	2308      	movs	r3, #8
 8005440:	77fb      	strb	r3, [r7, #31]
 8005442:	e06c      	b.n	800551e <UART_SetConfig+0x346>
 8005444:	2310      	movs	r3, #16
 8005446:	77fb      	strb	r3, [r7, #31]
 8005448:	e069      	b.n	800551e <UART_SetConfig+0x346>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a1c      	ldr	r2, [pc, #112]	; (80054c0 <UART_SetConfig+0x2e8>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d137      	bne.n	80054c4 <UART_SetConfig+0x2ec>
 8005454:	4b14      	ldr	r3, [pc, #80]	; (80054a8 <UART_SetConfig+0x2d0>)
 8005456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800545e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005462:	d017      	beq.n	8005494 <UART_SetConfig+0x2bc>
 8005464:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005468:	d817      	bhi.n	800549a <UART_SetConfig+0x2c2>
 800546a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800546e:	d00b      	beq.n	8005488 <UART_SetConfig+0x2b0>
 8005470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005474:	d811      	bhi.n	800549a <UART_SetConfig+0x2c2>
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <UART_SetConfig+0x2aa>
 800547a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800547e:	d006      	beq.n	800548e <UART_SetConfig+0x2b6>
 8005480:	e00b      	b.n	800549a <UART_SetConfig+0x2c2>
 8005482:	2300      	movs	r3, #0
 8005484:	77fb      	strb	r3, [r7, #31]
 8005486:	e04a      	b.n	800551e <UART_SetConfig+0x346>
 8005488:	2302      	movs	r3, #2
 800548a:	77fb      	strb	r3, [r7, #31]
 800548c:	e047      	b.n	800551e <UART_SetConfig+0x346>
 800548e:	2304      	movs	r3, #4
 8005490:	77fb      	strb	r3, [r7, #31]
 8005492:	e044      	b.n	800551e <UART_SetConfig+0x346>
 8005494:	2308      	movs	r3, #8
 8005496:	77fb      	strb	r3, [r7, #31]
 8005498:	e041      	b.n	800551e <UART_SetConfig+0x346>
 800549a:	2310      	movs	r3, #16
 800549c:	77fb      	strb	r3, [r7, #31]
 800549e:	e03e      	b.n	800551e <UART_SetConfig+0x346>
 80054a0:	efff69f3 	.word	0xefff69f3
 80054a4:	40011000 	.word	0x40011000
 80054a8:	40023800 	.word	0x40023800
 80054ac:	40004400 	.word	0x40004400
 80054b0:	40004800 	.word	0x40004800
 80054b4:	40004c00 	.word	0x40004c00
 80054b8:	40005000 	.word	0x40005000
 80054bc:	40011400 	.word	0x40011400
 80054c0:	40007800 	.word	0x40007800
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a71      	ldr	r2, [pc, #452]	; (8005690 <UART_SetConfig+0x4b8>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d125      	bne.n	800551a <UART_SetConfig+0x342>
 80054ce:	4b71      	ldr	r3, [pc, #452]	; (8005694 <UART_SetConfig+0x4bc>)
 80054d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80054d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80054dc:	d017      	beq.n	800550e <UART_SetConfig+0x336>
 80054de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80054e2:	d817      	bhi.n	8005514 <UART_SetConfig+0x33c>
 80054e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054e8:	d00b      	beq.n	8005502 <UART_SetConfig+0x32a>
 80054ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ee:	d811      	bhi.n	8005514 <UART_SetConfig+0x33c>
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <UART_SetConfig+0x324>
 80054f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054f8:	d006      	beq.n	8005508 <UART_SetConfig+0x330>
 80054fa:	e00b      	b.n	8005514 <UART_SetConfig+0x33c>
 80054fc:	2300      	movs	r3, #0
 80054fe:	77fb      	strb	r3, [r7, #31]
 8005500:	e00d      	b.n	800551e <UART_SetConfig+0x346>
 8005502:	2302      	movs	r3, #2
 8005504:	77fb      	strb	r3, [r7, #31]
 8005506:	e00a      	b.n	800551e <UART_SetConfig+0x346>
 8005508:	2304      	movs	r3, #4
 800550a:	77fb      	strb	r3, [r7, #31]
 800550c:	e007      	b.n	800551e <UART_SetConfig+0x346>
 800550e:	2308      	movs	r3, #8
 8005510:	77fb      	strb	r3, [r7, #31]
 8005512:	e004      	b.n	800551e <UART_SetConfig+0x346>
 8005514:	2310      	movs	r3, #16
 8005516:	77fb      	strb	r3, [r7, #31]
 8005518:	e001      	b.n	800551e <UART_SetConfig+0x346>
 800551a:	2310      	movs	r3, #16
 800551c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005526:	d15a      	bne.n	80055de <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8005528:	7ffb      	ldrb	r3, [r7, #31]
 800552a:	2b08      	cmp	r3, #8
 800552c:	d827      	bhi.n	800557e <UART_SetConfig+0x3a6>
 800552e:	a201      	add	r2, pc, #4	; (adr r2, 8005534 <UART_SetConfig+0x35c>)
 8005530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005534:	08005559 	.word	0x08005559
 8005538:	08005561 	.word	0x08005561
 800553c:	08005569 	.word	0x08005569
 8005540:	0800557f 	.word	0x0800557f
 8005544:	0800556f 	.word	0x0800556f
 8005548:	0800557f 	.word	0x0800557f
 800554c:	0800557f 	.word	0x0800557f
 8005550:	0800557f 	.word	0x0800557f
 8005554:	08005577 	.word	0x08005577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005558:	f7fe f8c8 	bl	80036ec <HAL_RCC_GetPCLK1Freq>
 800555c:	61b8      	str	r0, [r7, #24]
        break;
 800555e:	e013      	b.n	8005588 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005560:	f7fe f8d8 	bl	8003714 <HAL_RCC_GetPCLK2Freq>
 8005564:	61b8      	str	r0, [r7, #24]
        break;
 8005566:	e00f      	b.n	8005588 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005568:	4b4b      	ldr	r3, [pc, #300]	; (8005698 <UART_SetConfig+0x4c0>)
 800556a:	61bb      	str	r3, [r7, #24]
        break;
 800556c:	e00c      	b.n	8005588 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800556e:	f7fd ffcf 	bl	8003510 <HAL_RCC_GetSysClockFreq>
 8005572:	61b8      	str	r0, [r7, #24]
        break;
 8005574:	e008      	b.n	8005588 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800557a:	61bb      	str	r3, [r7, #24]
        break;
 800557c:	e004      	b.n	8005588 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800557e:	2300      	movs	r3, #0
 8005580:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	77bb      	strb	r3, [r7, #30]
        break;
 8005586:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d074      	beq.n	8005678 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	005a      	lsls	r2, r3, #1
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	085b      	lsrs	r3, r3, #1
 8005598:	441a      	add	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	2b0f      	cmp	r3, #15
 80055a8:	d916      	bls.n	80055d8 <UART_SetConfig+0x400>
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b0:	d212      	bcs.n	80055d8 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	f023 030f 	bic.w	r3, r3, #15
 80055ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	085b      	lsrs	r3, r3, #1
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	f003 0307 	and.w	r3, r3, #7
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	89fb      	ldrh	r3, [r7, #14]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	89fa      	ldrh	r2, [r7, #14]
 80055d4:	60da      	str	r2, [r3, #12]
 80055d6:	e04f      	b.n	8005678 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	77bb      	strb	r3, [r7, #30]
 80055dc:	e04c      	b.n	8005678 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055de:	7ffb      	ldrb	r3, [r7, #31]
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d828      	bhi.n	8005636 <UART_SetConfig+0x45e>
 80055e4:	a201      	add	r2, pc, #4	; (adr r2, 80055ec <UART_SetConfig+0x414>)
 80055e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ea:	bf00      	nop
 80055ec:	08005611 	.word	0x08005611
 80055f0:	08005619 	.word	0x08005619
 80055f4:	08005621 	.word	0x08005621
 80055f8:	08005637 	.word	0x08005637
 80055fc:	08005627 	.word	0x08005627
 8005600:	08005637 	.word	0x08005637
 8005604:	08005637 	.word	0x08005637
 8005608:	08005637 	.word	0x08005637
 800560c:	0800562f 	.word	0x0800562f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005610:	f7fe f86c 	bl	80036ec <HAL_RCC_GetPCLK1Freq>
 8005614:	61b8      	str	r0, [r7, #24]
        break;
 8005616:	e013      	b.n	8005640 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005618:	f7fe f87c 	bl	8003714 <HAL_RCC_GetPCLK2Freq>
 800561c:	61b8      	str	r0, [r7, #24]
        break;
 800561e:	e00f      	b.n	8005640 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005620:	4b1d      	ldr	r3, [pc, #116]	; (8005698 <UART_SetConfig+0x4c0>)
 8005622:	61bb      	str	r3, [r7, #24]
        break;
 8005624:	e00c      	b.n	8005640 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005626:	f7fd ff73 	bl	8003510 <HAL_RCC_GetSysClockFreq>
 800562a:	61b8      	str	r0, [r7, #24]
        break;
 800562c:	e008      	b.n	8005640 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800562e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005632:	61bb      	str	r3, [r7, #24]
        break;
 8005634:	e004      	b.n	8005640 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005636:	2300      	movs	r3, #0
 8005638:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	77bb      	strb	r3, [r7, #30]
        break;
 800563e:	bf00      	nop
    }

    if (pclk != 0U)
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d018      	beq.n	8005678 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	085a      	lsrs	r2, r3, #1
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	441a      	add	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	fbb2 f3f3 	udiv	r3, r2, r3
 8005658:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	2b0f      	cmp	r3, #15
 800565e:	d909      	bls.n	8005674 <UART_SetConfig+0x49c>
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005666:	d205      	bcs.n	8005674 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	b29a      	uxth	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	60da      	str	r2, [r3, #12]
 8005672:	e001      	b.n	8005678 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005684:	7fbb      	ldrb	r3, [r7, #30]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3720      	adds	r7, #32
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	40007c00 	.word	0x40007c00
 8005694:	40023800 	.word	0x40023800
 8005698:	00f42400 	.word	0x00f42400

0800569c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00a      	beq.n	80056c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	f003 0304 	and.w	r3, r3, #4
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00a      	beq.n	800570a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570e:	f003 0308 	and.w	r3, r3, #8
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00a      	beq.n	800572c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	f003 0310 	and.w	r3, r3, #16
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00a      	beq.n	800574e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00a      	beq.n	8005770 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	430a      	orrs	r2, r1
 800576e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005778:	2b00      	cmp	r3, #0
 800577a:	d01a      	beq.n	80057b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	430a      	orrs	r2, r1
 8005790:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800579a:	d10a      	bne.n	80057b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	430a      	orrs	r2, r1
 80057d2:	605a      	str	r2, [r3, #4]
  }
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af02      	add	r7, sp, #8
 80057e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057f0:	f7fc f940 	bl	8001a74 <HAL_GetTick>
 80057f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0308 	and.w	r3, r3, #8
 8005800:	2b08      	cmp	r3, #8
 8005802:	d10e      	bne.n	8005822 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005804:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f817 	bl	8005846 <UART_WaitOnFlagUntilTimeout>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e00d      	b.n	800583e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2220      	movs	r2, #32
 8005826:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2220      	movs	r2, #32
 800582c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b09c      	sub	sp, #112	; 0x70
 800584a:	af00      	add	r7, sp, #0
 800584c:	60f8      	str	r0, [r7, #12]
 800584e:	60b9      	str	r1, [r7, #8]
 8005850:	603b      	str	r3, [r7, #0]
 8005852:	4613      	mov	r3, r2
 8005854:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005856:	e0a5      	b.n	80059a4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800585a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585e:	f000 80a1 	beq.w	80059a4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005862:	f7fc f907 	bl	8001a74 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800586e:	429a      	cmp	r2, r3
 8005870:	d302      	bcc.n	8005878 <UART_WaitOnFlagUntilTimeout+0x32>
 8005872:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005874:	2b00      	cmp	r3, #0
 8005876:	d13e      	bne.n	80058f6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005880:	e853 3f00 	ldrex	r3, [r3]
 8005884:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005888:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800588c:	667b      	str	r3, [r7, #100]	; 0x64
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	461a      	mov	r2, r3
 8005894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005896:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005898:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800589c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800589e:	e841 2300 	strex	r3, r2, [r1]
 80058a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80058a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1e6      	bne.n	8005878 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	3308      	adds	r3, #8
 80058b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b4:	e853 3f00 	ldrex	r3, [r3]
 80058b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058bc:	f023 0301 	bic.w	r3, r3, #1
 80058c0:	663b      	str	r3, [r7, #96]	; 0x60
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	3308      	adds	r3, #8
 80058c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80058ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80058cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80058d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058d2:	e841 2300 	strex	r3, r2, [r1]
 80058d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80058d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1e5      	bne.n	80058aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2220      	movs	r2, #32
 80058e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2220      	movs	r2, #32
 80058e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e067      	b.n	80059c6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0304 	and.w	r3, r3, #4
 8005900:	2b00      	cmp	r3, #0
 8005902:	d04f      	beq.n	80059a4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800590e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005912:	d147      	bne.n	80059a4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800591c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005926:	e853 3f00 	ldrex	r3, [r3]
 800592a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005932:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	461a      	mov	r2, r3
 800593a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800593c:	637b      	str	r3, [r7, #52]	; 0x34
 800593e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005940:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005942:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005944:	e841 2300 	strex	r3, r2, [r1]
 8005948:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800594a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1e6      	bne.n	800591e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3308      	adds	r3, #8
 8005956:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	e853 3f00 	ldrex	r3, [r3]
 800595e:	613b      	str	r3, [r7, #16]
   return(result);
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f023 0301 	bic.w	r3, r3, #1
 8005966:	66bb      	str	r3, [r7, #104]	; 0x68
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3308      	adds	r3, #8
 800596e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005970:	623a      	str	r2, [r7, #32]
 8005972:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005974:	69f9      	ldr	r1, [r7, #28]
 8005976:	6a3a      	ldr	r2, [r7, #32]
 8005978:	e841 2300 	strex	r3, r2, [r1]
 800597c:	61bb      	str	r3, [r7, #24]
   return(result);
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1e5      	bne.n	8005950 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2220      	movs	r2, #32
 8005988:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2220      	movs	r2, #32
 800598e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2220      	movs	r2, #32
 8005994:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e010      	b.n	80059c6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	69da      	ldr	r2, [r3, #28]
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	4013      	ands	r3, r2
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	bf0c      	ite	eq
 80059b4:	2301      	moveq	r3, #1
 80059b6:	2300      	movne	r3, #0
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	461a      	mov	r2, r3
 80059bc:	79fb      	ldrb	r3, [r7, #7]
 80059be:	429a      	cmp	r2, r3
 80059c0:	f43f af4a 	beq.w	8005858 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3770      	adds	r7, #112	; 0x70
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
	...

080059d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059d0:	b084      	sub	sp, #16
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b084      	sub	sp, #16
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	f107 001c 	add.w	r0, r7, #28
 80059de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d120      	bne.n	8005a2a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68da      	ldr	r2, [r3, #12]
 80059f8:	4b20      	ldr	r3, [pc, #128]	; (8005a7c <USB_CoreInit+0xac>)
 80059fa:	4013      	ands	r3, r2
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d105      	bne.n	8005a1e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fa92 	bl	8005f48 <USB_CoreReset>
 8005a24:	4603      	mov	r3, r0
 8005a26:	73fb      	strb	r3, [r7, #15]
 8005a28:	e010      	b.n	8005a4c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fa86 	bl	8005f48 <USB_CoreReset>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a44:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d10b      	bne.n	8005a6a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f043 0206 	orr.w	r2, r3, #6
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f043 0220 	orr.w	r2, r3, #32
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a76:	b004      	add	sp, #16
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	ffbdffbf 	.word	0xffbdffbf

08005a80 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f023 0201 	bic.w	r2, r3, #1
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b084      	sub	sp, #16
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	460b      	mov	r3, r1
 8005aac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005abe:	78fb      	ldrb	r3, [r7, #3]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d115      	bne.n	8005af0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ad0:	2001      	movs	r0, #1
 8005ad2:	f7fb ffdb 	bl	8001a8c <HAL_Delay>
      ms++;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 fa25 	bl	8005f2c <USB_GetMode>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d01e      	beq.n	8005b26 <USB_SetCurrentMode+0x84>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2b31      	cmp	r3, #49	; 0x31
 8005aec:	d9f0      	bls.n	8005ad0 <USB_SetCurrentMode+0x2e>
 8005aee:	e01a      	b.n	8005b26 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005af0:	78fb      	ldrb	r3, [r7, #3]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d115      	bne.n	8005b22 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b02:	2001      	movs	r0, #1
 8005b04:	f7fb ffc2 	bl	8001a8c <HAL_Delay>
      ms++;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fa0c 	bl	8005f2c <USB_GetMode>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d005      	beq.n	8005b26 <USB_SetCurrentMode+0x84>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2b31      	cmp	r3, #49	; 0x31
 8005b1e:	d9f0      	bls.n	8005b02 <USB_SetCurrentMode+0x60>
 8005b20:	e001      	b.n	8005b26 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e005      	b.n	8005b32 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2b32      	cmp	r3, #50	; 0x32
 8005b2a:	d101      	bne.n	8005b30 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e000      	b.n	8005b32 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
	...

08005b3c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b3c:	b084      	sub	sp, #16
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b086      	sub	sp, #24
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
 8005b46:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005b4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b56:	2300      	movs	r3, #0
 8005b58:	613b      	str	r3, [r7, #16]
 8005b5a:	e009      	b.n	8005b70 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	3340      	adds	r3, #64	; 0x40
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	2200      	movs	r2, #0
 8005b68:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	613b      	str	r3, [r7, #16]
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	2b0e      	cmp	r3, #14
 8005b74:	d9f2      	bls.n	8005b5c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d11c      	bne.n	8005bb6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b8a:	f043 0302 	orr.w	r3, r3, #2
 8005b8e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b94:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	601a      	str	r2, [r3, #0]
 8005bb4:	e005      	b.n	8005bc2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bc8:	461a      	mov	r2, r3
 8005bca:	2300      	movs	r3, #0
 8005bcc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bdc:	461a      	mov	r2, r3
 8005bde:	680b      	ldr	r3, [r1, #0]
 8005be0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d10c      	bne.n	8005c02 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d104      	bne.n	8005bf8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005bee:	2100      	movs	r1, #0
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 f961 	bl	8005eb8 <USB_SetDevSpeed>
 8005bf6:	e008      	b.n	8005c0a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f95c 	bl	8005eb8 <USB_SetDevSpeed>
 8005c00:	e003      	b.n	8005c0a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005c02:	2103      	movs	r1, #3
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 f957 	bl	8005eb8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c0a:	2110      	movs	r1, #16
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f8f3 	bl	8005df8 <USB_FlushTxFifo>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f91d 	bl	8005e5c <USB_FlushRxFifo>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d001      	beq.n	8005c2c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c32:	461a      	mov	r2, r3
 8005c34:	2300      	movs	r3, #0
 8005c36:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3e:	461a      	mov	r2, r3
 8005c40:	2300      	movs	r3, #0
 8005c42:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c50:	2300      	movs	r3, #0
 8005c52:	613b      	str	r3, [r7, #16]
 8005c54:	e043      	b.n	8005cde <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c6c:	d118      	bne.n	8005ca0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10a      	bne.n	8005c8a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c80:	461a      	mov	r2, r3
 8005c82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	e013      	b.n	8005cb2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c96:	461a      	mov	r2, r3
 8005c98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c9c:	6013      	str	r3, [r2, #0]
 8005c9e:	e008      	b.n	8005cb2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cac:	461a      	mov	r2, r3
 8005cae:	2300      	movs	r3, #0
 8005cb0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cd6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	613b      	str	r3, [r7, #16]
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d3b7      	bcc.n	8005c56 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	613b      	str	r3, [r7, #16]
 8005cea:	e043      	b.n	8005d74 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d02:	d118      	bne.n	8005d36 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10a      	bne.n	8005d20 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	015a      	lsls	r2, r3, #5
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	4413      	add	r3, r2
 8005d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d16:	461a      	mov	r2, r3
 8005d18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d1c:	6013      	str	r3, [r2, #0]
 8005d1e:	e013      	b.n	8005d48 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	e008      	b.n	8005d48 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d42:	461a      	mov	r2, r3
 8005d44:	2300      	movs	r3, #0
 8005d46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d54:	461a      	mov	r2, r3
 8005d56:	2300      	movs	r3, #0
 8005d58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d66:	461a      	mov	r2, r3
 8005d68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	3301      	adds	r3, #1
 8005d72:	613b      	str	r3, [r7, #16]
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d3b7      	bcc.n	8005cec <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d8e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005d9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d105      	bne.n	8005db0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	f043 0210 	orr.w	r2, r3, #16
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	699a      	ldr	r2, [r3, #24]
 8005db4:	4b0e      	ldr	r3, [pc, #56]	; (8005df0 <USB_DevInit+0x2b4>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d005      	beq.n	8005dce <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	f043 0208 	orr.w	r2, r3, #8
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d105      	bne.n	8005de0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	699a      	ldr	r2, [r3, #24]
 8005dd8:	4b06      	ldr	r3, [pc, #24]	; (8005df4 <USB_DevInit+0x2b8>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3718      	adds	r7, #24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dec:	b004      	add	sp, #16
 8005dee:	4770      	bx	lr
 8005df0:	803c3800 	.word	0x803c3800
 8005df4:	40000004 	.word	0x40000004

08005df8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	60fb      	str	r3, [r7, #12]
 8005e0c:	4a12      	ldr	r2, [pc, #72]	; (8005e58 <USB_FlushTxFifo+0x60>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d901      	bls.n	8005e16 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e01a      	b.n	8005e4c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	daf3      	bge.n	8005e06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	019b      	lsls	r3, r3, #6
 8005e26:	f043 0220 	orr.w	r2, r3, #32
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	3301      	adds	r3, #1
 8005e32:	60fb      	str	r3, [r7, #12]
 8005e34:	4a08      	ldr	r2, [pc, #32]	; (8005e58 <USB_FlushTxFifo+0x60>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d901      	bls.n	8005e3e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e006      	b.n	8005e4c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	f003 0320 	and.w	r3, r3, #32
 8005e46:	2b20      	cmp	r3, #32
 8005e48:	d0f1      	beq.n	8005e2e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3714      	adds	r7, #20
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr
 8005e58:	00030d40 	.word	0x00030d40

08005e5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e64:	2300      	movs	r3, #0
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	60fb      	str	r3, [r7, #12]
 8005e6e:	4a11      	ldr	r2, [pc, #68]	; (8005eb4 <USB_FlushRxFifo+0x58>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d901      	bls.n	8005e78 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e017      	b.n	8005ea8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	daf3      	bge.n	8005e68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2210      	movs	r2, #16
 8005e88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	4a08      	ldr	r2, [pc, #32]	; (8005eb4 <USB_FlushRxFifo+0x58>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d901      	bls.n	8005e9a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e006      	b.n	8005ea8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	f003 0310 	and.w	r3, r3, #16
 8005ea2:	2b10      	cmp	r3, #16
 8005ea4:	d0f1      	beq.n	8005e8a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3714      	adds	r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	00030d40 	.word	0x00030d40

08005eb8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	78fb      	ldrb	r3, [r7, #3]
 8005ed2:	68f9      	ldr	r1, [r7, #12]
 8005ed4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b085      	sub	sp, #20
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f04:	f023 0303 	bic.w	r3, r3, #3
 8005f08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f18:	f043 0302 	orr.w	r3, r3, #2
 8005f1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	f003 0301 	and.w	r3, r3, #1
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f50:	2300      	movs	r3, #0
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	3301      	adds	r3, #1
 8005f58:	60fb      	str	r3, [r7, #12]
 8005f5a:	4a13      	ldr	r2, [pc, #76]	; (8005fa8 <USB_CoreReset+0x60>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d901      	bls.n	8005f64 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e01a      	b.n	8005f9a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	daf3      	bge.n	8005f54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	f043 0201 	orr.w	r2, r3, #1
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	4a09      	ldr	r2, [pc, #36]	; (8005fa8 <USB_CoreReset+0x60>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d901      	bls.n	8005f8c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e006      	b.n	8005f9a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d0f1      	beq.n	8005f7c <USB_CoreReset+0x34>

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	00030d40 	.word	0x00030d40

08005fac <__errno>:
 8005fac:	4b01      	ldr	r3, [pc, #4]	; (8005fb4 <__errno+0x8>)
 8005fae:	6818      	ldr	r0, [r3, #0]
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	2000000c 	.word	0x2000000c

08005fb8 <__libc_init_array>:
 8005fb8:	b570      	push	{r4, r5, r6, lr}
 8005fba:	4d0d      	ldr	r5, [pc, #52]	; (8005ff0 <__libc_init_array+0x38>)
 8005fbc:	4c0d      	ldr	r4, [pc, #52]	; (8005ff4 <__libc_init_array+0x3c>)
 8005fbe:	1b64      	subs	r4, r4, r5
 8005fc0:	10a4      	asrs	r4, r4, #2
 8005fc2:	2600      	movs	r6, #0
 8005fc4:	42a6      	cmp	r6, r4
 8005fc6:	d109      	bne.n	8005fdc <__libc_init_array+0x24>
 8005fc8:	4d0b      	ldr	r5, [pc, #44]	; (8005ff8 <__libc_init_array+0x40>)
 8005fca:	4c0c      	ldr	r4, [pc, #48]	; (8005ffc <__libc_init_array+0x44>)
 8005fcc:	f000 fc4e 	bl	800686c <_init>
 8005fd0:	1b64      	subs	r4, r4, r5
 8005fd2:	10a4      	asrs	r4, r4, #2
 8005fd4:	2600      	movs	r6, #0
 8005fd6:	42a6      	cmp	r6, r4
 8005fd8:	d105      	bne.n	8005fe6 <__libc_init_array+0x2e>
 8005fda:	bd70      	pop	{r4, r5, r6, pc}
 8005fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fe0:	4798      	blx	r3
 8005fe2:	3601      	adds	r6, #1
 8005fe4:	e7ee      	b.n	8005fc4 <__libc_init_array+0xc>
 8005fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fea:	4798      	blx	r3
 8005fec:	3601      	adds	r6, #1
 8005fee:	e7f2      	b.n	8005fd6 <__libc_init_array+0x1e>
 8005ff0:	08006924 	.word	0x08006924
 8005ff4:	08006924 	.word	0x08006924
 8005ff8:	08006924 	.word	0x08006924
 8005ffc:	08006928 	.word	0x08006928

08006000 <memset>:
 8006000:	4402      	add	r2, r0
 8006002:	4603      	mov	r3, r0
 8006004:	4293      	cmp	r3, r2
 8006006:	d100      	bne.n	800600a <memset+0xa>
 8006008:	4770      	bx	lr
 800600a:	f803 1b01 	strb.w	r1, [r3], #1
 800600e:	e7f9      	b.n	8006004 <memset+0x4>

08006010 <siprintf>:
 8006010:	b40e      	push	{r1, r2, r3}
 8006012:	b500      	push	{lr}
 8006014:	b09c      	sub	sp, #112	; 0x70
 8006016:	ab1d      	add	r3, sp, #116	; 0x74
 8006018:	9002      	str	r0, [sp, #8]
 800601a:	9006      	str	r0, [sp, #24]
 800601c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006020:	4809      	ldr	r0, [pc, #36]	; (8006048 <siprintf+0x38>)
 8006022:	9107      	str	r1, [sp, #28]
 8006024:	9104      	str	r1, [sp, #16]
 8006026:	4909      	ldr	r1, [pc, #36]	; (800604c <siprintf+0x3c>)
 8006028:	f853 2b04 	ldr.w	r2, [r3], #4
 800602c:	9105      	str	r1, [sp, #20]
 800602e:	6800      	ldr	r0, [r0, #0]
 8006030:	9301      	str	r3, [sp, #4]
 8006032:	a902      	add	r1, sp, #8
 8006034:	f000 f868 	bl	8006108 <_svfiprintf_r>
 8006038:	9b02      	ldr	r3, [sp, #8]
 800603a:	2200      	movs	r2, #0
 800603c:	701a      	strb	r2, [r3, #0]
 800603e:	b01c      	add	sp, #112	; 0x70
 8006040:	f85d eb04 	ldr.w	lr, [sp], #4
 8006044:	b003      	add	sp, #12
 8006046:	4770      	bx	lr
 8006048:	2000000c 	.word	0x2000000c
 800604c:	ffff0208 	.word	0xffff0208

08006050 <__ssputs_r>:
 8006050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006054:	688e      	ldr	r6, [r1, #8]
 8006056:	429e      	cmp	r6, r3
 8006058:	4682      	mov	sl, r0
 800605a:	460c      	mov	r4, r1
 800605c:	4690      	mov	r8, r2
 800605e:	461f      	mov	r7, r3
 8006060:	d838      	bhi.n	80060d4 <__ssputs_r+0x84>
 8006062:	898a      	ldrh	r2, [r1, #12]
 8006064:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006068:	d032      	beq.n	80060d0 <__ssputs_r+0x80>
 800606a:	6825      	ldr	r5, [r4, #0]
 800606c:	6909      	ldr	r1, [r1, #16]
 800606e:	eba5 0901 	sub.w	r9, r5, r1
 8006072:	6965      	ldr	r5, [r4, #20]
 8006074:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006078:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800607c:	3301      	adds	r3, #1
 800607e:	444b      	add	r3, r9
 8006080:	106d      	asrs	r5, r5, #1
 8006082:	429d      	cmp	r5, r3
 8006084:	bf38      	it	cc
 8006086:	461d      	movcc	r5, r3
 8006088:	0553      	lsls	r3, r2, #21
 800608a:	d531      	bpl.n	80060f0 <__ssputs_r+0xa0>
 800608c:	4629      	mov	r1, r5
 800608e:	f000 fb47 	bl	8006720 <_malloc_r>
 8006092:	4606      	mov	r6, r0
 8006094:	b950      	cbnz	r0, 80060ac <__ssputs_r+0x5c>
 8006096:	230c      	movs	r3, #12
 8006098:	f8ca 3000 	str.w	r3, [sl]
 800609c:	89a3      	ldrh	r3, [r4, #12]
 800609e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060a2:	81a3      	strh	r3, [r4, #12]
 80060a4:	f04f 30ff 	mov.w	r0, #4294967295
 80060a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ac:	6921      	ldr	r1, [r4, #16]
 80060ae:	464a      	mov	r2, r9
 80060b0:	f000 fabe 	bl	8006630 <memcpy>
 80060b4:	89a3      	ldrh	r3, [r4, #12]
 80060b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80060ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060be:	81a3      	strh	r3, [r4, #12]
 80060c0:	6126      	str	r6, [r4, #16]
 80060c2:	6165      	str	r5, [r4, #20]
 80060c4:	444e      	add	r6, r9
 80060c6:	eba5 0509 	sub.w	r5, r5, r9
 80060ca:	6026      	str	r6, [r4, #0]
 80060cc:	60a5      	str	r5, [r4, #8]
 80060ce:	463e      	mov	r6, r7
 80060d0:	42be      	cmp	r6, r7
 80060d2:	d900      	bls.n	80060d6 <__ssputs_r+0x86>
 80060d4:	463e      	mov	r6, r7
 80060d6:	4632      	mov	r2, r6
 80060d8:	6820      	ldr	r0, [r4, #0]
 80060da:	4641      	mov	r1, r8
 80060dc:	f000 fab6 	bl	800664c <memmove>
 80060e0:	68a3      	ldr	r3, [r4, #8]
 80060e2:	6822      	ldr	r2, [r4, #0]
 80060e4:	1b9b      	subs	r3, r3, r6
 80060e6:	4432      	add	r2, r6
 80060e8:	60a3      	str	r3, [r4, #8]
 80060ea:	6022      	str	r2, [r4, #0]
 80060ec:	2000      	movs	r0, #0
 80060ee:	e7db      	b.n	80060a8 <__ssputs_r+0x58>
 80060f0:	462a      	mov	r2, r5
 80060f2:	f000 fb6f 	bl	80067d4 <_realloc_r>
 80060f6:	4606      	mov	r6, r0
 80060f8:	2800      	cmp	r0, #0
 80060fa:	d1e1      	bne.n	80060c0 <__ssputs_r+0x70>
 80060fc:	6921      	ldr	r1, [r4, #16]
 80060fe:	4650      	mov	r0, sl
 8006100:	f000 fabe 	bl	8006680 <_free_r>
 8006104:	e7c7      	b.n	8006096 <__ssputs_r+0x46>
	...

08006108 <_svfiprintf_r>:
 8006108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800610c:	4698      	mov	r8, r3
 800610e:	898b      	ldrh	r3, [r1, #12]
 8006110:	061b      	lsls	r3, r3, #24
 8006112:	b09d      	sub	sp, #116	; 0x74
 8006114:	4607      	mov	r7, r0
 8006116:	460d      	mov	r5, r1
 8006118:	4614      	mov	r4, r2
 800611a:	d50e      	bpl.n	800613a <_svfiprintf_r+0x32>
 800611c:	690b      	ldr	r3, [r1, #16]
 800611e:	b963      	cbnz	r3, 800613a <_svfiprintf_r+0x32>
 8006120:	2140      	movs	r1, #64	; 0x40
 8006122:	f000 fafd 	bl	8006720 <_malloc_r>
 8006126:	6028      	str	r0, [r5, #0]
 8006128:	6128      	str	r0, [r5, #16]
 800612a:	b920      	cbnz	r0, 8006136 <_svfiprintf_r+0x2e>
 800612c:	230c      	movs	r3, #12
 800612e:	603b      	str	r3, [r7, #0]
 8006130:	f04f 30ff 	mov.w	r0, #4294967295
 8006134:	e0d1      	b.n	80062da <_svfiprintf_r+0x1d2>
 8006136:	2340      	movs	r3, #64	; 0x40
 8006138:	616b      	str	r3, [r5, #20]
 800613a:	2300      	movs	r3, #0
 800613c:	9309      	str	r3, [sp, #36]	; 0x24
 800613e:	2320      	movs	r3, #32
 8006140:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006144:	f8cd 800c 	str.w	r8, [sp, #12]
 8006148:	2330      	movs	r3, #48	; 0x30
 800614a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80062f4 <_svfiprintf_r+0x1ec>
 800614e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006152:	f04f 0901 	mov.w	r9, #1
 8006156:	4623      	mov	r3, r4
 8006158:	469a      	mov	sl, r3
 800615a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800615e:	b10a      	cbz	r2, 8006164 <_svfiprintf_r+0x5c>
 8006160:	2a25      	cmp	r2, #37	; 0x25
 8006162:	d1f9      	bne.n	8006158 <_svfiprintf_r+0x50>
 8006164:	ebba 0b04 	subs.w	fp, sl, r4
 8006168:	d00b      	beq.n	8006182 <_svfiprintf_r+0x7a>
 800616a:	465b      	mov	r3, fp
 800616c:	4622      	mov	r2, r4
 800616e:	4629      	mov	r1, r5
 8006170:	4638      	mov	r0, r7
 8006172:	f7ff ff6d 	bl	8006050 <__ssputs_r>
 8006176:	3001      	adds	r0, #1
 8006178:	f000 80aa 	beq.w	80062d0 <_svfiprintf_r+0x1c8>
 800617c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800617e:	445a      	add	r2, fp
 8006180:	9209      	str	r2, [sp, #36]	; 0x24
 8006182:	f89a 3000 	ldrb.w	r3, [sl]
 8006186:	2b00      	cmp	r3, #0
 8006188:	f000 80a2 	beq.w	80062d0 <_svfiprintf_r+0x1c8>
 800618c:	2300      	movs	r3, #0
 800618e:	f04f 32ff 	mov.w	r2, #4294967295
 8006192:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006196:	f10a 0a01 	add.w	sl, sl, #1
 800619a:	9304      	str	r3, [sp, #16]
 800619c:	9307      	str	r3, [sp, #28]
 800619e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061a2:	931a      	str	r3, [sp, #104]	; 0x68
 80061a4:	4654      	mov	r4, sl
 80061a6:	2205      	movs	r2, #5
 80061a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ac:	4851      	ldr	r0, [pc, #324]	; (80062f4 <_svfiprintf_r+0x1ec>)
 80061ae:	f7fa f82f 	bl	8000210 <memchr>
 80061b2:	9a04      	ldr	r2, [sp, #16]
 80061b4:	b9d8      	cbnz	r0, 80061ee <_svfiprintf_r+0xe6>
 80061b6:	06d0      	lsls	r0, r2, #27
 80061b8:	bf44      	itt	mi
 80061ba:	2320      	movmi	r3, #32
 80061bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061c0:	0711      	lsls	r1, r2, #28
 80061c2:	bf44      	itt	mi
 80061c4:	232b      	movmi	r3, #43	; 0x2b
 80061c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061ca:	f89a 3000 	ldrb.w	r3, [sl]
 80061ce:	2b2a      	cmp	r3, #42	; 0x2a
 80061d0:	d015      	beq.n	80061fe <_svfiprintf_r+0xf6>
 80061d2:	9a07      	ldr	r2, [sp, #28]
 80061d4:	4654      	mov	r4, sl
 80061d6:	2000      	movs	r0, #0
 80061d8:	f04f 0c0a 	mov.w	ip, #10
 80061dc:	4621      	mov	r1, r4
 80061de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061e2:	3b30      	subs	r3, #48	; 0x30
 80061e4:	2b09      	cmp	r3, #9
 80061e6:	d94e      	bls.n	8006286 <_svfiprintf_r+0x17e>
 80061e8:	b1b0      	cbz	r0, 8006218 <_svfiprintf_r+0x110>
 80061ea:	9207      	str	r2, [sp, #28]
 80061ec:	e014      	b.n	8006218 <_svfiprintf_r+0x110>
 80061ee:	eba0 0308 	sub.w	r3, r0, r8
 80061f2:	fa09 f303 	lsl.w	r3, r9, r3
 80061f6:	4313      	orrs	r3, r2
 80061f8:	9304      	str	r3, [sp, #16]
 80061fa:	46a2      	mov	sl, r4
 80061fc:	e7d2      	b.n	80061a4 <_svfiprintf_r+0x9c>
 80061fe:	9b03      	ldr	r3, [sp, #12]
 8006200:	1d19      	adds	r1, r3, #4
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	9103      	str	r1, [sp, #12]
 8006206:	2b00      	cmp	r3, #0
 8006208:	bfbb      	ittet	lt
 800620a:	425b      	neglt	r3, r3
 800620c:	f042 0202 	orrlt.w	r2, r2, #2
 8006210:	9307      	strge	r3, [sp, #28]
 8006212:	9307      	strlt	r3, [sp, #28]
 8006214:	bfb8      	it	lt
 8006216:	9204      	strlt	r2, [sp, #16]
 8006218:	7823      	ldrb	r3, [r4, #0]
 800621a:	2b2e      	cmp	r3, #46	; 0x2e
 800621c:	d10c      	bne.n	8006238 <_svfiprintf_r+0x130>
 800621e:	7863      	ldrb	r3, [r4, #1]
 8006220:	2b2a      	cmp	r3, #42	; 0x2a
 8006222:	d135      	bne.n	8006290 <_svfiprintf_r+0x188>
 8006224:	9b03      	ldr	r3, [sp, #12]
 8006226:	1d1a      	adds	r2, r3, #4
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	9203      	str	r2, [sp, #12]
 800622c:	2b00      	cmp	r3, #0
 800622e:	bfb8      	it	lt
 8006230:	f04f 33ff 	movlt.w	r3, #4294967295
 8006234:	3402      	adds	r4, #2
 8006236:	9305      	str	r3, [sp, #20]
 8006238:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006304 <_svfiprintf_r+0x1fc>
 800623c:	7821      	ldrb	r1, [r4, #0]
 800623e:	2203      	movs	r2, #3
 8006240:	4650      	mov	r0, sl
 8006242:	f7f9 ffe5 	bl	8000210 <memchr>
 8006246:	b140      	cbz	r0, 800625a <_svfiprintf_r+0x152>
 8006248:	2340      	movs	r3, #64	; 0x40
 800624a:	eba0 000a 	sub.w	r0, r0, sl
 800624e:	fa03 f000 	lsl.w	r0, r3, r0
 8006252:	9b04      	ldr	r3, [sp, #16]
 8006254:	4303      	orrs	r3, r0
 8006256:	3401      	adds	r4, #1
 8006258:	9304      	str	r3, [sp, #16]
 800625a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800625e:	4826      	ldr	r0, [pc, #152]	; (80062f8 <_svfiprintf_r+0x1f0>)
 8006260:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006264:	2206      	movs	r2, #6
 8006266:	f7f9 ffd3 	bl	8000210 <memchr>
 800626a:	2800      	cmp	r0, #0
 800626c:	d038      	beq.n	80062e0 <_svfiprintf_r+0x1d8>
 800626e:	4b23      	ldr	r3, [pc, #140]	; (80062fc <_svfiprintf_r+0x1f4>)
 8006270:	bb1b      	cbnz	r3, 80062ba <_svfiprintf_r+0x1b2>
 8006272:	9b03      	ldr	r3, [sp, #12]
 8006274:	3307      	adds	r3, #7
 8006276:	f023 0307 	bic.w	r3, r3, #7
 800627a:	3308      	adds	r3, #8
 800627c:	9303      	str	r3, [sp, #12]
 800627e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006280:	4433      	add	r3, r6
 8006282:	9309      	str	r3, [sp, #36]	; 0x24
 8006284:	e767      	b.n	8006156 <_svfiprintf_r+0x4e>
 8006286:	fb0c 3202 	mla	r2, ip, r2, r3
 800628a:	460c      	mov	r4, r1
 800628c:	2001      	movs	r0, #1
 800628e:	e7a5      	b.n	80061dc <_svfiprintf_r+0xd4>
 8006290:	2300      	movs	r3, #0
 8006292:	3401      	adds	r4, #1
 8006294:	9305      	str	r3, [sp, #20]
 8006296:	4619      	mov	r1, r3
 8006298:	f04f 0c0a 	mov.w	ip, #10
 800629c:	4620      	mov	r0, r4
 800629e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062a2:	3a30      	subs	r2, #48	; 0x30
 80062a4:	2a09      	cmp	r2, #9
 80062a6:	d903      	bls.n	80062b0 <_svfiprintf_r+0x1a8>
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d0c5      	beq.n	8006238 <_svfiprintf_r+0x130>
 80062ac:	9105      	str	r1, [sp, #20]
 80062ae:	e7c3      	b.n	8006238 <_svfiprintf_r+0x130>
 80062b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80062b4:	4604      	mov	r4, r0
 80062b6:	2301      	movs	r3, #1
 80062b8:	e7f0      	b.n	800629c <_svfiprintf_r+0x194>
 80062ba:	ab03      	add	r3, sp, #12
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	462a      	mov	r2, r5
 80062c0:	4b0f      	ldr	r3, [pc, #60]	; (8006300 <_svfiprintf_r+0x1f8>)
 80062c2:	a904      	add	r1, sp, #16
 80062c4:	4638      	mov	r0, r7
 80062c6:	f3af 8000 	nop.w
 80062ca:	1c42      	adds	r2, r0, #1
 80062cc:	4606      	mov	r6, r0
 80062ce:	d1d6      	bne.n	800627e <_svfiprintf_r+0x176>
 80062d0:	89ab      	ldrh	r3, [r5, #12]
 80062d2:	065b      	lsls	r3, r3, #25
 80062d4:	f53f af2c 	bmi.w	8006130 <_svfiprintf_r+0x28>
 80062d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062da:	b01d      	add	sp, #116	; 0x74
 80062dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062e0:	ab03      	add	r3, sp, #12
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	462a      	mov	r2, r5
 80062e6:	4b06      	ldr	r3, [pc, #24]	; (8006300 <_svfiprintf_r+0x1f8>)
 80062e8:	a904      	add	r1, sp, #16
 80062ea:	4638      	mov	r0, r7
 80062ec:	f000 f87a 	bl	80063e4 <_printf_i>
 80062f0:	e7eb      	b.n	80062ca <_svfiprintf_r+0x1c2>
 80062f2:	bf00      	nop
 80062f4:	080068e8 	.word	0x080068e8
 80062f8:	080068f2 	.word	0x080068f2
 80062fc:	00000000 	.word	0x00000000
 8006300:	08006051 	.word	0x08006051
 8006304:	080068ee 	.word	0x080068ee

08006308 <_printf_common>:
 8006308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800630c:	4616      	mov	r6, r2
 800630e:	4699      	mov	r9, r3
 8006310:	688a      	ldr	r2, [r1, #8]
 8006312:	690b      	ldr	r3, [r1, #16]
 8006314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006318:	4293      	cmp	r3, r2
 800631a:	bfb8      	it	lt
 800631c:	4613      	movlt	r3, r2
 800631e:	6033      	str	r3, [r6, #0]
 8006320:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006324:	4607      	mov	r7, r0
 8006326:	460c      	mov	r4, r1
 8006328:	b10a      	cbz	r2, 800632e <_printf_common+0x26>
 800632a:	3301      	adds	r3, #1
 800632c:	6033      	str	r3, [r6, #0]
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	0699      	lsls	r1, r3, #26
 8006332:	bf42      	ittt	mi
 8006334:	6833      	ldrmi	r3, [r6, #0]
 8006336:	3302      	addmi	r3, #2
 8006338:	6033      	strmi	r3, [r6, #0]
 800633a:	6825      	ldr	r5, [r4, #0]
 800633c:	f015 0506 	ands.w	r5, r5, #6
 8006340:	d106      	bne.n	8006350 <_printf_common+0x48>
 8006342:	f104 0a19 	add.w	sl, r4, #25
 8006346:	68e3      	ldr	r3, [r4, #12]
 8006348:	6832      	ldr	r2, [r6, #0]
 800634a:	1a9b      	subs	r3, r3, r2
 800634c:	42ab      	cmp	r3, r5
 800634e:	dc26      	bgt.n	800639e <_printf_common+0x96>
 8006350:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006354:	1e13      	subs	r3, r2, #0
 8006356:	6822      	ldr	r2, [r4, #0]
 8006358:	bf18      	it	ne
 800635a:	2301      	movne	r3, #1
 800635c:	0692      	lsls	r2, r2, #26
 800635e:	d42b      	bmi.n	80063b8 <_printf_common+0xb0>
 8006360:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006364:	4649      	mov	r1, r9
 8006366:	4638      	mov	r0, r7
 8006368:	47c0      	blx	r8
 800636a:	3001      	adds	r0, #1
 800636c:	d01e      	beq.n	80063ac <_printf_common+0xa4>
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	68e5      	ldr	r5, [r4, #12]
 8006372:	6832      	ldr	r2, [r6, #0]
 8006374:	f003 0306 	and.w	r3, r3, #6
 8006378:	2b04      	cmp	r3, #4
 800637a:	bf08      	it	eq
 800637c:	1aad      	subeq	r5, r5, r2
 800637e:	68a3      	ldr	r3, [r4, #8]
 8006380:	6922      	ldr	r2, [r4, #16]
 8006382:	bf0c      	ite	eq
 8006384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006388:	2500      	movne	r5, #0
 800638a:	4293      	cmp	r3, r2
 800638c:	bfc4      	itt	gt
 800638e:	1a9b      	subgt	r3, r3, r2
 8006390:	18ed      	addgt	r5, r5, r3
 8006392:	2600      	movs	r6, #0
 8006394:	341a      	adds	r4, #26
 8006396:	42b5      	cmp	r5, r6
 8006398:	d11a      	bne.n	80063d0 <_printf_common+0xc8>
 800639a:	2000      	movs	r0, #0
 800639c:	e008      	b.n	80063b0 <_printf_common+0xa8>
 800639e:	2301      	movs	r3, #1
 80063a0:	4652      	mov	r2, sl
 80063a2:	4649      	mov	r1, r9
 80063a4:	4638      	mov	r0, r7
 80063a6:	47c0      	blx	r8
 80063a8:	3001      	adds	r0, #1
 80063aa:	d103      	bne.n	80063b4 <_printf_common+0xac>
 80063ac:	f04f 30ff 	mov.w	r0, #4294967295
 80063b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063b4:	3501      	adds	r5, #1
 80063b6:	e7c6      	b.n	8006346 <_printf_common+0x3e>
 80063b8:	18e1      	adds	r1, r4, r3
 80063ba:	1c5a      	adds	r2, r3, #1
 80063bc:	2030      	movs	r0, #48	; 0x30
 80063be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063c2:	4422      	add	r2, r4
 80063c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063cc:	3302      	adds	r3, #2
 80063ce:	e7c7      	b.n	8006360 <_printf_common+0x58>
 80063d0:	2301      	movs	r3, #1
 80063d2:	4622      	mov	r2, r4
 80063d4:	4649      	mov	r1, r9
 80063d6:	4638      	mov	r0, r7
 80063d8:	47c0      	blx	r8
 80063da:	3001      	adds	r0, #1
 80063dc:	d0e6      	beq.n	80063ac <_printf_common+0xa4>
 80063de:	3601      	adds	r6, #1
 80063e0:	e7d9      	b.n	8006396 <_printf_common+0x8e>
	...

080063e4 <_printf_i>:
 80063e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063e8:	460c      	mov	r4, r1
 80063ea:	4691      	mov	r9, r2
 80063ec:	7e27      	ldrb	r7, [r4, #24]
 80063ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80063f0:	2f78      	cmp	r7, #120	; 0x78
 80063f2:	4680      	mov	r8, r0
 80063f4:	469a      	mov	sl, r3
 80063f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063fa:	d807      	bhi.n	800640c <_printf_i+0x28>
 80063fc:	2f62      	cmp	r7, #98	; 0x62
 80063fe:	d80a      	bhi.n	8006416 <_printf_i+0x32>
 8006400:	2f00      	cmp	r7, #0
 8006402:	f000 80d8 	beq.w	80065b6 <_printf_i+0x1d2>
 8006406:	2f58      	cmp	r7, #88	; 0x58
 8006408:	f000 80a3 	beq.w	8006552 <_printf_i+0x16e>
 800640c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006410:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006414:	e03a      	b.n	800648c <_printf_i+0xa8>
 8006416:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800641a:	2b15      	cmp	r3, #21
 800641c:	d8f6      	bhi.n	800640c <_printf_i+0x28>
 800641e:	a001      	add	r0, pc, #4	; (adr r0, 8006424 <_printf_i+0x40>)
 8006420:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006424:	0800647d 	.word	0x0800647d
 8006428:	08006491 	.word	0x08006491
 800642c:	0800640d 	.word	0x0800640d
 8006430:	0800640d 	.word	0x0800640d
 8006434:	0800640d 	.word	0x0800640d
 8006438:	0800640d 	.word	0x0800640d
 800643c:	08006491 	.word	0x08006491
 8006440:	0800640d 	.word	0x0800640d
 8006444:	0800640d 	.word	0x0800640d
 8006448:	0800640d 	.word	0x0800640d
 800644c:	0800640d 	.word	0x0800640d
 8006450:	0800659d 	.word	0x0800659d
 8006454:	080064c1 	.word	0x080064c1
 8006458:	0800657f 	.word	0x0800657f
 800645c:	0800640d 	.word	0x0800640d
 8006460:	0800640d 	.word	0x0800640d
 8006464:	080065bf 	.word	0x080065bf
 8006468:	0800640d 	.word	0x0800640d
 800646c:	080064c1 	.word	0x080064c1
 8006470:	0800640d 	.word	0x0800640d
 8006474:	0800640d 	.word	0x0800640d
 8006478:	08006587 	.word	0x08006587
 800647c:	680b      	ldr	r3, [r1, #0]
 800647e:	1d1a      	adds	r2, r3, #4
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	600a      	str	r2, [r1, #0]
 8006484:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800648c:	2301      	movs	r3, #1
 800648e:	e0a3      	b.n	80065d8 <_printf_i+0x1f4>
 8006490:	6825      	ldr	r5, [r4, #0]
 8006492:	6808      	ldr	r0, [r1, #0]
 8006494:	062e      	lsls	r6, r5, #24
 8006496:	f100 0304 	add.w	r3, r0, #4
 800649a:	d50a      	bpl.n	80064b2 <_printf_i+0xce>
 800649c:	6805      	ldr	r5, [r0, #0]
 800649e:	600b      	str	r3, [r1, #0]
 80064a0:	2d00      	cmp	r5, #0
 80064a2:	da03      	bge.n	80064ac <_printf_i+0xc8>
 80064a4:	232d      	movs	r3, #45	; 0x2d
 80064a6:	426d      	negs	r5, r5
 80064a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064ac:	485e      	ldr	r0, [pc, #376]	; (8006628 <_printf_i+0x244>)
 80064ae:	230a      	movs	r3, #10
 80064b0:	e019      	b.n	80064e6 <_printf_i+0x102>
 80064b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80064b6:	6805      	ldr	r5, [r0, #0]
 80064b8:	600b      	str	r3, [r1, #0]
 80064ba:	bf18      	it	ne
 80064bc:	b22d      	sxthne	r5, r5
 80064be:	e7ef      	b.n	80064a0 <_printf_i+0xbc>
 80064c0:	680b      	ldr	r3, [r1, #0]
 80064c2:	6825      	ldr	r5, [r4, #0]
 80064c4:	1d18      	adds	r0, r3, #4
 80064c6:	6008      	str	r0, [r1, #0]
 80064c8:	0628      	lsls	r0, r5, #24
 80064ca:	d501      	bpl.n	80064d0 <_printf_i+0xec>
 80064cc:	681d      	ldr	r5, [r3, #0]
 80064ce:	e002      	b.n	80064d6 <_printf_i+0xf2>
 80064d0:	0669      	lsls	r1, r5, #25
 80064d2:	d5fb      	bpl.n	80064cc <_printf_i+0xe8>
 80064d4:	881d      	ldrh	r5, [r3, #0]
 80064d6:	4854      	ldr	r0, [pc, #336]	; (8006628 <_printf_i+0x244>)
 80064d8:	2f6f      	cmp	r7, #111	; 0x6f
 80064da:	bf0c      	ite	eq
 80064dc:	2308      	moveq	r3, #8
 80064de:	230a      	movne	r3, #10
 80064e0:	2100      	movs	r1, #0
 80064e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064e6:	6866      	ldr	r6, [r4, #4]
 80064e8:	60a6      	str	r6, [r4, #8]
 80064ea:	2e00      	cmp	r6, #0
 80064ec:	bfa2      	ittt	ge
 80064ee:	6821      	ldrge	r1, [r4, #0]
 80064f0:	f021 0104 	bicge.w	r1, r1, #4
 80064f4:	6021      	strge	r1, [r4, #0]
 80064f6:	b90d      	cbnz	r5, 80064fc <_printf_i+0x118>
 80064f8:	2e00      	cmp	r6, #0
 80064fa:	d04d      	beq.n	8006598 <_printf_i+0x1b4>
 80064fc:	4616      	mov	r6, r2
 80064fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006502:	fb03 5711 	mls	r7, r3, r1, r5
 8006506:	5dc7      	ldrb	r7, [r0, r7]
 8006508:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800650c:	462f      	mov	r7, r5
 800650e:	42bb      	cmp	r3, r7
 8006510:	460d      	mov	r5, r1
 8006512:	d9f4      	bls.n	80064fe <_printf_i+0x11a>
 8006514:	2b08      	cmp	r3, #8
 8006516:	d10b      	bne.n	8006530 <_printf_i+0x14c>
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	07df      	lsls	r7, r3, #31
 800651c:	d508      	bpl.n	8006530 <_printf_i+0x14c>
 800651e:	6923      	ldr	r3, [r4, #16]
 8006520:	6861      	ldr	r1, [r4, #4]
 8006522:	4299      	cmp	r1, r3
 8006524:	bfde      	ittt	le
 8006526:	2330      	movle	r3, #48	; 0x30
 8006528:	f806 3c01 	strble.w	r3, [r6, #-1]
 800652c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006530:	1b92      	subs	r2, r2, r6
 8006532:	6122      	str	r2, [r4, #16]
 8006534:	f8cd a000 	str.w	sl, [sp]
 8006538:	464b      	mov	r3, r9
 800653a:	aa03      	add	r2, sp, #12
 800653c:	4621      	mov	r1, r4
 800653e:	4640      	mov	r0, r8
 8006540:	f7ff fee2 	bl	8006308 <_printf_common>
 8006544:	3001      	adds	r0, #1
 8006546:	d14c      	bne.n	80065e2 <_printf_i+0x1fe>
 8006548:	f04f 30ff 	mov.w	r0, #4294967295
 800654c:	b004      	add	sp, #16
 800654e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006552:	4835      	ldr	r0, [pc, #212]	; (8006628 <_printf_i+0x244>)
 8006554:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006558:	6823      	ldr	r3, [r4, #0]
 800655a:	680e      	ldr	r6, [r1, #0]
 800655c:	061f      	lsls	r7, r3, #24
 800655e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006562:	600e      	str	r6, [r1, #0]
 8006564:	d514      	bpl.n	8006590 <_printf_i+0x1ac>
 8006566:	07d9      	lsls	r1, r3, #31
 8006568:	bf44      	itt	mi
 800656a:	f043 0320 	orrmi.w	r3, r3, #32
 800656e:	6023      	strmi	r3, [r4, #0]
 8006570:	b91d      	cbnz	r5, 800657a <_printf_i+0x196>
 8006572:	6823      	ldr	r3, [r4, #0]
 8006574:	f023 0320 	bic.w	r3, r3, #32
 8006578:	6023      	str	r3, [r4, #0]
 800657a:	2310      	movs	r3, #16
 800657c:	e7b0      	b.n	80064e0 <_printf_i+0xfc>
 800657e:	6823      	ldr	r3, [r4, #0]
 8006580:	f043 0320 	orr.w	r3, r3, #32
 8006584:	6023      	str	r3, [r4, #0]
 8006586:	2378      	movs	r3, #120	; 0x78
 8006588:	4828      	ldr	r0, [pc, #160]	; (800662c <_printf_i+0x248>)
 800658a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800658e:	e7e3      	b.n	8006558 <_printf_i+0x174>
 8006590:	065e      	lsls	r6, r3, #25
 8006592:	bf48      	it	mi
 8006594:	b2ad      	uxthmi	r5, r5
 8006596:	e7e6      	b.n	8006566 <_printf_i+0x182>
 8006598:	4616      	mov	r6, r2
 800659a:	e7bb      	b.n	8006514 <_printf_i+0x130>
 800659c:	680b      	ldr	r3, [r1, #0]
 800659e:	6826      	ldr	r6, [r4, #0]
 80065a0:	6960      	ldr	r0, [r4, #20]
 80065a2:	1d1d      	adds	r5, r3, #4
 80065a4:	600d      	str	r5, [r1, #0]
 80065a6:	0635      	lsls	r5, r6, #24
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	d501      	bpl.n	80065b0 <_printf_i+0x1cc>
 80065ac:	6018      	str	r0, [r3, #0]
 80065ae:	e002      	b.n	80065b6 <_printf_i+0x1d2>
 80065b0:	0671      	lsls	r1, r6, #25
 80065b2:	d5fb      	bpl.n	80065ac <_printf_i+0x1c8>
 80065b4:	8018      	strh	r0, [r3, #0]
 80065b6:	2300      	movs	r3, #0
 80065b8:	6123      	str	r3, [r4, #16]
 80065ba:	4616      	mov	r6, r2
 80065bc:	e7ba      	b.n	8006534 <_printf_i+0x150>
 80065be:	680b      	ldr	r3, [r1, #0]
 80065c0:	1d1a      	adds	r2, r3, #4
 80065c2:	600a      	str	r2, [r1, #0]
 80065c4:	681e      	ldr	r6, [r3, #0]
 80065c6:	6862      	ldr	r2, [r4, #4]
 80065c8:	2100      	movs	r1, #0
 80065ca:	4630      	mov	r0, r6
 80065cc:	f7f9 fe20 	bl	8000210 <memchr>
 80065d0:	b108      	cbz	r0, 80065d6 <_printf_i+0x1f2>
 80065d2:	1b80      	subs	r0, r0, r6
 80065d4:	6060      	str	r0, [r4, #4]
 80065d6:	6863      	ldr	r3, [r4, #4]
 80065d8:	6123      	str	r3, [r4, #16]
 80065da:	2300      	movs	r3, #0
 80065dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065e0:	e7a8      	b.n	8006534 <_printf_i+0x150>
 80065e2:	6923      	ldr	r3, [r4, #16]
 80065e4:	4632      	mov	r2, r6
 80065e6:	4649      	mov	r1, r9
 80065e8:	4640      	mov	r0, r8
 80065ea:	47d0      	blx	sl
 80065ec:	3001      	adds	r0, #1
 80065ee:	d0ab      	beq.n	8006548 <_printf_i+0x164>
 80065f0:	6823      	ldr	r3, [r4, #0]
 80065f2:	079b      	lsls	r3, r3, #30
 80065f4:	d413      	bmi.n	800661e <_printf_i+0x23a>
 80065f6:	68e0      	ldr	r0, [r4, #12]
 80065f8:	9b03      	ldr	r3, [sp, #12]
 80065fa:	4298      	cmp	r0, r3
 80065fc:	bfb8      	it	lt
 80065fe:	4618      	movlt	r0, r3
 8006600:	e7a4      	b.n	800654c <_printf_i+0x168>
 8006602:	2301      	movs	r3, #1
 8006604:	4632      	mov	r2, r6
 8006606:	4649      	mov	r1, r9
 8006608:	4640      	mov	r0, r8
 800660a:	47d0      	blx	sl
 800660c:	3001      	adds	r0, #1
 800660e:	d09b      	beq.n	8006548 <_printf_i+0x164>
 8006610:	3501      	adds	r5, #1
 8006612:	68e3      	ldr	r3, [r4, #12]
 8006614:	9903      	ldr	r1, [sp, #12]
 8006616:	1a5b      	subs	r3, r3, r1
 8006618:	42ab      	cmp	r3, r5
 800661a:	dcf2      	bgt.n	8006602 <_printf_i+0x21e>
 800661c:	e7eb      	b.n	80065f6 <_printf_i+0x212>
 800661e:	2500      	movs	r5, #0
 8006620:	f104 0619 	add.w	r6, r4, #25
 8006624:	e7f5      	b.n	8006612 <_printf_i+0x22e>
 8006626:	bf00      	nop
 8006628:	080068f9 	.word	0x080068f9
 800662c:	0800690a 	.word	0x0800690a

08006630 <memcpy>:
 8006630:	440a      	add	r2, r1
 8006632:	4291      	cmp	r1, r2
 8006634:	f100 33ff 	add.w	r3, r0, #4294967295
 8006638:	d100      	bne.n	800663c <memcpy+0xc>
 800663a:	4770      	bx	lr
 800663c:	b510      	push	{r4, lr}
 800663e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006642:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006646:	4291      	cmp	r1, r2
 8006648:	d1f9      	bne.n	800663e <memcpy+0xe>
 800664a:	bd10      	pop	{r4, pc}

0800664c <memmove>:
 800664c:	4288      	cmp	r0, r1
 800664e:	b510      	push	{r4, lr}
 8006650:	eb01 0402 	add.w	r4, r1, r2
 8006654:	d902      	bls.n	800665c <memmove+0x10>
 8006656:	4284      	cmp	r4, r0
 8006658:	4623      	mov	r3, r4
 800665a:	d807      	bhi.n	800666c <memmove+0x20>
 800665c:	1e43      	subs	r3, r0, #1
 800665e:	42a1      	cmp	r1, r4
 8006660:	d008      	beq.n	8006674 <memmove+0x28>
 8006662:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006666:	f803 2f01 	strb.w	r2, [r3, #1]!
 800666a:	e7f8      	b.n	800665e <memmove+0x12>
 800666c:	4402      	add	r2, r0
 800666e:	4601      	mov	r1, r0
 8006670:	428a      	cmp	r2, r1
 8006672:	d100      	bne.n	8006676 <memmove+0x2a>
 8006674:	bd10      	pop	{r4, pc}
 8006676:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800667a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800667e:	e7f7      	b.n	8006670 <memmove+0x24>

08006680 <_free_r>:
 8006680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006682:	2900      	cmp	r1, #0
 8006684:	d048      	beq.n	8006718 <_free_r+0x98>
 8006686:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800668a:	9001      	str	r0, [sp, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	f1a1 0404 	sub.w	r4, r1, #4
 8006692:	bfb8      	it	lt
 8006694:	18e4      	addlt	r4, r4, r3
 8006696:	f000 f8d3 	bl	8006840 <__malloc_lock>
 800669a:	4a20      	ldr	r2, [pc, #128]	; (800671c <_free_r+0x9c>)
 800669c:	9801      	ldr	r0, [sp, #4]
 800669e:	6813      	ldr	r3, [r2, #0]
 80066a0:	4615      	mov	r5, r2
 80066a2:	b933      	cbnz	r3, 80066b2 <_free_r+0x32>
 80066a4:	6063      	str	r3, [r4, #4]
 80066a6:	6014      	str	r4, [r2, #0]
 80066a8:	b003      	add	sp, #12
 80066aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066ae:	f000 b8cd 	b.w	800684c <__malloc_unlock>
 80066b2:	42a3      	cmp	r3, r4
 80066b4:	d90b      	bls.n	80066ce <_free_r+0x4e>
 80066b6:	6821      	ldr	r1, [r4, #0]
 80066b8:	1862      	adds	r2, r4, r1
 80066ba:	4293      	cmp	r3, r2
 80066bc:	bf04      	itt	eq
 80066be:	681a      	ldreq	r2, [r3, #0]
 80066c0:	685b      	ldreq	r3, [r3, #4]
 80066c2:	6063      	str	r3, [r4, #4]
 80066c4:	bf04      	itt	eq
 80066c6:	1852      	addeq	r2, r2, r1
 80066c8:	6022      	streq	r2, [r4, #0]
 80066ca:	602c      	str	r4, [r5, #0]
 80066cc:	e7ec      	b.n	80066a8 <_free_r+0x28>
 80066ce:	461a      	mov	r2, r3
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	b10b      	cbz	r3, 80066d8 <_free_r+0x58>
 80066d4:	42a3      	cmp	r3, r4
 80066d6:	d9fa      	bls.n	80066ce <_free_r+0x4e>
 80066d8:	6811      	ldr	r1, [r2, #0]
 80066da:	1855      	adds	r5, r2, r1
 80066dc:	42a5      	cmp	r5, r4
 80066de:	d10b      	bne.n	80066f8 <_free_r+0x78>
 80066e0:	6824      	ldr	r4, [r4, #0]
 80066e2:	4421      	add	r1, r4
 80066e4:	1854      	adds	r4, r2, r1
 80066e6:	42a3      	cmp	r3, r4
 80066e8:	6011      	str	r1, [r2, #0]
 80066ea:	d1dd      	bne.n	80066a8 <_free_r+0x28>
 80066ec:	681c      	ldr	r4, [r3, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	6053      	str	r3, [r2, #4]
 80066f2:	4421      	add	r1, r4
 80066f4:	6011      	str	r1, [r2, #0]
 80066f6:	e7d7      	b.n	80066a8 <_free_r+0x28>
 80066f8:	d902      	bls.n	8006700 <_free_r+0x80>
 80066fa:	230c      	movs	r3, #12
 80066fc:	6003      	str	r3, [r0, #0]
 80066fe:	e7d3      	b.n	80066a8 <_free_r+0x28>
 8006700:	6825      	ldr	r5, [r4, #0]
 8006702:	1961      	adds	r1, r4, r5
 8006704:	428b      	cmp	r3, r1
 8006706:	bf04      	itt	eq
 8006708:	6819      	ldreq	r1, [r3, #0]
 800670a:	685b      	ldreq	r3, [r3, #4]
 800670c:	6063      	str	r3, [r4, #4]
 800670e:	bf04      	itt	eq
 8006710:	1949      	addeq	r1, r1, r5
 8006712:	6021      	streq	r1, [r4, #0]
 8006714:	6054      	str	r4, [r2, #4]
 8006716:	e7c7      	b.n	80066a8 <_free_r+0x28>
 8006718:	b003      	add	sp, #12
 800671a:	bd30      	pop	{r4, r5, pc}
 800671c:	20000090 	.word	0x20000090

08006720 <_malloc_r>:
 8006720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006722:	1ccd      	adds	r5, r1, #3
 8006724:	f025 0503 	bic.w	r5, r5, #3
 8006728:	3508      	adds	r5, #8
 800672a:	2d0c      	cmp	r5, #12
 800672c:	bf38      	it	cc
 800672e:	250c      	movcc	r5, #12
 8006730:	2d00      	cmp	r5, #0
 8006732:	4606      	mov	r6, r0
 8006734:	db01      	blt.n	800673a <_malloc_r+0x1a>
 8006736:	42a9      	cmp	r1, r5
 8006738:	d903      	bls.n	8006742 <_malloc_r+0x22>
 800673a:	230c      	movs	r3, #12
 800673c:	6033      	str	r3, [r6, #0]
 800673e:	2000      	movs	r0, #0
 8006740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006742:	f000 f87d 	bl	8006840 <__malloc_lock>
 8006746:	4921      	ldr	r1, [pc, #132]	; (80067cc <_malloc_r+0xac>)
 8006748:	680a      	ldr	r2, [r1, #0]
 800674a:	4614      	mov	r4, r2
 800674c:	b99c      	cbnz	r4, 8006776 <_malloc_r+0x56>
 800674e:	4f20      	ldr	r7, [pc, #128]	; (80067d0 <_malloc_r+0xb0>)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	b923      	cbnz	r3, 800675e <_malloc_r+0x3e>
 8006754:	4621      	mov	r1, r4
 8006756:	4630      	mov	r0, r6
 8006758:	f000 f862 	bl	8006820 <_sbrk_r>
 800675c:	6038      	str	r0, [r7, #0]
 800675e:	4629      	mov	r1, r5
 8006760:	4630      	mov	r0, r6
 8006762:	f000 f85d 	bl	8006820 <_sbrk_r>
 8006766:	1c43      	adds	r3, r0, #1
 8006768:	d123      	bne.n	80067b2 <_malloc_r+0x92>
 800676a:	230c      	movs	r3, #12
 800676c:	6033      	str	r3, [r6, #0]
 800676e:	4630      	mov	r0, r6
 8006770:	f000 f86c 	bl	800684c <__malloc_unlock>
 8006774:	e7e3      	b.n	800673e <_malloc_r+0x1e>
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	1b5b      	subs	r3, r3, r5
 800677a:	d417      	bmi.n	80067ac <_malloc_r+0x8c>
 800677c:	2b0b      	cmp	r3, #11
 800677e:	d903      	bls.n	8006788 <_malloc_r+0x68>
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	441c      	add	r4, r3
 8006784:	6025      	str	r5, [r4, #0]
 8006786:	e004      	b.n	8006792 <_malloc_r+0x72>
 8006788:	6863      	ldr	r3, [r4, #4]
 800678a:	42a2      	cmp	r2, r4
 800678c:	bf0c      	ite	eq
 800678e:	600b      	streq	r3, [r1, #0]
 8006790:	6053      	strne	r3, [r2, #4]
 8006792:	4630      	mov	r0, r6
 8006794:	f000 f85a 	bl	800684c <__malloc_unlock>
 8006798:	f104 000b 	add.w	r0, r4, #11
 800679c:	1d23      	adds	r3, r4, #4
 800679e:	f020 0007 	bic.w	r0, r0, #7
 80067a2:	1ac2      	subs	r2, r0, r3
 80067a4:	d0cc      	beq.n	8006740 <_malloc_r+0x20>
 80067a6:	1a1b      	subs	r3, r3, r0
 80067a8:	50a3      	str	r3, [r4, r2]
 80067aa:	e7c9      	b.n	8006740 <_malloc_r+0x20>
 80067ac:	4622      	mov	r2, r4
 80067ae:	6864      	ldr	r4, [r4, #4]
 80067b0:	e7cc      	b.n	800674c <_malloc_r+0x2c>
 80067b2:	1cc4      	adds	r4, r0, #3
 80067b4:	f024 0403 	bic.w	r4, r4, #3
 80067b8:	42a0      	cmp	r0, r4
 80067ba:	d0e3      	beq.n	8006784 <_malloc_r+0x64>
 80067bc:	1a21      	subs	r1, r4, r0
 80067be:	4630      	mov	r0, r6
 80067c0:	f000 f82e 	bl	8006820 <_sbrk_r>
 80067c4:	3001      	adds	r0, #1
 80067c6:	d1dd      	bne.n	8006784 <_malloc_r+0x64>
 80067c8:	e7cf      	b.n	800676a <_malloc_r+0x4a>
 80067ca:	bf00      	nop
 80067cc:	20000090 	.word	0x20000090
 80067d0:	20000094 	.word	0x20000094

080067d4 <_realloc_r>:
 80067d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d6:	4607      	mov	r7, r0
 80067d8:	4614      	mov	r4, r2
 80067da:	460e      	mov	r6, r1
 80067dc:	b921      	cbnz	r1, 80067e8 <_realloc_r+0x14>
 80067de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80067e2:	4611      	mov	r1, r2
 80067e4:	f7ff bf9c 	b.w	8006720 <_malloc_r>
 80067e8:	b922      	cbnz	r2, 80067f4 <_realloc_r+0x20>
 80067ea:	f7ff ff49 	bl	8006680 <_free_r>
 80067ee:	4625      	mov	r5, r4
 80067f0:	4628      	mov	r0, r5
 80067f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067f4:	f000 f830 	bl	8006858 <_malloc_usable_size_r>
 80067f8:	42a0      	cmp	r0, r4
 80067fa:	d20f      	bcs.n	800681c <_realloc_r+0x48>
 80067fc:	4621      	mov	r1, r4
 80067fe:	4638      	mov	r0, r7
 8006800:	f7ff ff8e 	bl	8006720 <_malloc_r>
 8006804:	4605      	mov	r5, r0
 8006806:	2800      	cmp	r0, #0
 8006808:	d0f2      	beq.n	80067f0 <_realloc_r+0x1c>
 800680a:	4631      	mov	r1, r6
 800680c:	4622      	mov	r2, r4
 800680e:	f7ff ff0f 	bl	8006630 <memcpy>
 8006812:	4631      	mov	r1, r6
 8006814:	4638      	mov	r0, r7
 8006816:	f7ff ff33 	bl	8006680 <_free_r>
 800681a:	e7e9      	b.n	80067f0 <_realloc_r+0x1c>
 800681c:	4635      	mov	r5, r6
 800681e:	e7e7      	b.n	80067f0 <_realloc_r+0x1c>

08006820 <_sbrk_r>:
 8006820:	b538      	push	{r3, r4, r5, lr}
 8006822:	4d06      	ldr	r5, [pc, #24]	; (800683c <_sbrk_r+0x1c>)
 8006824:	2300      	movs	r3, #0
 8006826:	4604      	mov	r4, r0
 8006828:	4608      	mov	r0, r1
 800682a:	602b      	str	r3, [r5, #0]
 800682c:	f7fb f860 	bl	80018f0 <_sbrk>
 8006830:	1c43      	adds	r3, r0, #1
 8006832:	d102      	bne.n	800683a <_sbrk_r+0x1a>
 8006834:	682b      	ldr	r3, [r5, #0]
 8006836:	b103      	cbz	r3, 800683a <_sbrk_r+0x1a>
 8006838:	6023      	str	r3, [r4, #0]
 800683a:	bd38      	pop	{r3, r4, r5, pc}
 800683c:	20000664 	.word	0x20000664

08006840 <__malloc_lock>:
 8006840:	4801      	ldr	r0, [pc, #4]	; (8006848 <__malloc_lock+0x8>)
 8006842:	f000 b811 	b.w	8006868 <__retarget_lock_acquire_recursive>
 8006846:	bf00      	nop
 8006848:	2000066c 	.word	0x2000066c

0800684c <__malloc_unlock>:
 800684c:	4801      	ldr	r0, [pc, #4]	; (8006854 <__malloc_unlock+0x8>)
 800684e:	f000 b80c 	b.w	800686a <__retarget_lock_release_recursive>
 8006852:	bf00      	nop
 8006854:	2000066c 	.word	0x2000066c

08006858 <_malloc_usable_size_r>:
 8006858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800685c:	1f18      	subs	r0, r3, #4
 800685e:	2b00      	cmp	r3, #0
 8006860:	bfbc      	itt	lt
 8006862:	580b      	ldrlt	r3, [r1, r0]
 8006864:	18c0      	addlt	r0, r0, r3
 8006866:	4770      	bx	lr

08006868 <__retarget_lock_acquire_recursive>:
 8006868:	4770      	bx	lr

0800686a <__retarget_lock_release_recursive>:
 800686a:	4770      	bx	lr

0800686c <_init>:
 800686c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800686e:	bf00      	nop
 8006870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006872:	bc08      	pop	{r3}
 8006874:	469e      	mov	lr, r3
 8006876:	4770      	bx	lr

08006878 <_fini>:
 8006878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687a:	bf00      	nop
 800687c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800687e:	bc08      	pop	{r3}
 8006880:	469e      	mov	lr, r3
 8006882:	4770      	bx	lr
